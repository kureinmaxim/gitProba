import serial
import serial.tools.list_ports
import sys

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    "baudrate": 38400,
    "bytesize": serial.EIGHTBITS,
    "parity": serial.PARITY_NONE,
    "stopbits": serial.STOPBITS_ONE
}


def list_available_ports():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö COM-–ø–æ—Ä—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω."""
    ports = list(serial.tools.list_ports.comports())
    if not ports:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤!")
        return []

    print("\nüîå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
    for i, port in enumerate(ports, start=1):
        print(f"  {i}. {port.device}")

    return ports


def select_port():
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å COM-–ø–æ—Ä—Ç –ø–æ –Ω–æ–º–µ—Ä—É."""
    ports = list_available_ports()
    if not ports:
        return None

    while True:
        try:
            selected_index = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞: ")) - 1
            if 0 <= selected_index < len(ports):
                return ports[selected_index].device
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞!")
        except ValueError:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


def choose_configuration_mode():
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–∞"""
    print("\n=== ‚öô  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ ===")
    print("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    print("   (38400 –±–æ–¥, 8 –±–∏—Ç, –±–µ–∑ –ø–∞—Ä–∏—Ç–µ—Ç–∞, 1 —Å—Ç–æ–ø-–±–∏—Ç)")
    print("2. –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

    while True:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (1/2): ").strip()
        if choice == '1':
            return DEFAULT_SETTINGS
        elif choice == '2':
            return None
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")


def choose_option(prompt, options):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."""
    print(f"\n{prompt}")
    for i, option in enumerate(options, start=1):
        print(f"  {i}. {option}")

    while True:
        try:
            selected_index = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä: ")) - 1
            if 0 <= selected_index < len(options):
                return options[selected_index]
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
        except ValueError:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


def full_port_configuration():
    """–ü–æ–ª–Ω–∞—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞"""
    baudrate = choose_option("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ (–±–æ–¥):",
                             [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200])

    bytesize_options = {
        "5 –±–∏—Ç": serial.FIVEBITS,
        "6 –±–∏—Ç": serial.SIXBITS,
        "7 –±–∏—Ç": serial.SEVENBITS,
        "8 –±–∏—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)": serial.EIGHTBITS
    }
    bytesize = choose_option("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–∞–π—Ç–∞:", list(bytesize_options.keys()))
    bytesize = bytesize_options[bytesize]

    parity_options = {
        "–ù–µ—Ç": serial.PARITY_NONE,
        "–ß–µ—Ç–Ω—ã–π (Even)": serial.PARITY_EVEN,
        "–ù–µ—á–µ—Ç–Ω—ã–π (Odd)": serial.PARITY_ODD,
        "–ú–∞—Ä–∫–µ—Ä (Mark)": serial.PARITY_MARK,
        "–ü—Ä–æ–±–µ–ª (Space)": serial.PARITY_SPACE
    }
    parity = choose_option("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∏—Ç–µ—Ç:", list(parity_options.keys()))
    parity = parity_options[parity]

    stopbits = choose_option("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ø-–±–∏—Ç–æ–≤:",
                             [serial.STOPBITS_ONE, serial.STOPBITS_ONE_POINT_FIVE, serial.STOPBITS_TWO])

    return {
        "baudrate": baudrate,
        "bytesize": bytesize,
        "parity": parity,
        "stopbits": stopbits
    }

def process_request(request):
    """–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {request.hex()}")
    if request == bytes([0x01, 0x02, 0x03]):
        return bytes([0x01, 0x0C])
    elif request == bytes([0x41]):
        return bytes([0x20, 0x00])
    elif request == bytes([0xAA, 0xBB, 0xCC]):
        return bytes([0xDD, 0xEE])
    elif len(request) == 3 and request[0] == 0x01:
        return bytes([request[0], request[1] + 10])
    return None

def main():
    try:
        port = select_port()
        if not port:
            print("‚ùå –í—ã—Ö–æ–¥: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!")
            sys.exit(0)

        settings = choose_configuration_mode()
        if settings is None:
            settings = full_port_configuration()

        ser = serial.Serial(
            port=port,
            baudrate=settings["baudrate"],
            bytesize=settings["bytesize"],
            parity=settings["parity"],
            stopbits=settings["stopbits"],
            timeout=1
        )

        print(f"\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ü–æ—Ä—Ç üìå: {ser.port} @ {ser.baudrate} –±–æ–¥ @ {ser.bytesize} @ {ser.parity} @ {ser.stopbits}" )
        print("\nüîÑ –≠–º—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. üìç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

        try:
            while True:
                if ser.in_waiting:
                    request = ser.read(ser.in_waiting)
                    response = process_request(request)
                    if response:
                        ser.write(response)
                        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: {response.hex()}")

        except KeyboardInterrupt:
            print("\n ‚èπ  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ü–∏–∏")
        finally:
            ser.close()

    except KeyboardInterrupt:
        print("\nüö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ Ctrl + C")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
