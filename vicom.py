import serial
import serial.tools.list_ports
import sys
import threading
import time

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    "baudrate": 38400,
    "bytesize": serial.EIGHTBITS,
    "parity": serial.PARITY_NONE,
    "stopbits": serial.STOPBITS_ONE
}

POLYNOMIAL = 0xA001  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–ª–∏–Ω–æ–º –¥–ª—è CRC16-MODBUS

def calculate_crc16(data: bytes) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç CRC16 –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –ê–Ω–∞–ª–æ–≥ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–∑ C-–∫–æ–¥–∞.
    """
    crc = 0xFFFF

    for byte in data:
        crc ^= byte
        for _ in range(8):
            if crc & 1:
                crc = (crc >> 1) ^ POLYNOMIAL
            else:
                crc >>= 1

    return crc

def receive_data(ser):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–µ–º–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    while ser.is_open:
        try:
            if ser.in_waiting:
                request = ser.read(ser.in_waiting)
                print(f"\nüì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {' '.join(f'{b:02X}' for b in request)}")
                response = process_request(request)
                if response:
                    ser.write(response)
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: {' '.join(f'{b:02X}' for b in response)}")
                print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ", end='', flush=True)
            time.sleep(0.1)
        except Exception as e:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            break

def send_hex_data(ser, hex_string: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ HEX –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—Ç"""
    try:
        hex_string = hex_string.replace(" ", "")
        if not all(c in '0123456789ABCDEFabcdef' for c in hex_string):
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç HEX –¥–∞–Ω–Ω—ã—Ö")
            return
        
        data = bytes.fromhex(hex_string)
        ser.write(data)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (HEX): {' '.join(f'{b:02X}' for b in data)}")
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç HEX –¥–∞–Ω–Ω—ã—Ö")

def send_hex_data_with_crc(ser, hex_string: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ HEX –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º CRC16"""
    try:
        hex_string = hex_string.replace(" ", "")
        if not all(c in '0123456789ABCDEFabcdef' for c in hex_string):
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç HEX –¥–∞–Ω–Ω—ã—Ö")
            return
        
        data = bytes.fromhex(hex_string)
        crc = calculate_crc16(data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º CRC –∫ –¥–∞–Ω–Ω—ã–º (–º–ª–∞–¥—à–∏–π –±–∞–π—Ç –ø–µ—Ä–≤—ã–π)
        final_data = data + bytes([crc & 0xFF, (crc >> 8) & 0xFF])
        
        ser.write(final_data)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (HEX+CRC): {' '.join(f'{b:02X}' for b in data)} | CRC: {crc & 0xFF:02X} {(crc >> 8) & 0xFF:02X}")
        
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç HEX –¥–∞–Ω–Ω—ã—Ö")

def send_text_message(ser, message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Ä—Ç"""
    data = message.encode('utf-8')
    ser.write(data)
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–µ–∫—Å—Ç): {message}")

def show_menu():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    print("\n=== üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ ===")
    print("1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print("2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å HEX –¥–∞–Ω–Ω—ã–µ")
    print("3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å HEX –¥–∞–Ω–Ω—ã–µ —Å CRC16")
    print("4. –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")
    print("5. –í—ã—Ö–æ–¥")
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ", end='', flush=True)

def list_available_ports():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö COM-–ø–æ—Ä—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω."""
    ports = list(serial.tools.list_ports.comports())
    if not ports:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤!")
        return []

    print("\nüîå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
    for i, port in enumerate(ports, start=1):
        print(f"  {i}. {port.device}")

    return ports

def select_port():
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å COM-–ø–æ—Ä—Ç –ø–æ –Ω–æ–º–µ—Ä—É."""
    ports = list_available_ports()
    if not ports:
        return None

    while True:
        try:
            selected_index = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞: ")) - 1
            if 0 <= selected_index < len(ports):
                return ports[selected_index].device
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞!")
        except ValueError:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

def choose_configuration_mode():
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–∞"""
    print("\n=== ‚öô  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ ===")
    print("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    print("   (38400 –±–æ–¥, 8 –±–∏—Ç, –±–µ–∑ –ø–∞—Ä–∏—Ç–µ—Ç–∞, 1 —Å—Ç–æ–ø-–±–∏—Ç)")
    print("2. –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

    while True:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (1/2): ").strip()
        if choice == '1':
            return DEFAULT_SETTINGS
        elif choice == '2':
            return None
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")

def choose_option(prompt, options):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."""
    print(f"\n{prompt}")
    for i, option in enumerate(options, start=1):
        print(f"  {i}. {option}")

    while True:
        try:
            selected_index = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä: ")) - 1
            if 0 <= selected_index < len(options):
                return options[selected_index]
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
        except ValueError:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

def full_port_configuration():
    """–ü–æ–ª–Ω–∞—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞"""
    baudrate = choose_option("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ (–±–æ–¥):",
                             [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200])

    bytesize_options = {
        "5 –±–∏—Ç": serial.FIVEBITS,
        "6 –±–∏—Ç": serial.SIXBITS,
        "7 –±–∏—Ç": serial.SEVENBITS,
        "8 –±–∏—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)": serial.EIGHTBITS
    }
    bytesize = choose_option("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–∞–π—Ç–∞:", list(bytesize_options.keys()))
    bytesize = bytesize_options[bytesize]

    parity_options = {
        "–ù–µ—Ç": serial.PARITY_NONE,
        "–ß–µ—Ç–Ω—ã–π (Even)": serial.PARITY_EVEN,
        "–ù–µ—á–µ—Ç–Ω—ã–π (Odd)": serial.PARITY_ODD,
        "–ú–∞—Ä–∫–µ—Ä (Mark)": serial.PARITY_MARK,
        "–ü—Ä–æ–±–µ–ª (Space)": serial.PARITY_SPACE
    }
    parity = choose_option("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∏—Ç–µ—Ç:", list(parity_options.keys()))
    parity = parity_options[parity]

    stopbits = choose_option("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ø-–±–∏—Ç–æ–≤:",
                             [serial.STOPBITS_ONE, serial.STOPBITS_ONE_POINT_FIVE, serial.STOPBITS_TWO])

    return {
        "baudrate": baudrate,
        "bytesize": bytesize,
        "parity": parity,
        "stopbits": stopbits
    }

def process_request(request):
    """–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    if request == bytes([0x01, 0x02, 0x03]):
        return bytes([0x01, 0x0C])
    elif request == bytes([0x41]):
        return bytes([0x20, 0x00])
    elif request == bytes([0xAA, 0xBB, 0xCC]):
        return bytes([0xDD, 0xEE])
    elif len(request) == 3 and request[0] == 0x01:
        return bytes([request[0], request[1] + 10])
    return None

def main():
    while True:  # –¶–∏–∫–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä—Ç–∞
        try:
            port = select_port()
            if not port:
                print("‚ùå –í—ã—Ö–æ–¥: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!")
                sys.exit(0)

            settings = choose_configuration_mode()
            if settings is None:
                settings = full_port_configuration()

            ser = None
            try:
                ser = serial.Serial(
                    port=port,
                    baudrate=settings["baudrate"],
                    bytesize=settings["bytesize"],
                    parity=settings["parity"],
                    stopbits=settings["stopbits"],
                    timeout=1
                )
            except serial.SerialException as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ {port}: {str(e)}")
                print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("   - –ü–æ—Ä—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π")
                print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                print("   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                
                while True:
                    retry = input("\n–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç? (y/n): ").lower().strip()
                    if retry in ['y', 'n']:
                        break
                    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'")
                
                if retry == 'n':
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    sys.exit(0)
                continue

            if not ser or not ser.is_open:
                continue

            print(f"\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ü–æ—Ä—Ç üìå: {ser.port} @ {ser.baudrate} –±–æ–¥ @ {ser.bytesize} @ {ser.parity} @ {ser.stopbits}")
            print("\nüîÑ –≠–º—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
            receiver_thread = threading.Thread(target=receive_data, args=(ser,), daemon=True)
            receiver_thread.start()

            try:
                while True:
                    show_menu()
                    choice = input().strip()

                    if choice == '1':
                        message = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ")
                        send_text_message(ser, message)
                    elif choice == '2':
                        hex_data = input("–í–≤–µ–¥–∏—Ç–µ HEX –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: FF 00 AB –∏–ª–∏ FF00AB): ")
                        send_hex_data(ser, hex_data)
                    elif choice == '3':
                        hex_data = input("–í–≤–µ–¥–∏—Ç–µ HEX –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å CRC16: ")
                        send_hex_data_with_crc(ser, hex_data)
                    elif choice == '4':
                        # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
                        import os
                        os.system('cls' if os.name == 'nt' else 'clear')
                    elif choice == '5':
                        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    else:
                        print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1-5")

            except KeyboardInterrupt:
                print("\n‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ü–∏–∏")
            finally:
                if ser and ser.is_open:
                    ser.close()
                if 'receiver_thread' in locals():
                    receiver_thread.join(timeout=1.0)
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞

        except KeyboardInterrupt:
            print("\nüö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ Ctrl + C")
            sys.exit(0)
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            retry = input("\n–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? (y/n): ").lower().strip()
            if retry != 'y':
                sys.exit(1)
            continue

if __name__ == "__main__":
    main()
