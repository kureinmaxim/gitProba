import intelhex

def calculate_checksum(data, start_address):
    checksum = 0
    for i in range(start_address, len(data), 2):
        word = (data[i] << 8) + data[i + 1]
        checksum = (checksum + word) & 0xFFFF
    return checksum

def adjust_checksum(bin_data, target_checksum, start_address, program_end):
    # Calculate the current checksum
    current_checksum = calculate_checksum(bin_data, start_address)
    print(f"Current checksum: {current_checksum:04X}")

    # Calculate the difference needed to reach the target checksum
    diff = (target_checksum - current_checksum) & 0xFFFF

    # Adjust the two bytes immediately after the program end
    high_byte = (diff >> 8) & 0xFF
    low_byte = diff & 0xFF

    # Modify the two bytes after the program end in the binary data
    bin_data[program_end] = high_byte
    bin_data[program_end + 1] = low_byte

    print(f"Adjusted bytes to achieve target checksum: {high_byte:02X} {low_byte:02X}")

def main():
    input_hex_file = "C:/Project/Project_CodeMaster/PriborTL7/PriborTL7/Debug/Exe/PriborTL7.HEX"
    output_bin_file = "C:/Project/Project_CodeMaster/PriborTL7/PriborTL7/Debug/Exe/PriborTL7.bin"
    output_bin_file_cs = "C:/Project/Project_CodeMaster/PriborTL7/PriborTL7/Debug/Exe/PriborTL7_cs.bin"
    start_address = 0x2000

    # Load the hex file
    hex_data = intelhex.IntelHex(input_hex_file)

    # Determine the end of the program
    program_end = max(hex_data.segments(), key=lambda seg: seg[1])[1]
    print(f"Program end address: {program_end:04X}")

    # Convert the hex file to binary
    bin_data = hex_data.tobinarray(start=0, size=program_end + 2)

    # Write the binary data to the first file without checksum
    with open(output_bin_file, 'wb') as f:
        f.write(bin_data)

    # Set your desired checksum here
    target_checksum = 0xFFFF

    # Adjust the bytes immediately after the program end to achieve the target checksum
    adjust_checksum(bin_data, target_checksum, start_address, program_end - start_address)

    # Write the modified binary data to the second file with checksum
    with open(output_bin_file_cs, 'wb') as f:
        f.write(bin_data)

if __name__ == "__main__":
    main()
