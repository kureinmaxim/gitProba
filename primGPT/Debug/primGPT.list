
primGPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a50  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007bf0  08007bf0  00008bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d7c  08007d7c  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007d7c  08007d7c  00008d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d84  08007d84  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d84  08007d84  00008d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d88  08007d88  00008d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007d8c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a08  20000060  08007dec  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005a68  08007dec  00009a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b67b  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c81  00000000  00000000  0002470b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00028390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001208  00000000  00000000  00029ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018739  00000000  00000000  0002acd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a5e  00000000  00000000  00043411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aec8  00000000  00000000  0005ce6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7d37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b4  00000000  00000000  000f7d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000fe430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bd8 	.word	0x08007bd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007bd8 	.word	0x08007bd8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <crc16>:
#include <stdbool.h>

/*********************************************************************
* CRC16 calculation function (polynomial 0xA001)
*********************************************************************/
uint16_t crc16(const uint8_t *data, uint16_t length) {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 800058c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000590:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < length; i++) {
 8000592:	2300      	movs	r3, #0
 8000594:	81bb      	strh	r3, [r7, #12]
 8000596:	e022      	b.n	80005de <crc16+0x5e>
        crc ^= data[i];
 8000598:	89bb      	ldrh	r3, [r7, #12]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	89fb      	ldrh	r3, [r7, #14]
 80005a4:	4053      	eors	r3, r2
 80005a6:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 80005a8:	2300      	movs	r3, #0
 80005aa:	72fb      	strb	r3, [r7, #11]
 80005ac:	e011      	b.n	80005d2 <crc16+0x52>
            if (crc & 1)
 80005ae:	89fb      	ldrh	r3, [r7, #14]
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d006      	beq.n	80005c6 <crc16+0x46>
                crc = (crc >> 1) ^ polynomial;
 80005b8:	89fb      	ldrh	r3, [r7, #14]
 80005ba:	085b      	lsrs	r3, r3, #1
 80005bc:	b29a      	uxth	r2, r3
 80005be:	4b0d      	ldr	r3, [pc, #52]	@ (80005f4 <crc16+0x74>)
 80005c0:	4053      	eors	r3, r2
 80005c2:	81fb      	strh	r3, [r7, #14]
 80005c4:	e002      	b.n	80005cc <crc16+0x4c>
            else
                crc >>= 1;
 80005c6:	89fb      	ldrh	r3, [r7, #14]
 80005c8:	085b      	lsrs	r3, r3, #1
 80005ca:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 80005cc:	7afb      	ldrb	r3, [r7, #11]
 80005ce:	3301      	adds	r3, #1
 80005d0:	72fb      	strb	r3, [r7, #11]
 80005d2:	7afb      	ldrb	r3, [r7, #11]
 80005d4:	2b07      	cmp	r3, #7
 80005d6:	d9ea      	bls.n	80005ae <crc16+0x2e>
    for (uint16_t i = 0; i < length; i++) {
 80005d8:	89bb      	ldrh	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	81bb      	strh	r3, [r7, #12]
 80005de:	89ba      	ldrh	r2, [r7, #12]
 80005e0:	887b      	ldrh	r3, [r7, #2]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d3d8      	bcc.n	8000598 <crc16+0x18>
        }
    }
    return crc;
 80005e6:	89fb      	ldrh	r3, [r7, #14]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	ffffa001 	.word	0xffffa001

080005f8 <process_crc>:


int process_crc(uint8_t *data, uint16_t length, bool checkFlag) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
 8000604:	4613      	mov	r3, r2
 8000606:	707b      	strb	r3, [r7, #1]
    uint16_t crc = crc16(data, length);
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	4619      	mov	r1, r3
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ffb7 	bl	8000580 <crc16>
 8000612:	4603      	mov	r3, r0
 8000614:	81fb      	strh	r3, [r7, #14]

    if (checkFlag) {
 8000616:	787b      	ldrb	r3, [r7, #1]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d006      	beq.n	800062a <process_crc+0x32>
        // Return 1 if CRC is 0, otherwise 0
        return (crc == 0) ? 1 : 0;
 800061c:	89fb      	ldrh	r3, [r7, #14]
 800061e:	2b00      	cmp	r3, #0
 8000620:	bf0c      	ite	eq
 8000622:	2301      	moveq	r3, #1
 8000624:	2300      	movne	r3, #0
 8000626:	b2db      	uxtb	r3, r3
 8000628:	e010      	b.n	800064c <process_crc+0x54>
    }
    else {
   // Append CRC to data (LSB first, then MSB)
        data[length] = crc & 0xFF;             // Least significant byte
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	4413      	add	r3, r2
 8000630:	89fa      	ldrh	r2, [r7, #14]
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	701a      	strb	r2, [r3, #0]
        data[length + 1] = (crc >> 8) & 0xFF;  // Most significant byte
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b299      	uxth	r1, r3
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	3301      	adds	r3, #1
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	4413      	add	r3, r2
 8000644:	b2ca      	uxtb	r2, r1
 8000646:	701a      	strb	r2, [r3, #0]

        return length + 2;                     // Return new length of data
 8000648:	887b      	ldrh	r3, [r7, #2]
 800064a:	3302      	adds	r3, #2
    }
}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <fram_cfg_setup>:
#include "fram.h"

extern SPI_HandleTypeDef hspi1;

void fram_cfg_setup(fram_cfg_t *cfg) {
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	cfg->sck_port = GPIOA;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a0e      	ldr	r2, [pc, #56]	@ (8000698 <fram_cfg_setup+0x44>)
 8000660:	611a      	str	r2, [r3, #16]
    cfg->sck = GPIO_PIN_5;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2220      	movs	r2, #32
 8000666:	829a      	strh	r2, [r3, #20]
    cfg->sck_port = GPIOA;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a0b      	ldr	r2, [pc, #44]	@ (8000698 <fram_cfg_setup+0x44>)
 800066c:	611a      	str	r2, [r3, #16]
    cfg->miso = GPIO_PIN_6;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2240      	movs	r2, #64	@ 0x40
 8000672:	809a      	strh	r2, [r3, #4]
    cfg->sck_port = GPIOA;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a08      	ldr	r2, [pc, #32]	@ (8000698 <fram_cfg_setup+0x44>)
 8000678:	611a      	str	r2, [r3, #16]
    cfg->mosi = GPIO_PIN_7;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2280      	movs	r2, #128	@ 0x80
 800067e:	819a      	strh	r2, [r3, #12]
    cfg->cs_port = GPIOA;  // for soft CS
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a05      	ldr	r2, [pc, #20]	@ (8000698 <fram_cfg_setup+0x44>)
 8000684:	619a      	str	r2, [r3, #24]
    cfg->cs = GPIO_PIN_4;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2210      	movs	r2, #16
 800068a:	839a      	strh	r2, [r3, #28]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	40020000 	.word	0x40020000

0800069c <fram_init>:

int fram_init(fram_t *fram, fram_cfg_t *cfg) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	if (!fram || !cfg) return -1; // Проверка указателей
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <fram_init+0x16>
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d102      	bne.n	80006b8 <fram_init+0x1c>
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006b6:	e013      	b.n	80006e0 <fram_init+0x44>
    fram->hspi = &hspi1;          // <-- если SPI1
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	@ (80006e8 <fram_init+0x4c>)
 80006bc:	601a      	str	r2, [r3, #0]
    fram->cs_port = cfg->cs_port;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	699a      	ldr	r2, [r3, #24]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	605a      	str	r2, [r3, #4]
    fram->cs_pin = cfg->cs;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	8b9a      	ldrh	r2, [r3, #28]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	811a      	strh	r2, [r3, #8]
    HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, GPIO_PIN_SET);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6858      	ldr	r0, [r3, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	891b      	ldrh	r3, [r3, #8]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	f001 f9b1 	bl	8001a40 <HAL_GPIO_WritePin>
    return 0;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000b8 	.word	0x200000b8

080006ec <fram_write_enable>:

void fram_write_enable(fram_t *fram) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    uint8_t cmd = FRAM_WREN;
 80006f4:	2306      	movs	r3, #6
 80006f6:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, GPIO_PIN_RESET);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6858      	ldr	r0, [r3, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	891b      	ldrh	r3, [r3, #8]
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	f001 f99c 	bl	8001a40 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(fram->hspi, &cmd, 1, HAL_MAX_DELAY);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	f107 010f 	add.w	r1, r7, #15
 8000710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000714:	2201      	movs	r2, #1
 8000716:	f001 feda 	bl	80024ce <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, GPIO_PIN_SET);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6858      	ldr	r0, [r3, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	891b      	ldrh	r3, [r3, #8]
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	f001 f98b 	bl	8001a40 <HAL_GPIO_WritePin>
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <fram_write_disable>:

void fram_write_disable(fram_t *fram) {
 8000732:	b580      	push	{r7, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
    uint8_t cmd = FRAM_WRDI;
 800073a:	2304      	movs	r3, #4
 800073c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, GPIO_PIN_RESET);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6858      	ldr	r0, [r3, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	891b      	ldrh	r3, [r3, #8]
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	f001 f979 	bl	8001a40 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(fram->hspi, &cmd, 1, HAL_MAX_DELAY);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	f107 010f 	add.w	r1, r7, #15
 8000756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800075a:	2201      	movs	r2, #1
 800075c:	f001 feb7 	bl	80024ce <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, GPIO_PIN_SET);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6858      	ldr	r0, [r3, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	891b      	ldrh	r3, [r3, #8]
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	f001 f968 	bl	8001a40 <HAL_GPIO_WritePin>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <fram_read>:
    HAL_SPI_Transmit(fram->hspi, cmd, 2, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, GPIO_PIN_SET);
    fram_write_disable(fram);
}

void fram_read(fram_t *fram, uint16_t address, uint8_t *buffer, uint16_t count) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	461a      	mov	r2, r3
 8000784:	460b      	mov	r3, r1
 8000786:	817b      	strh	r3, [r7, #10]
 8000788:	4613      	mov	r3, r2
 800078a:	813b      	strh	r3, [r7, #8]
    uint8_t cmd[3] = { FRAM_READ, (uint8_t)(address >> 8), (uint8_t)(address & 0xFF) };
 800078c:	2303      	movs	r3, #3
 800078e:	753b      	strb	r3, [r7, #20]
 8000790:	897b      	ldrh	r3, [r7, #10]
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	b29b      	uxth	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	757b      	strb	r3, [r7, #21]
 800079a:	897b      	ldrh	r3, [r7, #10]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	75bb      	strb	r3, [r7, #22]
    HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, GPIO_PIN_RESET);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	6858      	ldr	r0, [r3, #4]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	891b      	ldrh	r3, [r3, #8]
 80007a8:	2200      	movs	r2, #0
 80007aa:	4619      	mov	r1, r3
 80007ac:	f001 f948 	bl	8001a40 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(fram->hspi, cmd, 3, HAL_MAX_DELAY);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	f107 0114 	add.w	r1, r7, #20
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007bc:	2203      	movs	r2, #3
 80007be:	f001 fe86 	bl	80024ce <HAL_SPI_Transmit>
    HAL_SPI_Receive(fram->hspi, buffer, count, HAL_MAX_DELAY);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6818      	ldr	r0, [r3, #0]
 80007c6:	893a      	ldrh	r2, [r7, #8]
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	f001 ffc2 	bl	8002756 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, GPIO_PIN_SET);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	6858      	ldr	r0, [r3, #4]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	891b      	ldrh	r3, [r3, #8]
 80007da:	2201      	movs	r2, #1
 80007dc:	4619      	mov	r1, r3
 80007de:	f001 f92f 	bl	8001a40 <HAL_GPIO_WritePin>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <fram_write>:

void fram_write(fram_t *fram, uint16_t address, uint8_t *buffer, uint16_t count) {
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	461a      	mov	r2, r3
 80007f6:	460b      	mov	r3, r1
 80007f8:	817b      	strh	r3, [r7, #10]
 80007fa:	4613      	mov	r3, r2
 80007fc:	813b      	strh	r3, [r7, #8]
    uint8_t cmd[3] = { FRAM_WRITE, (uint8_t)(address >> 8), (uint8_t)(address & 0xFF) };
 80007fe:	2302      	movs	r3, #2
 8000800:	753b      	strb	r3, [r7, #20]
 8000802:	897b      	ldrh	r3, [r7, #10]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	b29b      	uxth	r3, r3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	757b      	strb	r3, [r7, #21]
 800080c:	897b      	ldrh	r3, [r7, #10]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	75bb      	strb	r3, [r7, #22]
    fram_write_enable(fram);
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f7ff ff6a 	bl	80006ec <fram_write_enable>
    HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, GPIO_PIN_RESET);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	6858      	ldr	r0, [r3, #4]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	891b      	ldrh	r3, [r3, #8]
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	f001 f90c 	bl	8001a40 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(fram->hspi, cmd, 3, HAL_MAX_DELAY);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	f107 0114 	add.w	r1, r7, #20
 8000830:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000834:	2203      	movs	r2, #3
 8000836:	f001 fe4a 	bl	80024ce <HAL_SPI_Transmit>
    HAL_SPI_Transmit(fram->hspi, buffer, count, HAL_MAX_DELAY);
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	893a      	ldrh	r2, [r7, #8]
 8000840:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	f001 fe42 	bl	80024ce <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(fram->cs_port, fram->cs_pin, GPIO_PIN_SET);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	6858      	ldr	r0, [r3, #4]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	891b      	ldrh	r3, [r3, #8]
 8000852:	2201      	movs	r2, #1
 8000854:	4619      	mov	r1, r3
 8000856:	f001 f8f3 	bl	8001a40 <HAL_GPIO_WritePin>
    fram_write_disable(fram);
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff ff69 	bl	8000732 <fram_write_disable>
}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <LedTask>:
void Uart1Task(void *argument);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LedTask(void *pvParameters) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	int c = 'A';
 8000870:	2341      	movs	r3, #65	@ 0x41
 8000872:	60fb      	str	r3, [r7, #12]

    while (1) {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000874:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000878:	4806      	ldr	r0, [pc, #24]	@ (8000894 <LedTask+0x2c>)
 800087a:	f001 f8fa 	bl	8001a72 <HAL_GPIO_TogglePin>
        uart1_put_ch(c);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fcda 	bl	800123c <uart1_put_ch>
        vTaskDelay(pdMS_TO_TICKS(1000));
 8000888:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800088c:	f004 ff6a 	bl	8005764 <vTaskDelay>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000890:	bf00      	nop
 8000892:	e7ef      	b.n	8000874 <LedTask+0xc>
 8000894:	40020800 	.word	0x40020800

08000898 <Uart1Task>:
    }
}

void Uart1Task(void *pvParameters) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b0aa      	sub	sp, #168	@ 0xa8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
    uint8_t command[UART_BUF_SIZE];
    uint8_t index = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    uint16_t crc = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
    char receivedChar;
    char wr_data[7] = {'K', 'U', 'R', 'E', 'I', 'N'};
 80008ac:	4a5e      	ldr	r2, [pc, #376]	@ (8000a28 <Uart1Task+0x190>)
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b6:	6018      	str	r0, [r3, #0]
 80008b8:	3304      	adds	r3, #4
 80008ba:	8019      	strh	r1, [r3, #0]
 80008bc:	3302      	adds	r3, #2
 80008be:	0c0a      	lsrs	r2, r1, #16
 80008c0:	701a      	strb	r2, [r3, #0]
    char rd_data[7] = {0};
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	2100      	movs	r1, #0
 80008cc:	460a      	mov	r2, r1
 80008ce:	801a      	strh	r2, [r3, #0]
 80008d0:	460a      	mov	r2, r1
 80008d2:	709a      	strb	r2, [r3, #2]

    while (1) {
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80008d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008d8:	4854      	ldr	r0, [pc, #336]	@ (8000a2c <Uart1Task+0x194>)
 80008da:	f001 f8ca 	bl	8001a72 <HAL_GPIO_TogglePin>

        // Waiting for a byte from the queue(очереди)
        if (xQueueReceive(uartQueue, &receivedChar, pdMS_TO_TICKS(2)) == pdPASS) {
 80008de:	4b54      	ldr	r3, [pc, #336]	@ (8000a30 <Uart1Task+0x198>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f107 011b 	add.w	r1, r7, #27
 80008e6:	2202      	movs	r2, #2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f004 fb0d 	bl	8004f08 <xQueueReceive>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d111      	bne.n	8000918 <Uart1Task+0x80>

            if (index < UART_BUF_SIZE) {
 80008f4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	db0d      	blt.n	8000918 <Uart1Task+0x80>
            	//uart1_put_ch(index);
                command[index++] = receivedChar;
 80008fc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	f887 20a7 	strb.w	r2, [r7, #167]	@ 0xa7
 8000906:	7efa      	ldrb	r2, [r7, #27]
 8000908:	33a8      	adds	r3, #168	@ 0xa8
 800090a:	443b      	add	r3, r7
 800090c:	f803 2c8c 	strb.w	r2, [r3, #-140]
                uart1_put_ch(receivedChar);
 8000910:	7efb      	ldrb	r3, [r7, #27]
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fc92 	bl	800123c <uart1_put_ch>
            }
        }

        uint32_t current_time = xTaskGetTickCount();
 8000918:	f005 f876 	bl	8005a08 <xTaskGetTickCount>
 800091c:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
        uint32_t diff = current_time - last_rx_time;
 8000920:	4b44      	ldr	r3, [pc, #272]	@ (8000a34 <Uart1Task+0x19c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

        if (index > 0 && diff > pdMS_TO_TICKS(UART_TIMEOUT_MS)) {
 800092e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0ce      	beq.n	80008d4 <Uart1Task+0x3c>
 8000936:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800093a:	2bc8      	cmp	r3, #200	@ 0xc8
 800093c:	d9ca      	bls.n	80008d4 <Uart1Task+0x3c>
        	//uart1_put_u32(diff);
            crc = process_crc(command, index, true);
 800093e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000942:	b299      	uxth	r1, r3
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	2201      	movs	r2, #1
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fe54 	bl	80005f8 <process_crc>
 8000950:	4603      	mov	r3, r0
 8000952:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
            //uart1_put_ch(crc);
            if (crc == 1) {
 8000956:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 800095a:	2b01      	cmp	r3, #1
 800095c:	d155      	bne.n	8000a0a <Uart1Task+0x172>
                switch (command[0]) {
 800095e:	7f3b      	ldrb	r3, [r7, #28]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d026      	beq.n	80009b2 <Uart1Task+0x11a>
 8000964:	2b02      	cmp	r3, #2
 8000966:	dc50      	bgt.n	8000a0a <Uart1Task+0x172>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <Uart1Task+0xda>
 800096c:	2b01      	cmp	r3, #1
 800096e:	d010      	beq.n	8000992 <Uart1Task+0xfa>
 8000970:	e042      	b.n	80009f8 <Uart1Task+0x160>
                    case 0:
                        if (command[1] == 0) {
 8000972:	7f7b      	ldrb	r3, [r7, #29]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d13a      	bne.n	80009ee <Uart1Task+0x156>
                            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800097e:	482b      	ldr	r0, [pc, #172]	@ (8000a2c <Uart1Task+0x194>)
 8000980:	f001 f85e 	bl	8001a40 <HAL_GPIO_WritePin>
                            log_printf("Debug: command_0 CRC = %d\r\n",crc);
 8000984:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8000988:	4619      	mov	r1, r3
 800098a:	482b      	ldr	r0, [pc, #172]	@ (8000a38 <Uart1Task+0x1a0>)
 800098c:	f000 fc32 	bl	80011f4 <log_printf>
                        }
                        break;
 8000990:	e02d      	b.n	80009ee <Uart1Task+0x156>

                    case 1:
                        if (command[1] == 1) {
 8000992:	7f7b      	ldrb	r3, [r7, #29]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d12c      	bne.n	80009f2 <Uart1Task+0x15a>
                            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800099e:	4823      	ldr	r0, [pc, #140]	@ (8000a2c <Uart1Task+0x194>)
 80009a0:	f001 f84e 	bl	8001a40 <HAL_GPIO_WritePin>
                            log_printf("Debug: command_1 CRC = %d\r\n",crc);
 80009a4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80009a8:	4619      	mov	r1, r3
 80009aa:	4824      	ldr	r0, [pc, #144]	@ (8000a3c <Uart1Task+0x1a4>)
 80009ac:	f000 fc22 	bl	80011f4 <log_printf>
                         }
                         break;
 80009b0:	e01f      	b.n	80009f2 <Uart1Task+0x15a>

                    case 2:
                        if (command[1] == 0) {
 80009b2:	7f7b      	ldrb	r3, [r7, #29]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d11e      	bne.n	80009f6 <Uart1Task+0x15e>
                        	log_printf("Debug: command_2 CRC = %d\r\n",crc);
 80009b8:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80009bc:	4619      	mov	r1, r3
 80009be:	4820      	ldr	r0, [pc, #128]	@ (8000a40 <Uart1Task+0x1a8>)
 80009c0:	f000 fc18 	bl	80011f4 <log_printf>
                            fram_write(&fram, 0x0150, (uint8_t *)wr_data, sizeof(wr_data));
 80009c4:	f107 0214 	add.w	r2, r7, #20
 80009c8:	2307      	movs	r3, #7
 80009ca:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80009ce:	481d      	ldr	r0, [pc, #116]	@ (8000a44 <Uart1Task+0x1ac>)
 80009d0:	f7ff ff0b 	bl	80007ea <fram_write>
                            HAL_Delay(1000);
 80009d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d8:	f000 fd16 	bl	8001408 <HAL_Delay>
                            fram_read(&fram, 0x0150, (uint8_t *)rd_data, sizeof(wr_data));
 80009dc:	f107 020c 	add.w	r2, r7, #12
 80009e0:	2307      	movs	r3, #7
 80009e2:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80009e6:	4817      	ldr	r0, [pc, #92]	@ (8000a44 <Uart1Task+0x1ac>)
 80009e8:	f7ff fec6 	bl	8000778 <fram_read>
                        }
                        break;
 80009ec:	e003      	b.n	80009f6 <Uart1Task+0x15e>
                        break;
 80009ee:	bf00      	nop
 80009f0:	e00b      	b.n	8000a0a <Uart1Task+0x172>
                         break;
 80009f2:	bf00      	nop
 80009f4:	e009      	b.n	8000a0a <Uart1Task+0x172>
                        break;
 80009f6:	bf00      	nop
                }
            }

            while (uxQueueMessagesWaiting(uartQueue) > 0) {
 80009f8:	e007      	b.n	8000a0a <Uart1Task+0x172>
                char discardChar;
                xQueueReceive(uartQueue, &discardChar, 0);
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <Uart1Task+0x198>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f107 010b 	add.w	r1, r7, #11
 8000a02:	2200      	movs	r2, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f004 fa7f 	bl	8004f08 <xQueueReceive>
            while (uxQueueMessagesWaiting(uartQueue) > 0) {
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <Uart1Task+0x198>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f004 fb5c 	bl	80050cc <uxQueueMessagesWaiting>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1ef      	bne.n	80009fa <Uart1Task+0x162>
            }
        index = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        vTaskDelay(pdMS_TO_TICKS(10));  // Adding a delay
 8000a20:	200a      	movs	r0, #10
 8000a22:	f004 fe9f 	bl	8005764 <vTaskDelay>
    while (1) {
 8000a26:	e755      	b.n	80008d4 <Uart1Task+0x3c>
 8000a28:	08007c70 	.word	0x08007c70
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	200000ac 	.word	0x200000ac
 8000a34:	2000007c 	.word	0x2000007c
 8000a38:	08007c10 	.word	0x08007c10
 8000a3c:	08007c30 	.word	0x08007c30
 8000a40:	08007c50 	.word	0x08007c50
 8000a44:	20000080 	.word	0x20000080

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f000 fc9a 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f86a 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a54:	f000 f960 	bl	8000d18 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a58:	f000 f904 	bl	8000c64 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000a5c:	f000 f8cc 	bl	8000bf8 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000a60:	f000 f930 	bl	8000cc4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  log_printf("Main started, time: %lu ms\r\n", HAL_GetTick());
 8000a64:	f000 fcc4 	bl	80013f0 <HAL_GetTick>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4820      	ldr	r0, [pc, #128]	@ (8000af0 <main+0xa8>)
 8000a6e:	f000 fbc1 	bl	80011f4 <log_printf>

  fram_cfg_setup(&cfgFRAM);
 8000a72:	4820      	ldr	r0, [pc, #128]	@ (8000af4 <main+0xac>)
 8000a74:	f7ff fdee 	bl	8000654 <fram_cfg_setup>
  fram_init(&fram,&cfgFRAM);
 8000a78:	491e      	ldr	r1, [pc, #120]	@ (8000af4 <main+0xac>)
 8000a7a:	481f      	ldr	r0, [pc, #124]	@ (8000af8 <main+0xb0>)
 8000a7c:	f7ff fe0e 	bl	800069c <fram_init>

  log_printf("FRAM setup done\r\n");
 8000a80:	481e      	ldr	r0, [pc, #120]	@ (8000afc <main+0xb4>)
 8000a82:	f000 fbb7 	bl	80011f4 <log_printf>
  //HAL_Delay(1000);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a86:	f003 fd79 	bl	800457c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uartQueue = xQueueCreate(100, sizeof(char));  // Очередь на 40 элементов
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	2064      	movs	r0, #100	@ 0x64
 8000a90:	f004 f83b 	bl	8004b0a <xQueueGenericCreate>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4a1a      	ldr	r2, [pc, #104]	@ (8000b00 <main+0xb8>)
 8000a98:	6013      	str	r3, [r2, #0]
  if (uartQueue == NULL) {
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <main+0xb8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <main+0x5e>
       Error_Handler();// Ошибка создания очереди
 8000aa2:	f000 f9bd 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000aa6:	4a17      	ldr	r2, [pc, #92]	@ (8000b04 <main+0xbc>)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4817      	ldr	r0, [pc, #92]	@ (8000b08 <main+0xc0>)
 8000aac:	f003 fdb0 	bl	8004610 <osThreadNew>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4a16      	ldr	r2, [pc, #88]	@ (8000b0c <main+0xc4>)
 8000ab4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  LedTaskHandle = osThreadNew(LedTask, NULL, &LedTask_attributes);
 8000ab6:	4a16      	ldr	r2, [pc, #88]	@ (8000b10 <main+0xc8>)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4816      	ldr	r0, [pc, #88]	@ (8000b14 <main+0xcc>)
 8000abc:	f003 fda8 	bl	8004610 <osThreadNew>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4a15      	ldr	r2, [pc, #84]	@ (8000b18 <main+0xd0>)
 8000ac4:	6013      	str	r3, [r2, #0]

  Uart1TaskHandle = osThreadNew(Uart1Task, NULL, &Uart1Task_attributes);
 8000ac6:	4a15      	ldr	r2, [pc, #84]	@ (8000b1c <main+0xd4>)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4815      	ldr	r0, [pc, #84]	@ (8000b20 <main+0xd8>)
 8000acc:	f003 fda0 	bl	8004610 <osThreadNew>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <main+0xdc>)
 8000ad4:	6013      	str	r3, [r2, #0]
  if (Uart1TaskHandle == NULL) {
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <main+0xdc>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d104      	bne.n	8000ae8 <main+0xa0>
	uart1_put_ch('E');
 8000ade:	2045      	movs	r0, #69	@ 0x45
 8000ae0:	f000 fbac 	bl	800123c <uart1_put_ch>
    Error_Handler();
 8000ae4:	f000 f99c 	bl	8000e20 <Error_Handler>
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ae8:	f003 fd6c 	bl	80045c4 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <main+0xa4>
 8000af0:	08007c78 	.word	0x08007c78
 8000af4:	2000008c 	.word	0x2000008c
 8000af8:	20000080 	.word	0x20000080
 8000afc:	08007c98 	.word	0x08007c98
 8000b00:	200000ac 	.word	0x200000ac
 8000b04:	08007cc4 	.word	0x08007cc4
 8000b08:	08000de9 	.word	0x08000de9
 8000b0c:	200001a0 	.word	0x200001a0
 8000b10:	08007ce8 	.word	0x08007ce8
 8000b14:	08000869 	.word	0x08000869
 8000b18:	200000b0 	.word	0x200000b0
 8000b1c:	08007d0c 	.word	0x08007d0c
 8000b20:	08000899 	.word	0x08000899
 8000b24:	200000b4 	.word	0x200000b4

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b094      	sub	sp, #80	@ 0x50
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	2230      	movs	r2, #48	@ 0x30
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f006 fb78 	bl	800722c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <SystemClock_Config+0xc8>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	4a26      	ldr	r2, [pc, #152]	@ (8000bf0 <SystemClock_Config+0xc8>)
 8000b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5c:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <SystemClock_Config+0xc8>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <SystemClock_Config+0xcc>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a20      	ldr	r2, [pc, #128]	@ (8000bf4 <SystemClock_Config+0xcc>)
 8000b72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <SystemClock_Config+0xcc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b98:	2319      	movs	r3, #25
 8000b9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b9c:	23c0      	movs	r3, #192	@ 0xc0
 8000b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0320 	add.w	r3, r7, #32
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 ff7b 	bl	8001aa8 <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bb8:	f000 f932 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2103      	movs	r1, #3
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 f9dd 	bl	8001f98 <HAL_RCC_ClockConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000be4:	f000 f91c 	bl	8000e20 <Error_Handler>
  }
}
 8000be8:	bf00      	nop
 8000bea:	3750      	adds	r7, #80	@ 0x50
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000bfe:	4a18      	ldr	r2, [pc, #96]	@ (8000c60 <MX_SPI1_Init+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000c04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000c2c:	2230      	movs	r2, #48	@ 0x30
 8000c2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000c44:	220a      	movs	r2, #10
 8000c46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MX_SPI1_Init+0x64>)
 8000c4a:	f001 fbb7 	bl	80023bc <HAL_SPI_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c54:	f000 f8e4 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200000b8 	.word	0x200000b8
 8000c60:	40013000 	.word	0x40013000

08000c64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c68:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c6a:	4a14      	ldr	r2, [pc, #80]	@ (8000cbc <MX_USART1_UART_Init+0x58>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000c6e:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c70:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c9a:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000c9c:	f002 fbd4 	bl	8003448 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ca6:	f000 f8bb 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* Enable UART interrupts for receiving data */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart1_rx_buf[0], 1);
 8000caa:	2201      	movs	r2, #1
 8000cac:	4904      	ldr	r1, [pc, #16]	@ (8000cc0 <MX_USART1_UART_Init+0x5c>)
 8000cae:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <MX_USART1_UART_Init+0x54>)
 8000cb0:	f002 fca5 	bl	80035fe <HAL_UART_Receive_IT>

  /* USER CODE END USART1_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000110 	.word	0x20000110
 8000cbc:	40011000 	.word	0x40011000
 8000cc0:	200001f0 	.word	0x200001f0

08000cc4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <MX_USART6_UART_Init+0x50>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_USART6_UART_Init+0x4c>)
 8000cfc:	f002 fba4 	bl	8003448 <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d06:	f000 f88b 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000158 	.word	0x20000158
 8000d14:	40011400 	.word	0x40011400

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b2a      	ldr	r3, [pc, #168]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a29      	ldr	r2, [pc, #164]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b27      	ldr	r3, [pc, #156]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a22      	ldr	r2, [pc, #136]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000d88:	4815      	ldr	r0, [pc, #84]	@ (8000de0 <MX_GPIO_Init+0xc8>)
 8000d8a:	f000 fe59 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2110      	movs	r1, #16
 8000d92:	4814      	ldr	r0, [pc, #80]	@ (8000de4 <MX_GPIO_Init+0xcc>)
 8000d94:	f000 fe54 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000d98:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	480b      	ldr	r0, [pc, #44]	@ (8000de0 <MX_GPIO_Init+0xc8>)
 8000db2:	f000 fcc1 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000db6:	2310      	movs	r3, #16
 8000db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_GPIO_Init+0xcc>)
 8000dce:	f000 fcb3 	bl	8001738 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020000 	.word	0x40020000

08000de8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000df0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000df4:	f003 fc9f 	bl	8004736 <osDelay>
 8000df8:	e7fa      	b.n	8000df0 <StartDefaultTask+0x8>
	...

08000dfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e0e:	f000 fadb 	bl	80013c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40010000 	.word	0x40010000

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <Error_Handler+0x8>

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <HAL_MspInit+0x54>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	4a11      	ldr	r2, [pc, #68]	@ (8000e80 <HAL_MspInit+0x54>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e42:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <HAL_MspInit+0x54>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <HAL_MspInit+0x54>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <HAL_MspInit+0x54>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5e:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <HAL_MspInit+0x54>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	210f      	movs	r1, #15
 8000e6e:	f06f 0001 	mvn.w	r0, #1
 8000e72:	f000 fba5 	bl	80015c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a19      	ldr	r2, [pc, #100]	@ (8000f08 <HAL_SPI_MspInit+0x84>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d12b      	bne.n	8000efe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	4a17      	ldr	r2, [pc, #92]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000eb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a10      	ldr	r2, [pc, #64]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ede:	23e0      	movs	r3, #224	@ 0xe0
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eee:	2305      	movs	r3, #5
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <HAL_SPI_MspInit+0x8c>)
 8000efa:	f000 fc1d 	bl	8001738 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	@ 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40013000 	.word	0x40013000
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020000 	.word	0x40020000

08000f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	@ 0x30
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a37      	ldr	r2, [pc, #220]	@ (8001010 <HAL_UART_MspInit+0xfc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d135      	bne.n	8000fa2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	4b36      	ldr	r3, [pc, #216]	@ (8001014 <HAL_UART_MspInit+0x100>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a35      	ldr	r2, [pc, #212]	@ (8001014 <HAL_UART_MspInit+0x100>)
 8000f40:	f043 0310 	orr.w	r3, r3, #16
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b33      	ldr	r3, [pc, #204]	@ (8001014 <HAL_UART_MspInit+0x100>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <HAL_UART_MspInit+0x100>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a2e      	ldr	r2, [pc, #184]	@ (8001014 <HAL_UART_MspInit+0x100>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b2c      	ldr	r3, [pc, #176]	@ (8001014 <HAL_UART_MspInit+0x100>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f80:	2307      	movs	r3, #7
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4823      	ldr	r0, [pc, #140]	@ (8001018 <HAL_UART_MspInit+0x104>)
 8000f8c:	f000 fbd4 	bl	8001738 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2105      	movs	r1, #5
 8000f94:	2025      	movs	r0, #37	@ 0x25
 8000f96:	f000 fb13 	bl	80015c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f9a:	2025      	movs	r0, #37	@ 0x25
 8000f9c:	f000 fb2c 	bl	80015f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fa0:	e031      	b.n	8001006 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800101c <HAL_UART_MspInit+0x108>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d12c      	bne.n	8001006 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <HAL_UART_MspInit+0x100>)
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb4:	4a17      	ldr	r2, [pc, #92]	@ (8001014 <HAL_UART_MspInit+0x100>)
 8000fb6:	f043 0320 	orr.w	r3, r3, #32
 8000fba:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbc:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <HAL_UART_MspInit+0x100>)
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc0:	f003 0320 	and.w	r3, r3, #32
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <HAL_UART_MspInit+0x100>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	4a10      	ldr	r2, [pc, #64]	@ (8001014 <HAL_UART_MspInit+0x100>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_UART_MspInit+0x100>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fe4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <HAL_UART_MspInit+0x104>)
 8001002:	f000 fb99 	bl	8001738 <HAL_GPIO_Init>
}
 8001006:	bf00      	nop
 8001008:	3730      	adds	r7, #48	@ 0x30
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40011000 	.word	0x40011000
 8001014:	40023800 	.word	0x40023800
 8001018:	40020000 	.word	0x40020000
 800101c:	40011400 	.word	0x40011400

08001020 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	@ 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	4b2e      	ldr	r3, [pc, #184]	@ (80010f0 <HAL_InitTick+0xd0>)
 8001036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001038:	4a2d      	ldr	r2, [pc, #180]	@ (80010f0 <HAL_InitTick+0xd0>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001040:	4b2b      	ldr	r3, [pc, #172]	@ (80010f0 <HAL_InitTick+0xd0>)
 8001042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800104c:	f107 020c 	add.w	r2, r7, #12
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f001 f97e 	bl	8002358 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800105c:	f001 f968 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8001060:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001064:	4a23      	ldr	r2, [pc, #140]	@ (80010f4 <HAL_InitTick+0xd4>)
 8001066:	fba2 2303 	umull	r2, r3, r2, r3
 800106a:	0c9b      	lsrs	r3, r3, #18
 800106c:	3b01      	subs	r3, #1
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001070:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <HAL_InitTick+0xd8>)
 8001072:	4a22      	ldr	r2, [pc, #136]	@ (80010fc <HAL_InitTick+0xdc>)
 8001074:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001076:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <HAL_InitTick+0xd8>)
 8001078:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800107c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800107e:	4a1e      	ldr	r2, [pc, #120]	@ (80010f8 <HAL_InitTick+0xd8>)
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001084:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <HAL_InitTick+0xd8>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <HAL_InitTick+0xd8>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001090:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <HAL_InitTick+0xd8>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001096:	4818      	ldr	r0, [pc, #96]	@ (80010f8 <HAL_InitTick+0xd8>)
 8001098:	f001 ff62 	bl	8002f60 <HAL_TIM_Base_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80010a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d11b      	bne.n	80010e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80010aa:	4813      	ldr	r0, [pc, #76]	@ (80010f8 <HAL_InitTick+0xd8>)
 80010ac:	f001 ffb2 	bl	8003014 <HAL_TIM_Base_Start_IT>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80010b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d111      	bne.n	80010e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010be:	2019      	movs	r0, #25
 80010c0:	f000 fa9a 	bl	80015f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	d808      	bhi.n	80010dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80010ca:	2200      	movs	r2, #0
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	2019      	movs	r0, #25
 80010d0:	f000 fa76 	bl	80015c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <HAL_InitTick+0xe0>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e002      	b.n	80010e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3730      	adds	r7, #48	@ 0x30
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	431bde83 	.word	0x431bde83
 80010f8:	200001a4 	.word	0x200001a4
 80010fc:	40010000 	.word	0x40010000
 8001100:	20000004 	.word	0x20000004

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <NMI_Handler+0x4>

0800110c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <MemManage_Handler+0x4>

0800111c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <UsageFault_Handler+0x4>

0800112c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001142:	f001 ffc9 	bl	80030d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001a4 	.word	0x200001a4

08001150 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <USART1_IRQHandler+0x10>)
 8001156:	f002 fa77 	bl	8003648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000110 	.word	0x20000110

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f006 f8a8 	bl	80072e8 <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	220c      	movs	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20020000 	.word	0x20020000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	200001ec 	.word	0x200001ec
 80011cc:	20005a68 	.word	0x20005a68

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <log_printf>:

volatile char uart1_rx_buf[UART_BUF_SIZE];    // Receive buffer
volatile uint8_t uart1_rx_head = 0;           // Головной указатель
volatile uint8_t uart1_rx_tail = 0;           // Хвостовой указатель

void log_printf(const char *format, ...) {
 80011f4:	b40f      	push	{r0, r1, r2, r3}
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b08c      	sub	sp, #48	@ 0x30
 80011fa:	af00      	add	r7, sp, #0
    char buffer[40];
    va_list args;
    va_start(args, format);
 80011fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001200:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001202:	f107 0008 	add.w	r0, r7, #8
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800120a:	2128      	movs	r1, #40	@ 0x28
 800120c:	f006 f800 	bl	8007210 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), 100);
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4618      	mov	r0, r3
 8001216:	f7fe ffe3 	bl	80001e0 <strlen>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	f107 0108 	add.w	r1, r7, #8
 8001222:	2364      	movs	r3, #100	@ 0x64
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <log_printf+0x44>)
 8001226:	f002 f95f 	bl	80034e8 <HAL_UART_Transmit>
}
 800122a:	bf00      	nop
 800122c:	3730      	adds	r7, #48	@ 0x30
 800122e:	46bd      	mov	sp, r7
 8001230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001234:	b004      	add	sp, #16
 8001236:	4770      	bx	lr
 8001238:	20000158 	.word	0x20000158

0800123c <uart1_put_ch>:
}

/*********************************************************************
 * Send and receive one character to the UART and othet
 *********************************************************************/
 void uart1_put_ch(char ch) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001246:	1df9      	adds	r1, r7, #7
 8001248:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800124c:	2201      	movs	r2, #1
 800124e:	4803      	ldr	r0, [pc, #12]	@ (800125c <uart1_put_ch+0x20>)
 8001250:	f002 f94a 	bl	80034e8 <HAL_UART_Transmit>
	 }
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000110 	.word	0x20000110

08001260 <HAL_UART_RxCpltCallback>:

 /*********************************************************************
 * Receive for processing commands to the UART by interrupt
 *********************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
      if (huart->Instance == USART1) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a28      	ldr	r2, [pc, #160]	@ (8001310 <HAL_UART_RxCpltCallback+0xb0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d149      	bne.n	8001306 <HAL_UART_RxCpltCallback+0xa6>
        uint8_t ch = uart1_rx_buf[uart1_rx_head];
 8001272:	4b28      	ldr	r3, [pc, #160]	@ (8001314 <HAL_UART_RxCpltCallback+0xb4>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <HAL_UART_RxCpltCallback+0xb8>)
 800127c:	5c9b      	ldrb	r3, [r3, r2]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	73bb      	strb	r3, [r7, #14]
        uint8_t next_head = (uart1_rx_head + 1) % UART_BUF_SIZE;
 8001282:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <HAL_UART_RxCpltCallback+0xb4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	3301      	adds	r3, #1
 800128a:	425a      	negs	r2, r3
 800128c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001290:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001294:	bf58      	it	pl
 8001296:	4253      	negpl	r3, r2
 8001298:	73fb      	strb	r3, [r7, #15]

        if (next_head != uart1_rx_tail) {
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <HAL_UART_RxCpltCallback+0xbc>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d003      	beq.n	80012ae <HAL_UART_RxCpltCallback+0x4e>
        	//uart1_rx_buf[uart1_rx_head] = ch;
            uart1_rx_head = next_head;
 80012a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <HAL_UART_RxCpltCallback+0xb4>)
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	7013      	strb	r3, [r2, #0]
 80012ac:	e005      	b.n	80012ba <HAL_UART_RxCpltCallback+0x5a>
        }
        else {
            //printf("BUFFER OVERFLOW! HEAD: %d, TAIL: %d\n", uart1_rx_head, uart1_rx_tail);
       	    uart1_rx_head = 0;
 80012ae:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_UART_RxCpltCallback+0xb4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
       	    uart1_rx_tail = 0;
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_UART_RxCpltCallback+0xbc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
        }

        // Отправляем байт в очередь FreeRTOS
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
        //xQueueSendFromISR(uartQueue, &ch, &xHigherPriorityTaskWoken);
        xQueueSendFromISR(uartQueue, (const void *)&ch, &xHigherPriorityTaskWoken);
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_UART_RxCpltCallback+0xc0>)
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	f107 0208 	add.w	r2, r7, #8
 80012c6:	f107 010e 	add.w	r1, r7, #14
 80012ca:	2300      	movs	r3, #0
 80012cc:	f003 fd7e 	bl	8004dcc <xQueueGenericSendFromISR>

        // Update the time of the last received byte
        last_rx_time = xTaskGetTickCountFromISR();
 80012d0:	f004 fbaa 	bl	8005a28 <xTaskGetTickCountFromISR>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a13      	ldr	r2, [pc, #76]	@ (8001324 <HAL_UART_RxCpltCallback+0xc4>)
 80012d8:	6013      	str	r3, [r2, #0]
        //uart1_put_ch(uart1_rx_head);

        // Перезапускаем приём
        HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart1_rx_buf[uart1_rx_head], 1);
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <HAL_UART_RxCpltCallback+0xb4>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <HAL_UART_RxCpltCallback+0xb8>)
 80012e4:	4413      	add	r3, r2
 80012e6:	2201      	movs	r2, #1
 80012e8:	4619      	mov	r1, r3
 80012ea:	480f      	ldr	r0, [pc, #60]	@ (8001328 <HAL_UART_RxCpltCallback+0xc8>)
 80012ec:	f002 f987 	bl	80035fe <HAL_UART_Receive_IT>
        //HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart1_rx_buf[next_head], 1);

        // Переключение контекста, если нужно
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d007      	beq.n	8001306 <HAL_UART_RxCpltCallback+0xa6>
 80012f6:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <HAL_UART_RxCpltCallback+0xcc>)
 80012f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	f3bf 8f4f 	dsb	sy
 8001302:	f3bf 8f6f 	isb	sy
    }
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40011000 	.word	0x40011000
 8001314:	20000270 	.word	0x20000270
 8001318:	200001f0 	.word	0x200001f0
 800131c:	20000271 	.word	0x20000271
 8001320:	200000ac 	.word	0x200000ac
 8001324:	2000007c 	.word	0x2000007c
 8001328:	20000110 	.word	0x20000110
 800132c:	e000ed04 	.word	0xe000ed04

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001368 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001334:	f7ff ff4c 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	@ (8001370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	@ (800137c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f005 ffc9 	bl	80072f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff fb71 	bl	8000a48 <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001374:	08007d8c 	.word	0x08007d8c
  ldr r2, =_sbss
 8001378:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800137c:	20005a68 	.word	0x20005a68

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <HAL_Init+0x40>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <HAL_Init+0x40>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800139e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	@ (80013c4 <HAL_Init+0x40>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f8fc 	bl	80015aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	200f      	movs	r0, #15
 80013b4:	f7ff fe34 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fd38 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000274 	.word	0x20000274

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000274 	.word	0x20000274

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db0b      	blt.n	80014de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 021f 	and.w	r2, r3, #31
 80014cc:	4907      	ldr	r1, [pc, #28]	@ (80014ec <__NVIC_EnableIRQ+0x38>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f202 	lsl.w	r2, r0, r2
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	@ (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	@ (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	@ 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	@ 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ff4c 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d2:	f7ff ff61 	bl	8001498 <__NVIC_GetPriorityGrouping>
 80015d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	6978      	ldr	r0, [r7, #20]
 80015de:	f7ff ffb1 	bl	8001544 <NVIC_EncodePriority>
 80015e2:	4602      	mov	r2, r0
 80015e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff80 	bl	80014f0 <__NVIC_SetPriority>
}
 80015f0:	bf00      	nop
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff54 	bl	80014b4 <__NVIC_EnableIRQ>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001620:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001622:	f7ff fee5 	bl	80013f0 <HAL_GetTick>
 8001626:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d008      	beq.n	8001646 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2280      	movs	r2, #128	@ 0x80
 8001638:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e052      	b.n	80016ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0216 	bic.w	r2, r2, #22
 8001654:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001664:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <HAL_DMA_Abort+0x62>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0208 	bic.w	r2, r2, #8
 8001684:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0201 	bic.w	r2, r2, #1
 8001694:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001696:	e013      	b.n	80016c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001698:	f7ff feaa 	bl	80013f0 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d90c      	bls.n	80016c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2220      	movs	r2, #32
 80016aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2203      	movs	r2, #3
 80016b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e015      	b.n	80016ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1e4      	bne.n	8001698 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d2:	223f      	movs	r2, #63	@ 0x3f
 80016d4:	409a      	lsls	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d004      	beq.n	8001712 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2280      	movs	r2, #128	@ 0x80
 800170c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00c      	b.n	800172c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2205      	movs	r2, #5
 8001716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	@ 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	e159      	b.n	8001a08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001754:	2201      	movs	r2, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	429a      	cmp	r2, r3
 800176e:	f040 8148 	bne.w	8001a02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b01      	cmp	r3, #1
 800177c:	d005      	beq.n	800178a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001786:	2b02      	cmp	r3, #2
 8001788:	d130      	bne.n	80017ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c0:	2201      	movs	r2, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 0201 	and.w	r2, r3, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d017      	beq.n	8001828 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d123      	bne.n	800187c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3208      	adds	r2, #8
 800183c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	08da      	lsrs	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3208      	adds	r2, #8
 8001876:	69b9      	ldr	r1, [r7, #24]
 8001878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0203 	and.w	r2, r3, #3
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80a2 	beq.w	8001a02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b57      	ldr	r3, [pc, #348]	@ (8001a20 <HAL_GPIO_Init+0x2e8>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	4a56      	ldr	r2, [pc, #344]	@ (8001a20 <HAL_GPIO_Init+0x2e8>)
 80018c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ce:	4b54      	ldr	r3, [pc, #336]	@ (8001a20 <HAL_GPIO_Init+0x2e8>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018da:	4a52      	ldr	r2, [pc, #328]	@ (8001a24 <HAL_GPIO_Init+0x2ec>)
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3302      	adds	r3, #2
 80018e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	220f      	movs	r2, #15
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a49      	ldr	r2, [pc, #292]	@ (8001a28 <HAL_GPIO_Init+0x2f0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d019      	beq.n	800193a <HAL_GPIO_Init+0x202>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a48      	ldr	r2, [pc, #288]	@ (8001a2c <HAL_GPIO_Init+0x2f4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0x1fe>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a47      	ldr	r2, [pc, #284]	@ (8001a30 <HAL_GPIO_Init+0x2f8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00d      	beq.n	8001932 <HAL_GPIO_Init+0x1fa>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a46      	ldr	r2, [pc, #280]	@ (8001a34 <HAL_GPIO_Init+0x2fc>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x1f6>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a45      	ldr	r2, [pc, #276]	@ (8001a38 <HAL_GPIO_Init+0x300>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_GPIO_Init+0x1f2>
 8001926:	2304      	movs	r3, #4
 8001928:	e008      	b.n	800193c <HAL_GPIO_Init+0x204>
 800192a:	2307      	movs	r3, #7
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x204>
 800192e:	2303      	movs	r3, #3
 8001930:	e004      	b.n	800193c <HAL_GPIO_Init+0x204>
 8001932:	2302      	movs	r3, #2
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x204>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x204>
 800193a:	2300      	movs	r3, #0
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	f002 0203 	and.w	r2, r2, #3
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4093      	lsls	r3, r2
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800194c:	4935      	ldr	r1, [pc, #212]	@ (8001a24 <HAL_GPIO_Init+0x2ec>)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b38      	ldr	r3, [pc, #224]	@ (8001a3c <HAL_GPIO_Init+0x304>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197e:	4a2f      	ldr	r2, [pc, #188]	@ (8001a3c <HAL_GPIO_Init+0x304>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001984:	4b2d      	ldr	r3, [pc, #180]	@ (8001a3c <HAL_GPIO_Init+0x304>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a8:	4a24      	ldr	r2, [pc, #144]	@ (8001a3c <HAL_GPIO_Init+0x304>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ae:	4b23      	ldr	r3, [pc, #140]	@ (8001a3c <HAL_GPIO_Init+0x304>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a3c <HAL_GPIO_Init+0x304>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d8:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <HAL_GPIO_Init+0x304>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019fc:	4a0f      	ldr	r2, [pc, #60]	@ (8001a3c <HAL_GPIO_Init+0x304>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3301      	adds	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b0f      	cmp	r3, #15
 8001a0c:	f67f aea2 	bls.w	8001754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3724      	adds	r7, #36	@ 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40013800 	.word	0x40013800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40013c00 	.word	0x40013c00

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	041a      	lsls	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	619a      	str	r2, [r3, #24]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b085      	sub	sp, #20
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a84:	887a      	ldrh	r2, [r7, #2]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	041a      	lsls	r2, r3, #16
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	887b      	ldrh	r3, [r7, #2]
 8001a92:	400b      	ands	r3, r1
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	619a      	str	r2, [r3, #24]
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e267      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d075      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ac6:	4b88      	ldr	r3, [pc, #544]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d00c      	beq.n	8001aec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad2:	4b85      	ldr	r3, [pc, #532]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d112      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ade:	4b82      	ldr	r3, [pc, #520]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ae6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aea:	d10b      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	4b7e      	ldr	r3, [pc, #504]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d05b      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x108>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d157      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e242      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b0c:	d106      	bne.n	8001b1c <HAL_RCC_OscConfig+0x74>
 8001b0e:	4b76      	ldr	r3, [pc, #472]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a75      	ldr	r2, [pc, #468]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e01d      	b.n	8001b58 <HAL_RCC_OscConfig+0xb0>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x98>
 8001b26:	4b70      	ldr	r3, [pc, #448]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6f      	ldr	r2, [pc, #444]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a6c      	ldr	r2, [pc, #432]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0xb0>
 8001b40:	4b69      	ldr	r3, [pc, #420]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a68      	ldr	r2, [pc, #416]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b66      	ldr	r3, [pc, #408]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a65      	ldr	r2, [pc, #404]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fc46 	bl	80013f0 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff fc42 	bl	80013f0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	@ 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e207      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0xc0>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fc32 	bl	80013f0 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff fc2e 	bl	80013f0 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	@ 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e1f3      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	4b51      	ldr	r3, [pc, #324]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0xe8>
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d063      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bca:	4b47      	ldr	r3, [pc, #284]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d11c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd6:	4b44      	ldr	r3, [pc, #272]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d116      	bne.n	8001c10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	4b41      	ldr	r3, [pc, #260]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x152>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e1c7      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4937      	ldr	r1, [pc, #220]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	e03a      	b.n	8001c86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <HAL_RCC_OscConfig+0x244>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fbe7 	bl	80013f0 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff fbe3 	bl	80013f0 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1a8      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4925      	ldr	r1, [pc, #148]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5a:	4b24      	ldr	r3, [pc, #144]	@ (8001cec <HAL_RCC_OscConfig+0x244>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff fbc6 	bl	80013f0 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff fbc2 	bl	80013f0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e187      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d036      	beq.n	8001d00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d016      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_RCC_OscConfig+0x248>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fba6 	bl	80013f0 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fba2 	bl	80013f0 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e167      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x200>
 8001cc6:	e01b      	b.n	8001d00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <HAL_RCC_OscConfig+0x248>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7ff fb8f 	bl	80013f0 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd4:	e00e      	b.n	8001cf4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fb8b 	bl	80013f0 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d907      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e150      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	42470000 	.word	0x42470000
 8001cf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	4b88      	ldr	r3, [pc, #544]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1ea      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8097 	beq.w	8001e3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d12:	4b81      	ldr	r3, [pc, #516]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10f      	bne.n	8001d3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	4b7d      	ldr	r3, [pc, #500]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	4a7c      	ldr	r2, [pc, #496]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2e:	4b7a      	ldr	r3, [pc, #488]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b77      	ldr	r3, [pc, #476]	@ (8001f1c <HAL_RCC_OscConfig+0x474>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d118      	bne.n	8001d7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4a:	4b74      	ldr	r3, [pc, #464]	@ (8001f1c <HAL_RCC_OscConfig+0x474>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a73      	ldr	r2, [pc, #460]	@ (8001f1c <HAL_RCC_OscConfig+0x474>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d56:	f7ff fb4b 	bl	80013f0 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7ff fb47 	bl	80013f0 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e10c      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b6a      	ldr	r3, [pc, #424]	@ (8001f1c <HAL_RCC_OscConfig+0x474>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x2ea>
 8001d84:	4b64      	ldr	r3, [pc, #400]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d88:	4a63      	ldr	r2, [pc, #396]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d90:	e01c      	b.n	8001dcc <HAL_RCC_OscConfig+0x324>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x30c>
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9e:	4a5e      	ldr	r2, [pc, #376]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001daa:	4a5b      	ldr	r2, [pc, #364]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0x324>
 8001db4:	4b58      	ldr	r3, [pc, #352]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db8:	4a57      	ldr	r2, [pc, #348]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc0:	4b55      	ldr	r3, [pc, #340]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc4:	4a54      	ldr	r2, [pc, #336]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d015      	beq.n	8001e00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fb0c 	bl	80013f0 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fb08 	bl	80013f0 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e0cb      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	4b49      	ldr	r3, [pc, #292]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0ee      	beq.n	8001ddc <HAL_RCC_OscConfig+0x334>
 8001dfe:	e014      	b.n	8001e2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff faf6 	bl	80013f0 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff faf2 	bl	80013f0 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e0b5      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1ee      	bne.n	8001e08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	4a38      	ldr	r2, [pc, #224]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80a1 	beq.w	8001f88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e46:	4b34      	ldr	r3, [pc, #208]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d05c      	beq.n	8001f0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d141      	bne.n	8001ede <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b31      	ldr	r3, [pc, #196]	@ (8001f20 <HAL_RCC_OscConfig+0x478>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fac6 	bl	80013f0 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff fac2 	bl	80013f0 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e087      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	4b27      	ldr	r3, [pc, #156]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	491b      	ldr	r1, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <HAL_RCC_OscConfig+0x478>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fa9b 	bl	80013f0 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff fa97 	bl	80013f0 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e05c      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed0:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x416>
 8001edc:	e054      	b.n	8001f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <HAL_RCC_OscConfig+0x478>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fa84 	bl	80013f0 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff fa80 	bl	80013f0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e045      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x444>
 8001f0a:	e03d      	b.n	8001f88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e038      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f24:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <HAL_RCC_OscConfig+0x4ec>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d028      	beq.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d121      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d11a      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d111      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800

08001f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0cc      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b68      	ldr	r3, [pc, #416]	@ (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d90c      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b65      	ldr	r3, [pc, #404]	@ (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b63      	ldr	r3, [pc, #396]	@ (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b8      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fec:	4b59      	ldr	r3, [pc, #356]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a58      	ldr	r2, [pc, #352]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ff6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002004:	4b53      	ldr	r3, [pc, #332]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a52      	ldr	r2, [pc, #328]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800200e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b50      	ldr	r3, [pc, #320]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	494d      	ldr	r1, [pc, #308]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d044      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b47      	ldr	r3, [pc, #284]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d119      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e07f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d003      	beq.n	8002056 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002052:	2b03      	cmp	r3, #3
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002056:	4b3f      	ldr	r3, [pc, #252]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	4b3b      	ldr	r3, [pc, #236]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e067      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b37      	ldr	r3, [pc, #220]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4934      	ldr	r1, [pc, #208]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002088:	f7ff f9b2 	bl	80013f0 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7ff f9ae 	bl	80013f0 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e04f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b8:	4b25      	ldr	r3, [pc, #148]	@ (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d20c      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b22      	ldr	r3, [pc, #136]	@ (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e032      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ec:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4916      	ldr	r1, [pc, #88]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800210a:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	490e      	ldr	r1, [pc, #56]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800211e:	f000 f821 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8002122:	4602      	mov	r2, r0
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	490a      	ldr	r1, [pc, #40]	@ (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	5ccb      	ldrb	r3, [r1, r3]
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	4a09      	ldr	r2, [pc, #36]	@ (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe ff6e 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00
 8002154:	40023800 	.word	0x40023800
 8002158:	08007d30 	.word	0x08007d30
 800215c:	20000000 	.word	0x20000000
 8002160:	20000004 	.word	0x20000004

08002164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002168:	b090      	sub	sp, #64	@ 0x40
 800216a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800217c:	4b59      	ldr	r3, [pc, #356]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b08      	cmp	r3, #8
 8002186:	d00d      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002188:	2b08      	cmp	r3, #8
 800218a:	f200 80a1 	bhi.w	80022d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x34>
 8002192:	2b04      	cmp	r3, #4
 8002194:	d003      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x3a>
 8002196:	e09b      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002198:	4b53      	ldr	r3, [pc, #332]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800219a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800219c:	e09b      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800219e:	4b53      	ldr	r3, [pc, #332]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x188>)
 80021a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021a2:	e098      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a4:	4b4f      	ldr	r3, [pc, #316]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ae:	4b4d      	ldr	r3, [pc, #308]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d028      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ba:	4b4a      	ldr	r3, [pc, #296]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	2200      	movs	r2, #0
 80021c2:	623b      	str	r3, [r7, #32]
 80021c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021cc:	2100      	movs	r1, #0
 80021ce:	4b47      	ldr	r3, [pc, #284]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x188>)
 80021d0:	fb03 f201 	mul.w	r2, r3, r1
 80021d4:	2300      	movs	r3, #0
 80021d6:	fb00 f303 	mul.w	r3, r0, r3
 80021da:	4413      	add	r3, r2
 80021dc:	4a43      	ldr	r2, [pc, #268]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x188>)
 80021de:	fba0 1202 	umull	r1, r2, r0, r2
 80021e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021e4:	460a      	mov	r2, r1
 80021e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80021e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021ea:	4413      	add	r3, r2
 80021ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f0:	2200      	movs	r2, #0
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	61fa      	str	r2, [r7, #28]
 80021f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80021fe:	f7fe f847 	bl	8000290 <__aeabi_uldivmod>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4613      	mov	r3, r2
 8002208:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800220a:	e053      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220c:	4b35      	ldr	r3, [pc, #212]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	2200      	movs	r2, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	617a      	str	r2, [r7, #20]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800221e:	f04f 0b00 	mov.w	fp, #0
 8002222:	4652      	mov	r2, sl
 8002224:	465b      	mov	r3, fp
 8002226:	f04f 0000 	mov.w	r0, #0
 800222a:	f04f 0100 	mov.w	r1, #0
 800222e:	0159      	lsls	r1, r3, #5
 8002230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002234:	0150      	lsls	r0, r2, #5
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	ebb2 080a 	subs.w	r8, r2, sl
 800223e:	eb63 090b 	sbc.w	r9, r3, fp
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800224e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002252:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002256:	ebb2 0408 	subs.w	r4, r2, r8
 800225a:	eb63 0509 	sbc.w	r5, r3, r9
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	00eb      	lsls	r3, r5, #3
 8002268:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800226c:	00e2      	lsls	r2, r4, #3
 800226e:	4614      	mov	r4, r2
 8002270:	461d      	mov	r5, r3
 8002272:	eb14 030a 	adds.w	r3, r4, sl
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	eb45 030b 	adc.w	r3, r5, fp
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800228a:	4629      	mov	r1, r5
 800228c:	028b      	lsls	r3, r1, #10
 800228e:	4621      	mov	r1, r4
 8002290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002294:	4621      	mov	r1, r4
 8002296:	028a      	lsls	r2, r1, #10
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229e:	2200      	movs	r2, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	60fa      	str	r2, [r7, #12]
 80022a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022a8:	f7fd fff2 	bl	8000290 <__aeabi_uldivmod>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4613      	mov	r3, r2
 80022b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022b4:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	3301      	adds	r3, #1
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80022c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022ce:	e002      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80022d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3740      	adds	r7, #64	@ 0x40
 80022dc:	46bd      	mov	sp, r7
 80022de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	00f42400 	.word	0x00f42400
 80022ec:	017d7840 	.word	0x017d7840

080022f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f4:	4b03      	ldr	r3, [pc, #12]	@ (8002304 <HAL_RCC_GetHCLKFreq+0x14>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000000 	.word	0x20000000

08002308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800230c:	f7ff fff0 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8002310:	4602      	mov	r2, r0
 8002312:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	0a9b      	lsrs	r3, r3, #10
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	4903      	ldr	r1, [pc, #12]	@ (800232c <HAL_RCC_GetPCLK1Freq+0x24>)
 800231e:	5ccb      	ldrb	r3, [r1, r3]
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40023800 	.word	0x40023800
 800232c:	08007d40 	.word	0x08007d40

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002334:	f7ff ffdc 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	0b5b      	lsrs	r3, r3, #13
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4903      	ldr	r1, [pc, #12]	@ (8002354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40023800 	.word	0x40023800
 8002354:	08007d40 	.word	0x08007d40

08002358 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	220f      	movs	r2, #15
 8002366:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002368:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_RCC_GetClockConfig+0x5c>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0203 	and.w	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002374:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002380:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800238c:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <HAL_RCC_GetClockConfig+0x5c>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800239a:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <HAL_RCC_GetClockConfig+0x60>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0207 	and.w	r2, r3, #7
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	601a      	str	r2, [r3, #0]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40023c00 	.word	0x40023c00

080023bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e07b      	b.n	80024c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d108      	bne.n	80023e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023de:	d009      	beq.n	80023f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
 80023e6:	e005      	b.n	80023f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fd38 	bl	8000e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800242a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002478:	ea42 0103 	orr.w	r1, r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	f003 0104 	and.w	r1, r3, #4
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	f003 0210 	and.w	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69da      	ldr	r2, [r3, #28]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b088      	sub	sp, #32
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024de:	f7fe ff87 	bl	80013f0 <HAL_GetTick>
 80024e2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d001      	beq.n	80024f8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
 80024f6:	e12a      	b.n	800274e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_SPI_Transmit+0x36>
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e122      	b.n	800274e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_SPI_Transmit+0x48>
 8002512:	2302      	movs	r3, #2
 8002514:	e11b      	b.n	800274e <HAL_SPI_Transmit+0x280>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2203      	movs	r2, #3
 8002522:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	88fa      	ldrh	r2, [r7, #6]
 800253c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002564:	d10f      	bne.n	8002586 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002574:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002584:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	d007      	beq.n	80025a4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025ac:	d152      	bne.n	8002654 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_SPI_Transmit+0xee>
 80025b6:	8b7b      	ldrh	r3, [r7, #26]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d145      	bne.n	8002648 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	881a      	ldrh	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	1c9a      	adds	r2, r3, #2
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025e0:	e032      	b.n	8002648 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d112      	bne.n	8002616 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	1c9a      	adds	r2, r3, #2
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002614:	e018      	b.n	8002648 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002616:	f7fe feeb 	bl	80013f0 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d803      	bhi.n	800262e <HAL_SPI_Transmit+0x160>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800262c:	d102      	bne.n	8002634 <HAL_SPI_Transmit+0x166>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e082      	b.n	800274e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1c7      	bne.n	80025e2 <HAL_SPI_Transmit+0x114>
 8002652:	e053      	b.n	80026fc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_SPI_Transmit+0x194>
 800265c:	8b7b      	ldrh	r3, [r7, #26]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d147      	bne.n	80026f2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	330c      	adds	r3, #12
 800266c:	7812      	ldrb	r2, [r2, #0]
 800266e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002688:	e033      	b.n	80026f2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b02      	cmp	r3, #2
 8002696:	d113      	bne.n	80026c0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	330c      	adds	r3, #12
 80026a2:	7812      	ldrb	r2, [r2, #0]
 80026a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80026be:	e018      	b.n	80026f2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026c0:	f7fe fe96 	bl	80013f0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d803      	bhi.n	80026d8 <HAL_SPI_Transmit+0x20a>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026d6:	d102      	bne.n	80026de <HAL_SPI_Transmit+0x210>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e02d      	b.n	800274e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1c6      	bne.n	800268a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	6839      	ldr	r1, [r7, #0]
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fbd9 	bl	8002eb8 <SPI_EndRxTxTransaction>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10a      	bne.n	8002730 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800274c:	2300      	movs	r3, #0
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b088      	sub	sp, #32
 800275a:	af02      	add	r7, sp, #8
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d001      	beq.n	8002776 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
 8002774:	e104      	b.n	8002980 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800277e:	d112      	bne.n	80027a6 <HAL_SPI_Receive+0x50>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10e      	bne.n	80027a6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2204      	movs	r2, #4
 800278c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002790:	88fa      	ldrh	r2, [r7, #6]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4613      	mov	r3, r2
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f8f3 	bl	8002988 <HAL_SPI_TransmitReceive>
 80027a2:	4603      	mov	r3, r0
 80027a4:	e0ec      	b.n	8002980 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027a6:	f7fe fe23 	bl	80013f0 <HAL_GetTick>
 80027aa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_SPI_Receive+0x62>
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0e1      	b.n	8002980 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_SPI_Receive+0x74>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e0da      	b.n	8002980 <HAL_SPI_Receive+0x22a>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2204      	movs	r2, #4
 80027d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	88fa      	ldrh	r2, [r7, #6]
 80027ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	88fa      	ldrh	r2, [r7, #6]
 80027f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002818:	d10f      	bne.n	800283a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002828:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002844:	2b40      	cmp	r3, #64	@ 0x40
 8002846:	d007      	beq.n	8002858 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002856:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d170      	bne.n	8002942 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002860:	e035      	b.n	80028ce <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d115      	bne.n	800289c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f103 020c 	add.w	r2, r3, #12
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800289a:	e018      	b.n	80028ce <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800289c:	f7fe fda8 	bl	80013f0 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d803      	bhi.n	80028b4 <HAL_SPI_Receive+0x15e>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028b2:	d102      	bne.n	80028ba <HAL_SPI_Receive+0x164>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e058      	b.n	8002980 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1c4      	bne.n	8002862 <HAL_SPI_Receive+0x10c>
 80028d8:	e038      	b.n	800294c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d113      	bne.n	8002910 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f2:	b292      	uxth	r2, r2
 80028f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fa:	1c9a      	adds	r2, r3, #2
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800290e:	e018      	b.n	8002942 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002910:	f7fe fd6e 	bl	80013f0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d803      	bhi.n	8002928 <HAL_SPI_Receive+0x1d2>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002926:	d102      	bne.n	800292e <HAL_SPI_Receive+0x1d8>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e01e      	b.n	8002980 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1c6      	bne.n	80028da <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	6839      	ldr	r1, [r7, #0]
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fa4b 	bl	8002dec <SPI_EndRxTransaction>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800297e:	2300      	movs	r3, #0
  }
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	@ 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002996:	2301      	movs	r3, #1
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800299a:	f7fe fd29 	bl	80013f0 <HAL_GetTick>
 800299e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029a6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029b2:	7ffb      	ldrb	r3, [r7, #31]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d00c      	beq.n	80029d2 <HAL_SPI_TransmitReceive+0x4a>
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029be:	d106      	bne.n	80029ce <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <HAL_SPI_TransmitReceive+0x46>
 80029c8:	7ffb      	ldrb	r3, [r7, #31]
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d001      	beq.n	80029d2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80029ce:	2302      	movs	r3, #2
 80029d0:	e17f      	b.n	8002cd2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_SPI_TransmitReceive+0x5c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_SPI_TransmitReceive+0x5c>
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e174      	b.n	8002cd2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_SPI_TransmitReceive+0x6e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e16d      	b.n	8002cd2 <HAL_SPI_TransmitReceive+0x34a>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d003      	beq.n	8002a12 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2205      	movs	r2, #5
 8002a0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	887a      	ldrh	r2, [r7, #2]
 8002a22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	887a      	ldrh	r2, [r7, #2]
 8002a3a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a52:	2b40      	cmp	r3, #64	@ 0x40
 8002a54:	d007      	beq.n	8002a66 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a6e:	d17e      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0xf6>
 8002a78:	8afb      	ldrh	r3, [r7, #22]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d16c      	bne.n	8002b58 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	881a      	ldrh	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	1c9a      	adds	r2, r3, #2
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aa2:	e059      	b.n	8002b58 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d11b      	bne.n	8002aea <HAL_SPI_TransmitReceive+0x162>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d016      	beq.n	8002aea <HAL_SPI_TransmitReceive+0x162>
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d113      	bne.n	8002aea <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	881a      	ldrh	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	1c9a      	adds	r2, r3, #2
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d119      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x1a4>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d014      	beq.n	8002b2c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0c:	b292      	uxth	r2, r2
 8002b0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b14:	1c9a      	adds	r2, r3, #2
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b2c:	f7fe fc60 	bl	80013f0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d80d      	bhi.n	8002b58 <HAL_SPI_TransmitReceive+0x1d0>
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b42:	d009      	beq.n	8002b58 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0bc      	b.n	8002cd2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1a0      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x11c>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d19b      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x11c>
 8002b6c:	e082      	b.n	8002c74 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_SPI_TransmitReceive+0x1f4>
 8002b76:	8afb      	ldrh	r3, [r7, #22]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d171      	bne.n	8002c60 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	330c      	adds	r3, #12
 8002b86:	7812      	ldrb	r2, [r2, #0]
 8002b88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ba2:	e05d      	b.n	8002c60 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d11c      	bne.n	8002bec <HAL_SPI_TransmitReceive+0x264>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d017      	beq.n	8002bec <HAL_SPI_TransmitReceive+0x264>
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d114      	bne.n	8002bec <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	330c      	adds	r3, #12
 8002bcc:	7812      	ldrb	r2, [r2, #0]
 8002bce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d119      	bne.n	8002c2e <HAL_SPI_TransmitReceive+0x2a6>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d014      	beq.n	8002c2e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c2e:	f7fe fbdf 	bl	80013f0 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d803      	bhi.n	8002c46 <HAL_SPI_TransmitReceive+0x2be>
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c44:	d102      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x2c4>
 8002c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e038      	b.n	8002cd2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d19c      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x21c>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d197      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f91d 	bl	8002eb8 <SPI_EndRxTxTransaction>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e01d      	b.n	8002cd2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
  }
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3728      	adds	r7, #40	@ 0x28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cec:	f7fe fb80 	bl	80013f0 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cfc:	f7fe fb78 	bl	80013f0 <HAL_GetTick>
 8002d00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d02:	4b39      	ldr	r3, [pc, #228]	@ (8002de8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	015b      	lsls	r3, r3, #5
 8002d08:	0d1b      	lsrs	r3, r3, #20
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d12:	e054      	b.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d1a:	d050      	beq.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d1c:	f7fe fb68 	bl	80013f0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d902      	bls.n	8002d32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d13d      	bne.n	8002dae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d4a:	d111      	bne.n	8002d70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d54:	d004      	beq.n	8002d60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d5e:	d107      	bne.n	8002d70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d78:	d10f      	bne.n	8002d9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e017      	b.n	8002dde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d19b      	bne.n	8002d14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000000 	.word	0x20000000

08002dec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e00:	d111      	bne.n	8002e26 <SPI_EndRxTransaction+0x3a>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e0a:	d004      	beq.n	8002e16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e14:	d107      	bne.n	8002e26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e2e:	d12a      	bne.n	8002e86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e38:	d012      	beq.n	8002e60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2180      	movs	r1, #128	@ 0x80
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff ff49 	bl	8002cdc <SPI_WaitFlagStateUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d02d      	beq.n	8002eac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e026      	b.n	8002eae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	2101      	movs	r1, #1
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff ff36 	bl	8002cdc <SPI_WaitFlagStateUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01a      	beq.n	8002eac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7a:	f043 0220 	orr.w	r2, r3, #32
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e013      	b.n	8002eae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2101      	movs	r1, #1
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7ff ff23 	bl	8002cdc <SPI_WaitFlagStateUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea0:	f043 0220 	orr.w	r2, r3, #32
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e000      	b.n	8002eae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	2102      	movs	r1, #2
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff ff04 	bl	8002cdc <SPI_WaitFlagStateUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e032      	b.n	8002f50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002eea:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <SPI_EndRxTxTransaction+0xa0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1b      	ldr	r2, [pc, #108]	@ (8002f5c <SPI_EndRxTxTransaction+0xa4>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	0d5b      	lsrs	r3, r3, #21
 8002ef6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002efa:	fb02 f303 	mul.w	r3, r2, r3
 8002efe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f08:	d112      	bne.n	8002f30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2180      	movs	r1, #128	@ 0x80
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fee1 	bl	8002cdc <SPI_WaitFlagStateUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d016      	beq.n	8002f4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e00f      	b.n	8002f50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	d0f2      	beq.n	8002f30 <SPI_EndRxTxTransaction+0x78>
 8002f4a:	e000      	b.n	8002f4e <SPI_EndRxTxTransaction+0x96>
        break;
 8002f4c:	bf00      	nop
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	165e9f81 	.word	0x165e9f81

08002f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e041      	b.n	8002ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f839 	bl	8002ffe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	f000 f9b2 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d001      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e044      	b.n	80030b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1e      	ldr	r2, [pc, #120]	@ (80030c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d018      	beq.n	8003080 <HAL_TIM_Base_Start_IT+0x6c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003056:	d013      	beq.n	8003080 <HAL_TIM_Base_Start_IT+0x6c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1a      	ldr	r2, [pc, #104]	@ (80030c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00e      	beq.n	8003080 <HAL_TIM_Base_Start_IT+0x6c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a19      	ldr	r2, [pc, #100]	@ (80030cc <HAL_TIM_Base_Start_IT+0xb8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d009      	beq.n	8003080 <HAL_TIM_Base_Start_IT+0x6c>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a17      	ldr	r2, [pc, #92]	@ (80030d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <HAL_TIM_Base_Start_IT+0x6c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a16      	ldr	r2, [pc, #88]	@ (80030d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d111      	bne.n	80030a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b06      	cmp	r3, #6
 8003090:	d010      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a2:	e007      	b.n	80030b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40010000 	.word	0x40010000
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40000c00 	.word	0x40000c00
 80030d4:	40014000 	.word	0x40014000

080030d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d020      	beq.n	800313c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01b      	beq.n	800313c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0202 	mvn.w	r2, #2
 800310c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f8d2 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8003128:	e005      	b.n	8003136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8c4 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f8d5 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d020      	beq.n	8003188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01b      	beq.n	8003188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0204 	mvn.w	r2, #4
 8003158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f8ac 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8003174:	e005      	b.n	8003182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f89e 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f8af 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d020      	beq.n	80031d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0208 	mvn.w	r2, #8
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2204      	movs	r2, #4
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f886 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f878 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f889 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d020      	beq.n	8003220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0210 	mvn.w	r2, #16
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2208      	movs	r2, #8
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f860 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f852 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f863 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0201 	mvn.w	r2, #1
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd fddc 	bl	8000dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8e6 	bl	8003434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00c      	beq.n	800328c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f834 	bl	80032f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00c      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0220 	mvn.w	r2, #32
 80032a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8b8 	bl	8003420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a3a      	ldr	r2, [pc, #232]	@ (8003404 <TIM_Base_SetConfig+0xfc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00f      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003326:	d00b      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a37      	ldr	r2, [pc, #220]	@ (8003408 <TIM_Base_SetConfig+0x100>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a36      	ldr	r2, [pc, #216]	@ (800340c <TIM_Base_SetConfig+0x104>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a35      	ldr	r2, [pc, #212]	@ (8003410 <TIM_Base_SetConfig+0x108>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d108      	bne.n	8003352 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2b      	ldr	r2, [pc, #172]	@ (8003404 <TIM_Base_SetConfig+0xfc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01b      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003360:	d017      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a28      	ldr	r2, [pc, #160]	@ (8003408 <TIM_Base_SetConfig+0x100>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a27      	ldr	r2, [pc, #156]	@ (800340c <TIM_Base_SetConfig+0x104>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00f      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a26      	ldr	r2, [pc, #152]	@ (8003410 <TIM_Base_SetConfig+0x108>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a25      	ldr	r2, [pc, #148]	@ (8003414 <TIM_Base_SetConfig+0x10c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a24      	ldr	r2, [pc, #144]	@ (8003418 <TIM_Base_SetConfig+0x110>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a23      	ldr	r2, [pc, #140]	@ (800341c <TIM_Base_SetConfig+0x114>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d108      	bne.n	80033a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003404 <TIM_Base_SetConfig+0xfc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d103      	bne.n	80033d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d105      	bne.n	80033f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f023 0201 	bic.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	611a      	str	r2, [r3, #16]
  }
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40010000 	.word	0x40010000
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800
 8003410:	40000c00 	.word	0x40000c00
 8003414:	40014000 	.word	0x40014000
 8003418:	40014400 	.word	0x40014400
 800341c:	40014800 	.word	0x40014800

08003420 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e042      	b.n	80034e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd fd50 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2224      	movs	r2, #36	@ 0x24
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800348a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fdbd 	bl	800400c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	@ 0x28
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b20      	cmp	r3, #32
 8003506:	d175      	bne.n	80035f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_UART_Transmit+0x2c>
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e06e      	b.n	80035f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2221      	movs	r2, #33	@ 0x21
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003526:	f7fd ff63 	bl	80013f0 <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003540:	d108      	bne.n	8003554 <HAL_UART_Transmit+0x6c>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	e003      	b.n	800355c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800355c:	e02e      	b.n	80035bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	@ 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fb1f 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e03a      	b.n	80035f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003594:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	3302      	adds	r3, #2
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	e007      	b.n	80035ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	3301      	adds	r3, #1
 80035ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1cb      	bne.n	800355e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2140      	movs	r1, #64	@ 0x40
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 faeb 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	4613      	mov	r3, r2
 800360a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b20      	cmp	r3, #32
 8003616:	d112      	bne.n	800363e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_UART_Receive_IT+0x26>
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e00b      	b.n	8003640 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	461a      	mov	r2, r3
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fb12 	bl	8003c5e <UART_Start_Receive_IT>
 800363a:	4603      	mov	r3, r0
 800363c:	e000      	b.n	8003640 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800363e:	2302      	movs	r3, #2
  }
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b0ba      	sub	sp, #232	@ 0xe8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800367a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_UART_IRQHandler+0x66>
 800369a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fbf2 	bl	8003e90 <UART_Receive_IT>
      return;
 80036ac:	e25b      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80de 	beq.w	8003874 <HAL_UART_IRQHandler+0x22c>
 80036b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d106      	bne.n	80036d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80d1 	beq.w	8003874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_UART_IRQHandler+0xae>
 80036de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_UART_IRQHandler+0xd2>
 8003702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	f043 0202 	orr.w	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800371a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <HAL_UART_IRQHandler+0xf6>
 8003726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	f043 0204 	orr.w	r2, r3, #4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d011      	beq.n	800376e <HAL_UART_IRQHandler+0x126>
 800374a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	f043 0208 	orr.w	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 81f2 	beq.w	8003b5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_UART_IRQHandler+0x14e>
 8003784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fb7d 	bl	8003e90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a0:	2b40      	cmp	r3, #64	@ 0x40
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <HAL_UART_IRQHandler+0x17a>
 80037ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d04f      	beq.n	8003862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa85 	bl	8003cd2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b40      	cmp	r3, #64	@ 0x40
 80037d4:	d141      	bne.n	800385a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3314      	adds	r3, #20
 80037dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003802:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800380e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800381a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1d9      	bne.n	80037d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d013      	beq.n	8003852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a28 <HAL_UART_IRQHandler+0x3e0>)
 8003830:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd ff5c 	bl	80016f4 <HAL_DMA_Abort_IT>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d016      	beq.n	8003870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800384c:	4610      	mov	r0, r2
 800384e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e00e      	b.n	8003870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f994 	bl	8003b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e00a      	b.n	8003870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f990 	bl	8003b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	e006      	b.n	8003870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f98c 	bl	8003b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800386e:	e175      	b.n	8003b5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	bf00      	nop
    return;
 8003872:	e173      	b.n	8003b5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	2b01      	cmp	r3, #1
 800387a:	f040 814f 	bne.w	8003b1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800387e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8148 	beq.w	8003b1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8141 	beq.w	8003b1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	f040 80b6 	bne.w	8003a2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8145 	beq.w	8003b60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038de:	429a      	cmp	r2, r3
 80038e0:	f080 813e 	bcs.w	8003b60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038f6:	f000 8088 	beq.w	8003a0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003910:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003926:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800392a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003932:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800393e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1d9      	bne.n	80038fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3314      	adds	r3, #20
 800394c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3314      	adds	r3, #20
 8003966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800396a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800396e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003972:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800397c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e1      	bne.n	8003946 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3314      	adds	r3, #20
 8003988:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3314      	adds	r3, #20
 80039a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e3      	bne.n	8003982 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	330c      	adds	r3, #12
 80039ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039da:	f023 0310 	bic.w	r3, r3, #16
 80039de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039f4:	e841 2300 	strex	r3, r2, [r1]
 80039f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e3      	bne.n	80039c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fd fe05 	bl	8001614 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f8b7 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a26:	e09b      	b.n	8003b60 <HAL_UART_IRQHandler+0x518>
 8003a28:	08003d99 	.word	0x08003d99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 808e 	beq.w	8003b64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8089 	beq.w	8003b64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a76:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e3      	bne.n	8003a52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	623b      	str	r3, [r7, #32]
   return(result);
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3314      	adds	r3, #20
 8003aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003aae:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e3      	bne.n	8003a8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0310 	bic.w	r3, r3, #16
 8003ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003af4:	61fa      	str	r2, [r7, #28]
 8003af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	69b9      	ldr	r1, [r7, #24]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	617b      	str	r3, [r7, #20]
   return(result);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e3      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f83d 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b1a:	e023      	b.n	8003b64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <HAL_UART_IRQHandler+0x4f4>
 8003b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f943 	bl	8003dc0 <UART_Transmit_IT>
    return;
 8003b3a:	e014      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00e      	beq.n	8003b66 <HAL_UART_IRQHandler+0x51e>
 8003b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f983 	bl	8003e60 <UART_EndTransmit_IT>
    return;
 8003b5a:	e004      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b5c:	bf00      	nop
 8003b5e:	e002      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b60:	bf00      	nop
 8003b62:	e000      	b.n	8003b66 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b64:	bf00      	nop
  }
}
 8003b66:	37e8      	adds	r7, #232	@ 0xe8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbc:	e03b      	b.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bc4:	d037      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc6:	f7fd fc13 	bl	80013f0 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	6a3a      	ldr	r2, [r7, #32]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e03a      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d023      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b80      	cmp	r3, #128	@ 0x80
 8003bf2:	d020      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b40      	cmp	r3, #64	@ 0x40
 8003bf8:	d01d      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d116      	bne.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f857 	bl	8003cd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2208      	movs	r2, #8
 8003c28:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e00f      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d0b4      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2222      	movs	r2, #34	@ 0x22
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ca2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0220 	orr.w	r2, r2, #32
 8003cc2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b095      	sub	sp, #84	@ 0x54
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cfa:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e5      	bne.n	8003cda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3314      	adds	r3, #20
 8003d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e5      	bne.n	8003d0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d119      	bne.n	8003d7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f023 0310 	bic.w	r3, r3, #16
 8003d60:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	330c      	adds	r3, #12
 8003d68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d6a:	61ba      	str	r2, [r7, #24]
 8003d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6979      	ldr	r1, [r7, #20]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	613b      	str	r3, [r7, #16]
   return(result);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e5      	bne.n	8003d4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d8c:	bf00      	nop
 8003d8e:	3754      	adds	r7, #84	@ 0x54
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f7ff fee4 	bl	8003b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b21      	cmp	r3, #33	@ 0x21
 8003dd2:	d13e      	bne.n	8003e52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ddc:	d114      	bne.n	8003e08 <UART_Transmit_IT+0x48>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d110      	bne.n	8003e08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dfa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	1c9a      	adds	r2, r3, #2
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	621a      	str	r2, [r3, #32]
 8003e06:	e008      	b.n	8003e1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	1c59      	adds	r1, r3, #1
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6211      	str	r1, [r2, #32]
 8003e12:	781a      	ldrb	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	4619      	mov	r1, r3
 8003e28:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fe73 	bl	8003b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08c      	sub	sp, #48	@ 0x30
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b22      	cmp	r3, #34	@ 0x22
 8003ea2:	f040 80ae 	bne.w	8004002 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eae:	d117      	bne.n	8003ee0 <UART_Receive_IT+0x50>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d113      	bne.n	8003ee0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed8:	1c9a      	adds	r2, r3, #2
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ede:	e026      	b.n	8003f2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef2:	d007      	beq.n	8003f04 <UART_Receive_IT+0x74>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <UART_Receive_IT+0x82>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0e:	701a      	strb	r2, [r3, #0]
 8003f10:	e008      	b.n	8003f24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d15d      	bne.n	8003ffe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0220 	bic.w	r2, r2, #32
 8003f50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d135      	bne.n	8003ff4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f023 0310 	bic.w	r3, r3, #16
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fae:	623a      	str	r2, [r7, #32]
 8003fb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	69f9      	ldr	r1, [r7, #28]
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1e5      	bne.n	8003f8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d10a      	bne.n	8003fe6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fea:	4619      	mov	r1, r3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff fdd1 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
 8003ff2:	e002      	b.n	8003ffa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7fd f933 	bl	8001260 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e002      	b.n	8004004 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3730      	adds	r7, #48	@ 0x30
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800400c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004010:	b0c0      	sub	sp, #256	@ 0x100
 8004012:	af00      	add	r7, sp, #0
 8004014:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	68d9      	ldr	r1, [r3, #12]
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	ea40 0301 	orr.w	r3, r0, r1
 8004034:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	431a      	orrs	r2, r3
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	431a      	orrs	r2, r3
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004064:	f021 010c 	bic.w	r1, r1, #12
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004072:	430b      	orrs	r3, r1
 8004074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004086:	6999      	ldr	r1, [r3, #24]
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	ea40 0301 	orr.w	r3, r0, r1
 8004092:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4b8f      	ldr	r3, [pc, #572]	@ (80042d8 <UART_SetConfig+0x2cc>)
 800409c:	429a      	cmp	r2, r3
 800409e:	d005      	beq.n	80040ac <UART_SetConfig+0xa0>
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b8d      	ldr	r3, [pc, #564]	@ (80042dc <UART_SetConfig+0x2d0>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d104      	bne.n	80040b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040ac:	f7fe f940 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 80040b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040b4:	e003      	b.n	80040be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040b6:	f7fe f927 	bl	8002308 <HAL_RCC_GetPCLK1Freq>
 80040ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c8:	f040 810c 	bne.w	80042e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040de:	4622      	mov	r2, r4
 80040e0:	462b      	mov	r3, r5
 80040e2:	1891      	adds	r1, r2, r2
 80040e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040e6:	415b      	adcs	r3, r3
 80040e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040ee:	4621      	mov	r1, r4
 80040f0:	eb12 0801 	adds.w	r8, r2, r1
 80040f4:	4629      	mov	r1, r5
 80040f6:	eb43 0901 	adc.w	r9, r3, r1
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800410a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800410e:	4690      	mov	r8, r2
 8004110:	4699      	mov	r9, r3
 8004112:	4623      	mov	r3, r4
 8004114:	eb18 0303 	adds.w	r3, r8, r3
 8004118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800411c:	462b      	mov	r3, r5
 800411e:	eb49 0303 	adc.w	r3, r9, r3
 8004122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004132:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004136:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800413a:	460b      	mov	r3, r1
 800413c:	18db      	adds	r3, r3, r3
 800413e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004140:	4613      	mov	r3, r2
 8004142:	eb42 0303 	adc.w	r3, r2, r3
 8004146:	657b      	str	r3, [r7, #84]	@ 0x54
 8004148:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800414c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004150:	f7fc f89e 	bl	8000290 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4b61      	ldr	r3, [pc, #388]	@ (80042e0 <UART_SetConfig+0x2d4>)
 800415a:	fba3 2302 	umull	r2, r3, r3, r2
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	011c      	lsls	r4, r3, #4
 8004162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800416c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004170:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	1891      	adds	r1, r2, r2
 800417a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800417c:	415b      	adcs	r3, r3
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004180:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004184:	4641      	mov	r1, r8
 8004186:	eb12 0a01 	adds.w	sl, r2, r1
 800418a:	4649      	mov	r1, r9
 800418c:	eb43 0b01 	adc.w	fp, r3, r1
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800419c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041a4:	4692      	mov	sl, r2
 80041a6:	469b      	mov	fp, r3
 80041a8:	4643      	mov	r3, r8
 80041aa:	eb1a 0303 	adds.w	r3, sl, r3
 80041ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041b2:	464b      	mov	r3, r9
 80041b4:	eb4b 0303 	adc.w	r3, fp, r3
 80041b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041d0:	460b      	mov	r3, r1
 80041d2:	18db      	adds	r3, r3, r3
 80041d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d6:	4613      	mov	r3, r2
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041e6:	f7fc f853 	bl	8000290 <__aeabi_uldivmod>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	4b3b      	ldr	r3, [pc, #236]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80041f2:	fba3 2301 	umull	r2, r3, r3, r1
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2264      	movs	r2, #100	@ 0x64
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	1acb      	subs	r3, r1, r3
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004206:	4b36      	ldr	r3, [pc, #216]	@ (80042e0 <UART_SetConfig+0x2d4>)
 8004208:	fba3 2302 	umull	r2, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004214:	441c      	add	r4, r3
 8004216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800421a:	2200      	movs	r2, #0
 800421c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004220:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004224:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004228:	4642      	mov	r2, r8
 800422a:	464b      	mov	r3, r9
 800422c:	1891      	adds	r1, r2, r2
 800422e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004230:	415b      	adcs	r3, r3
 8004232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004234:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004238:	4641      	mov	r1, r8
 800423a:	1851      	adds	r1, r2, r1
 800423c:	6339      	str	r1, [r7, #48]	@ 0x30
 800423e:	4649      	mov	r1, r9
 8004240:	414b      	adcs	r3, r1
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004250:	4659      	mov	r1, fp
 8004252:	00cb      	lsls	r3, r1, #3
 8004254:	4651      	mov	r1, sl
 8004256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800425a:	4651      	mov	r1, sl
 800425c:	00ca      	lsls	r2, r1, #3
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	4603      	mov	r3, r0
 8004264:	4642      	mov	r2, r8
 8004266:	189b      	adds	r3, r3, r2
 8004268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800426c:	464b      	mov	r3, r9
 800426e:	460a      	mov	r2, r1
 8004270:	eb42 0303 	adc.w	r3, r2, r3
 8004274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004284:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004288:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800428c:	460b      	mov	r3, r1
 800428e:	18db      	adds	r3, r3, r3
 8004290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004292:	4613      	mov	r3, r2
 8004294:	eb42 0303 	adc.w	r3, r2, r3
 8004298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800429a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800429e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042a2:	f7fb fff5 	bl	8000290 <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4b0d      	ldr	r3, [pc, #52]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80042ac:	fba3 1302 	umull	r1, r3, r3, r2
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	2164      	movs	r1, #100	@ 0x64
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	3332      	adds	r3, #50	@ 0x32
 80042be:	4a08      	ldr	r2, [pc, #32]	@ (80042e0 <UART_SetConfig+0x2d4>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	f003 0207 	and.w	r2, r3, #7
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4422      	add	r2, r4
 80042d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042d4:	e106      	b.n	80044e4 <UART_SetConfig+0x4d8>
 80042d6:	bf00      	nop
 80042d8:	40011000 	.word	0x40011000
 80042dc:	40011400 	.word	0x40011400
 80042e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042f6:	4642      	mov	r2, r8
 80042f8:	464b      	mov	r3, r9
 80042fa:	1891      	adds	r1, r2, r2
 80042fc:	6239      	str	r1, [r7, #32]
 80042fe:	415b      	adcs	r3, r3
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
 8004302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004306:	4641      	mov	r1, r8
 8004308:	1854      	adds	r4, r2, r1
 800430a:	4649      	mov	r1, r9
 800430c:	eb43 0501 	adc.w	r5, r3, r1
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	00eb      	lsls	r3, r5, #3
 800431a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800431e:	00e2      	lsls	r2, r4, #3
 8004320:	4614      	mov	r4, r2
 8004322:	461d      	mov	r5, r3
 8004324:	4643      	mov	r3, r8
 8004326:	18e3      	adds	r3, r4, r3
 8004328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800432c:	464b      	mov	r3, r9
 800432e:	eb45 0303 	adc.w	r3, r5, r3
 8004332:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004342:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004352:	4629      	mov	r1, r5
 8004354:	008b      	lsls	r3, r1, #2
 8004356:	4621      	mov	r1, r4
 8004358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435c:	4621      	mov	r1, r4
 800435e:	008a      	lsls	r2, r1, #2
 8004360:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004364:	f7fb ff94 	bl	8000290 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4b60      	ldr	r3, [pc, #384]	@ (80044f0 <UART_SetConfig+0x4e4>)
 800436e:	fba3 2302 	umull	r2, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	011c      	lsls	r4, r3, #4
 8004376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004380:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004384:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004388:	4642      	mov	r2, r8
 800438a:	464b      	mov	r3, r9
 800438c:	1891      	adds	r1, r2, r2
 800438e:	61b9      	str	r1, [r7, #24]
 8004390:	415b      	adcs	r3, r3
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004398:	4641      	mov	r1, r8
 800439a:	1851      	adds	r1, r2, r1
 800439c:	6139      	str	r1, [r7, #16]
 800439e:	4649      	mov	r1, r9
 80043a0:	414b      	adcs	r3, r1
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043b0:	4659      	mov	r1, fp
 80043b2:	00cb      	lsls	r3, r1, #3
 80043b4:	4651      	mov	r1, sl
 80043b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ba:	4651      	mov	r1, sl
 80043bc:	00ca      	lsls	r2, r1, #3
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	4642      	mov	r2, r8
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043cc:	464b      	mov	r3, r9
 80043ce:	460a      	mov	r2, r1
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043f0:	4649      	mov	r1, r9
 80043f2:	008b      	lsls	r3, r1, #2
 80043f4:	4641      	mov	r1, r8
 80043f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043fa:	4641      	mov	r1, r8
 80043fc:	008a      	lsls	r2, r1, #2
 80043fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004402:	f7fb ff45 	bl	8000290 <__aeabi_uldivmod>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4611      	mov	r1, r2
 800440c:	4b38      	ldr	r3, [pc, #224]	@ (80044f0 <UART_SetConfig+0x4e4>)
 800440e:	fba3 2301 	umull	r2, r3, r3, r1
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2264      	movs	r2, #100	@ 0x64
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	1acb      	subs	r3, r1, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	@ 0x32
 8004420:	4a33      	ldr	r2, [pc, #204]	@ (80044f0 <UART_SetConfig+0x4e4>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800442c:	441c      	add	r4, r3
 800442e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004432:	2200      	movs	r2, #0
 8004434:	673b      	str	r3, [r7, #112]	@ 0x70
 8004436:	677a      	str	r2, [r7, #116]	@ 0x74
 8004438:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	1891      	adds	r1, r2, r2
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	415b      	adcs	r3, r3
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800444c:	4641      	mov	r1, r8
 800444e:	1851      	adds	r1, r2, r1
 8004450:	6039      	str	r1, [r7, #0]
 8004452:	4649      	mov	r1, r9
 8004454:	414b      	adcs	r3, r1
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004464:	4659      	mov	r1, fp
 8004466:	00cb      	lsls	r3, r1, #3
 8004468:	4651      	mov	r1, sl
 800446a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800446e:	4651      	mov	r1, sl
 8004470:	00ca      	lsls	r2, r1, #3
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	4603      	mov	r3, r0
 8004478:	4642      	mov	r2, r8
 800447a:	189b      	adds	r3, r3, r2
 800447c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800447e:	464b      	mov	r3, r9
 8004480:	460a      	mov	r2, r1
 8004482:	eb42 0303 	adc.w	r3, r2, r3
 8004486:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	663b      	str	r3, [r7, #96]	@ 0x60
 8004492:	667a      	str	r2, [r7, #100]	@ 0x64
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044a0:	4649      	mov	r1, r9
 80044a2:	008b      	lsls	r3, r1, #2
 80044a4:	4641      	mov	r1, r8
 80044a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044aa:	4641      	mov	r1, r8
 80044ac:	008a      	lsls	r2, r1, #2
 80044ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044b2:	f7fb feed 	bl	8000290 <__aeabi_uldivmod>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4b0d      	ldr	r3, [pc, #52]	@ (80044f0 <UART_SetConfig+0x4e4>)
 80044bc:	fba3 1302 	umull	r1, r3, r3, r2
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	2164      	movs	r1, #100	@ 0x64
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	3332      	adds	r3, #50	@ 0x32
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <UART_SetConfig+0x4e4>)
 80044d0:	fba2 2303 	umull	r2, r3, r2, r3
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	f003 020f 	and.w	r2, r3, #15
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4422      	add	r2, r4
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	bf00      	nop
 80044e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044ea:	46bd      	mov	sp, r7
 80044ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f0:	51eb851f 	.word	0x51eb851f

080044f4 <__NVIC_SetPriority>:
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004504:	2b00      	cmp	r3, #0
 8004506:	db0a      	blt.n	800451e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	490c      	ldr	r1, [pc, #48]	@ (8004540 <__NVIC_SetPriority+0x4c>)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	0112      	lsls	r2, r2, #4
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	440b      	add	r3, r1
 8004518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800451c:	e00a      	b.n	8004534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	b2da      	uxtb	r2, r3
 8004522:	4908      	ldr	r1, [pc, #32]	@ (8004544 <__NVIC_SetPriority+0x50>)
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	3b04      	subs	r3, #4
 800452c:	0112      	lsls	r2, r2, #4
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	440b      	add	r3, r1
 8004532:	761a      	strb	r2, [r3, #24]
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	e000e100 	.word	0xe000e100
 8004544:	e000ed00 	.word	0xe000ed00

08004548 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <SysTick_Handler+0x1c>)
 800454e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004550:	f001 fdb4 	bl	80060bc <xTaskGetSchedulerState>
 8004554:	4603      	mov	r3, r0
 8004556:	2b01      	cmp	r3, #1
 8004558:	d001      	beq.n	800455e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800455a:	f002 fbad 	bl	8006cb8 <xPortSysTickHandler>
  }
}
 800455e:	bf00      	nop
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	e000e010 	.word	0xe000e010

08004568 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800456c:	2100      	movs	r1, #0
 800456e:	f06f 0004 	mvn.w	r0, #4
 8004572:	f7ff ffbf 	bl	80044f4 <__NVIC_SetPriority>
#endif
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004582:	f3ef 8305 	mrs	r3, IPSR
 8004586:	603b      	str	r3, [r7, #0]
  return(result);
 8004588:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800458e:	f06f 0305 	mvn.w	r3, #5
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	e00c      	b.n	80045b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004596:	4b0a      	ldr	r3, [pc, #40]	@ (80045c0 <osKernelInitialize+0x44>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d105      	bne.n	80045aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800459e:	4b08      	ldr	r3, [pc, #32]	@ (80045c0 <osKernelInitialize+0x44>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	e002      	b.n	80045b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045b0:	687b      	ldr	r3, [r7, #4]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000278 	.word	0x20000278

080045c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045ca:	f3ef 8305 	mrs	r3, IPSR
 80045ce:	603b      	str	r3, [r7, #0]
  return(result);
 80045d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <osKernelStart+0x1a>
    stat = osErrorISR;
 80045d6:	f06f 0305 	mvn.w	r3, #5
 80045da:	607b      	str	r3, [r7, #4]
 80045dc:	e010      	b.n	8004600 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045de:	4b0b      	ldr	r3, [pc, #44]	@ (800460c <osKernelStart+0x48>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d109      	bne.n	80045fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045e6:	f7ff ffbf 	bl	8004568 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045ea:	4b08      	ldr	r3, [pc, #32]	@ (800460c <osKernelStart+0x48>)
 80045ec:	2202      	movs	r2, #2
 80045ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045f0:	f001 f8ee 	bl	80057d0 <vTaskStartScheduler>
      stat = osOK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	607b      	str	r3, [r7, #4]
 80045f8:	e002      	b.n	8004600 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004600:	687b      	ldr	r3, [r7, #4]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000278 	.word	0x20000278

08004610 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b08e      	sub	sp, #56	@ 0x38
 8004614:	af04      	add	r7, sp, #16
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800461c:	2300      	movs	r3, #0
 800461e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004620:	f3ef 8305 	mrs	r3, IPSR
 8004624:	617b      	str	r3, [r7, #20]
  return(result);
 8004626:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004628:	2b00      	cmp	r3, #0
 800462a:	d17f      	bne.n	800472c <osThreadNew+0x11c>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d07c      	beq.n	800472c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8004632:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8004636:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004638:	2318      	movs	r3, #24
 800463a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004640:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004644:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d045      	beq.n	80046d8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <osThreadNew+0x4a>
        name = attr->name;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <osThreadNew+0x70>
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	2b38      	cmp	r3, #56	@ 0x38
 8004672:	d805      	bhi.n	8004680 <osThreadNew+0x70>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <osThreadNew+0x74>
        return (NULL);
 8004680:	2300      	movs	r3, #0
 8004682:	e054      	b.n	800472e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00e      	beq.n	80046ba <osThreadNew+0xaa>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2ba7      	cmp	r3, #167	@ 0xa7
 80046a2:	d90a      	bls.n	80046ba <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d006      	beq.n	80046ba <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <osThreadNew+0xaa>
        mem = 1;
 80046b4:	2301      	movs	r3, #1
 80046b6:	61bb      	str	r3, [r7, #24]
 80046b8:	e010      	b.n	80046dc <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10c      	bne.n	80046dc <osThreadNew+0xcc>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d108      	bne.n	80046dc <osThreadNew+0xcc>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <osThreadNew+0xcc>
          mem = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	e001      	b.n	80046dc <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d110      	bne.n	8004704 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046ea:	9202      	str	r2, [sp, #8]
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fe75 	bl	80053e8 <xTaskCreateStatic>
 80046fe:	4603      	mov	r3, r0
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	e013      	b.n	800472c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d110      	bne.n	800472c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	b29a      	uxth	r2, r3
 800470e:	f107 0310 	add.w	r3, r7, #16
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fec3 	bl	80054a8 <xTaskCreate>
 8004722:	4603      	mov	r3, r0
 8004724:	2b01      	cmp	r3, #1
 8004726:	d001      	beq.n	800472c <osThreadNew+0x11c>
            hTask = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800472c:	693b      	ldr	r3, [r7, #16]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3728      	adds	r7, #40	@ 0x28
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800473e:	f3ef 8305 	mrs	r3, IPSR
 8004742:	60bb      	str	r3, [r7, #8]
  return(result);
 8004744:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <osDelay+0x1c>
    stat = osErrorISR;
 800474a:	f06f 0305 	mvn.w	r3, #5
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e007      	b.n	8004762 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <osDelay+0x2c>
      vTaskDelay(ticks);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f001 f801 	bl	8005764 <vTaskDelay>
    }
  }

  return (stat);
 8004762:	68fb      	ldr	r3, [r7, #12]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a07      	ldr	r2, [pc, #28]	@ (8004798 <vApplicationGetIdleTaskMemory+0x2c>)
 800477c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4a06      	ldr	r2, [pc, #24]	@ (800479c <vApplicationGetIdleTaskMemory+0x30>)
 8004782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800478a:	601a      	str	r2, [r3, #0]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	2000027c 	.word	0x2000027c
 800479c:	20000324 	.word	0x20000324

080047a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4a07      	ldr	r2, [pc, #28]	@ (80047cc <vApplicationGetTimerTaskMemory+0x2c>)
 80047b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4a06      	ldr	r2, [pc, #24]	@ (80047d0 <vApplicationGetTimerTaskMemory+0x30>)
 80047b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80047be:	601a      	str	r2, [r3, #0]
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	20000964 	.word	0x20000964
 80047d0:	20000a0c 	.word	0x20000a0c

080047d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f103 0208 	add.w	r2, r3, #8
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f103 0208 	add.w	r2, r3, #8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f103 0208 	add.w	r2, r3, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	601a      	str	r2, [r3, #0]
}
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800488c:	d103      	bne.n	8004896 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e00c      	b.n	80048b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3308      	adds	r3, #8
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e002      	b.n	80048a4 <vListInsert+0x2e>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d2f6      	bcs.n	800489e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	601a      	str	r2, [r3, #0]
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6892      	ldr	r2, [r2, #8]
 80048fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6852      	ldr	r2, [r2, #4]
 8004908:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	d103      	bne.n	800491c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	1e5a      	subs	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004968:	f002 f916 	bl	8006b98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004974:	68f9      	ldr	r1, [r7, #12]
 8004976:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	441a      	add	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004998:	3b01      	subs	r3, #1
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	441a      	add	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	22ff      	movs	r2, #255	@ 0xff
 80049ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	22ff      	movs	r2, #255	@ 0xff
 80049b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d114      	bne.n	80049e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01a      	beq.n	80049fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3310      	adds	r3, #16
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 f9b0 	bl	8005d30 <xTaskRemoveFromEventList>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d012      	beq.n	80049fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049d6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a0c <xQueueGenericReset+0xd0>)
 80049d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	e009      	b.n	80049fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3310      	adds	r3, #16
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fef1 	bl	80047d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3324      	adds	r3, #36	@ 0x24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff feec 	bl	80047d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049fc:	f002 f8fe 	bl	8006bfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a00:	2301      	movs	r3, #1
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08e      	sub	sp, #56	@ 0x38
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10b      	bne.n	8004a3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	e7fd      	b.n	8004a38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10b      	bne.n	8004a5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	e7fd      	b.n	8004a56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <xQueueGenericCreateStatic+0x56>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <xQueueGenericCreateStatic+0x5a>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueGenericCreateStatic+0x5c>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	623b      	str	r3, [r7, #32]
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <xQueueGenericCreateStatic+0x84>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <xQueueGenericCreateStatic+0x88>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <xQueueGenericCreateStatic+0x8a>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10b      	bne.n	8004ab6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	61fb      	str	r3, [r7, #28]
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	e7fd      	b.n	8004ab2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ab6:	2350      	movs	r3, #80	@ 0x50
 8004ab8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b50      	cmp	r3, #80	@ 0x50
 8004abe:	d00b      	beq.n	8004ad8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	61bb      	str	r3, [r7, #24]
}
 8004ad2:	bf00      	nop
 8004ad4:	bf00      	nop
 8004ad6:	e7fd      	b.n	8004ad4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ad8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00d      	beq.n	8004b00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f840 	bl	8004b80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3730      	adds	r7, #48	@ 0x30
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b08a      	sub	sp, #40	@ 0x28
 8004b0e:	af02      	add	r7, sp, #8
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	4613      	mov	r3, r2
 8004b16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10b      	bne.n	8004b36 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	613b      	str	r3, [r7, #16]
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	e7fd      	b.n	8004b32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	3350      	adds	r3, #80	@ 0x50
 8004b44:	4618      	mov	r0, r3
 8004b46:	f002 f949 	bl	8006ddc <pvPortMalloc>
 8004b4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d011      	beq.n	8004b76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	3350      	adds	r3, #80	@ 0x50
 8004b5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b64:	79fa      	ldrb	r2, [r7, #7]
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f805 	bl	8004b80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b76:	69bb      	ldr	r3, [r7, #24]
	}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e002      	b.n	8004ba2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bae:	2101      	movs	r1, #1
 8004bb0:	69b8      	ldr	r0, [r7, #24]
 8004bb2:	f7ff fec3 	bl	800493c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08e      	sub	sp, #56	@ 0x38
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10b      	bne.n	8004bfc <xQueueGenericSend+0x34>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	e7fd      	b.n	8004bf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <xQueueGenericSend+0x42>
 8004c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <xQueueGenericSend+0x46>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <xQueueGenericSend+0x48>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10b      	bne.n	8004c2c <xQueueGenericSend+0x64>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c26:	bf00      	nop
 8004c28:	bf00      	nop
 8004c2a:	e7fd      	b.n	8004c28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d103      	bne.n	8004c3a <xQueueGenericSend+0x72>
 8004c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <xQueueGenericSend+0x76>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <xQueueGenericSend+0x78>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <xQueueGenericSend+0x94>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	623b      	str	r3, [r7, #32]
}
 8004c56:	bf00      	nop
 8004c58:	bf00      	nop
 8004c5a:	e7fd      	b.n	8004c58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c5c:	f001 fa2e 	bl	80060bc <xTaskGetSchedulerState>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d102      	bne.n	8004c6c <xQueueGenericSend+0xa4>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <xQueueGenericSend+0xa8>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <xQueueGenericSend+0xaa>
 8004c70:	2300      	movs	r3, #0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10b      	bne.n	8004c8e <xQueueGenericSend+0xc6>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	61fb      	str	r3, [r7, #28]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c8e:	f001 ff83 	bl	8006b98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <xQueueGenericSend+0xdc>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d129      	bne.n	8004cf8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004caa:	f000 fa2e 	bl	800510a <prvCopyDataToQueue>
 8004cae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d010      	beq.n	8004cda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	3324      	adds	r3, #36	@ 0x24
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 f837 	bl	8005d30 <xTaskRemoveFromEventList>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d013      	beq.n	8004cf0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc8 <xQueueGenericSend+0x200>)
 8004cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	e00a      	b.n	8004cf0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ce0:	4b39      	ldr	r3, [pc, #228]	@ (8004dc8 <xQueueGenericSend+0x200>)
 8004ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cf0:	f001 ff84 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e063      	b.n	8004dc0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d103      	bne.n	8004d06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cfe:	f001 ff7d 	bl	8006bfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e05c      	b.n	8004dc0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d0c:	f107 0314 	add.w	r3, r7, #20
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 f871 	bl	8005df8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d16:	2301      	movs	r3, #1
 8004d18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d1a:	f001 ff6f 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d1e:	f000 fdc7 	bl	80058b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d22:	f001 ff39 	bl	8006b98 <vPortEnterCritical>
 8004d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d2c:	b25b      	sxtb	r3, r3
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d32:	d103      	bne.n	8004d3c <xQueueGenericSend+0x174>
 8004d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d42:	b25b      	sxtb	r3, r3
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d48:	d103      	bne.n	8004d52 <xQueueGenericSend+0x18a>
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d52:	f001 ff53 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d56:	1d3a      	adds	r2, r7, #4
 8004d58:	f107 0314 	add.w	r3, r7, #20
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 f860 	bl	8005e24 <xTaskCheckForTimeOut>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d124      	bne.n	8004db4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d6c:	f000 fac5 	bl	80052fa <prvIsQueueFull>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d018      	beq.n	8004da8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	3310      	adds	r3, #16
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 ff84 	bl	8005c8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d86:	f000 fa50 	bl	800522a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d8a:	f000 fd9f 	bl	80058cc <xTaskResumeAll>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f47f af7c 	bne.w	8004c8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d96:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc8 <xQueueGenericSend+0x200>)
 8004d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	e772      	b.n	8004c8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004da8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004daa:	f000 fa3e 	bl	800522a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dae:	f000 fd8d 	bl	80058cc <xTaskResumeAll>
 8004db2:	e76c      	b.n	8004c8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004db4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004db6:	f000 fa38 	bl	800522a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dba:	f000 fd87 	bl	80058cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004dbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3738      	adds	r7, #56	@ 0x38
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b090      	sub	sp, #64	@ 0x40
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10b      	bne.n	8004dfc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004df6:	bf00      	nop
 8004df8:	bf00      	nop
 8004dfa:	e7fd      	b.n	8004df8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <xQueueGenericSendFromISR+0x3e>
 8004e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <xQueueGenericSendFromISR+0x42>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <xQueueGenericSendFromISR+0x44>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10b      	bne.n	8004e2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e26:	bf00      	nop
 8004e28:	bf00      	nop
 8004e2a:	e7fd      	b.n	8004e28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d103      	bne.n	8004e3a <xQueueGenericSendFromISR+0x6e>
 8004e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <xQueueGenericSendFromISR+0x72>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <xQueueGenericSendFromISR+0x74>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10b      	bne.n	8004e5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	623b      	str	r3, [r7, #32]
}
 8004e56:	bf00      	nop
 8004e58:	bf00      	nop
 8004e5a:	e7fd      	b.n	8004e58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e5c:	f001 ff7c 	bl	8006d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e60:	f3ef 8211 	mrs	r2, BASEPRI
 8004e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	61fa      	str	r2, [r7, #28]
 8004e76:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e78:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e7a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d302      	bcc.n	8004e8e <xQueueGenericSendFromISR+0xc2>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d12f      	bne.n	8004eee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ea4:	f000 f931 	bl	800510a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ea8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eb0:	d112      	bne.n	8004ed8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d016      	beq.n	8004ee8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebc:	3324      	adds	r3, #36	@ 0x24
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 ff36 	bl	8005d30 <xTaskRemoveFromEventList>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00e      	beq.n	8004ee8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e007      	b.n	8004ee8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ed8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004edc:	3301      	adds	r3, #1
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	b25a      	sxtb	r2, r3
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004eec:	e001      	b.n	8004ef2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004efc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3740      	adds	r7, #64	@ 0x40
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08c      	sub	sp, #48	@ 0x30
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10b      	bne.n	8004f3a <xQueueReceive+0x32>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	623b      	str	r3, [r7, #32]
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	e7fd      	b.n	8004f36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <xQueueReceive+0x40>
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <xQueueReceive+0x44>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e000      	b.n	8004f4e <xQueueReceive+0x46>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10b      	bne.n	8004f6a <xQueueReceive+0x62>
	__asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	61fb      	str	r3, [r7, #28]
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop
 8004f68:	e7fd      	b.n	8004f66 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f6a:	f001 f8a7 	bl	80060bc <xTaskGetSchedulerState>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <xQueueReceive+0x72>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <xQueueReceive+0x76>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <xQueueReceive+0x78>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10b      	bne.n	8004f9c <xQueueReceive+0x94>
	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	61bb      	str	r3, [r7, #24]
}
 8004f96:	bf00      	nop
 8004f98:	bf00      	nop
 8004f9a:	e7fd      	b.n	8004f98 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f9c:	f001 fdfc 	bl	8006b98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01f      	beq.n	8004fec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fb0:	f000 f915 	bl	80051de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	1e5a      	subs	r2, r3, #1
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00f      	beq.n	8004fe4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc6:	3310      	adds	r3, #16
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 feb1 	bl	8005d30 <xTaskRemoveFromEventList>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80050c8 <xQueueReceive+0x1c0>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fe4:	f001 fe0a 	bl	8006bfc <vPortExitCritical>
				return pdPASS;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e069      	b.n	80050c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ff2:	f001 fe03 	bl	8006bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e062      	b.n	80050c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005000:	f107 0310 	add.w	r3, r7, #16
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fef7 	bl	8005df8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800500a:	2301      	movs	r3, #1
 800500c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800500e:	f001 fdf5 	bl	8006bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005012:	f000 fc4d 	bl	80058b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005016:	f001 fdbf 	bl	8006b98 <vPortEnterCritical>
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005020:	b25b      	sxtb	r3, r3
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005026:	d103      	bne.n	8005030 <xQueueReceive+0x128>
 8005028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005032:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005036:	b25b      	sxtb	r3, r3
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800503c:	d103      	bne.n	8005046 <xQueueReceive+0x13e>
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005046:	f001 fdd9 	bl	8006bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800504a:	1d3a      	adds	r2, r7, #4
 800504c:	f107 0310 	add.w	r3, r7, #16
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fee6 	bl	8005e24 <xTaskCheckForTimeOut>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d123      	bne.n	80050a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800505e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005060:	f000 f935 	bl	80052ce <prvIsQueueEmpty>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d017      	beq.n	800509a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506c:	3324      	adds	r3, #36	@ 0x24
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fe0a 	bl	8005c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005078:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800507a:	f000 f8d6 	bl	800522a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800507e:	f000 fc25 	bl	80058cc <xTaskResumeAll>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d189      	bne.n	8004f9c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005088:	4b0f      	ldr	r3, [pc, #60]	@ (80050c8 <xQueueReceive+0x1c0>)
 800508a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	e780      	b.n	8004f9c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800509a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800509c:	f000 f8c5 	bl	800522a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050a0:	f000 fc14 	bl	80058cc <xTaskResumeAll>
 80050a4:	e77a      	b.n	8004f9c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050a8:	f000 f8bf 	bl	800522a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050ac:	f000 fc0e 	bl	80058cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050b2:	f000 f90c 	bl	80052ce <prvIsQueueEmpty>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f43f af6f 	beq.w	8004f9c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3730      	adds	r7, #48	@ 0x30
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	e000ed04 	.word	0xe000ed04

080050cc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	60bb      	str	r3, [r7, #8]
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	e7fd      	b.n	80050ee <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80050f2:	f001 fd51 	bl	8006b98 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fa:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80050fc:	f001 fd7e 	bl	8006bfc <vPortExitCritical>

	return uxReturn;
 8005100:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b086      	sub	sp, #24
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10d      	bne.n	8005144 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d14d      	bne.n	80051cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 ffdf 	bl	80060f8 <xTaskPriorityDisinherit>
 800513a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	609a      	str	r2, [r3, #8]
 8005142:	e043      	b.n	80051cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d119      	bne.n	800517e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6858      	ldr	r0, [r3, #4]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	461a      	mov	r2, r3
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	f002 f8f3 	bl	8007340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005162:	441a      	add	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	429a      	cmp	r2, r3
 8005172:	d32b      	bcc.n	80051cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	605a      	str	r2, [r3, #4]
 800517c:	e026      	b.n	80051cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68d8      	ldr	r0, [r3, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	461a      	mov	r2, r3
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	f002 f8d9 	bl	8007340 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	425b      	negs	r3, r3
 8005198:	441a      	add	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d207      	bcs.n	80051ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	425b      	negs	r3, r3
 80051b4:	441a      	add	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d105      	bne.n	80051cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80051d4:	697b      	ldr	r3, [r7, #20]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d018      	beq.n	8005222 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	429a      	cmp	r2, r3
 8005208:	d303      	bcc.n	8005212 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68d9      	ldr	r1, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	461a      	mov	r2, r3
 800521c:	6838      	ldr	r0, [r7, #0]
 800521e:	f002 f88f 	bl	8007340 <memcpy>
	}
}
 8005222:	bf00      	nop
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005232:	f001 fcb1 	bl	8006b98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800523c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800523e:	e011      	b.n	8005264 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d012      	beq.n	800526e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3324      	adds	r3, #36	@ 0x24
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fd6f 	bl	8005d30 <xTaskRemoveFromEventList>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005258:	f000 fe48 	bl	8005eec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	3b01      	subs	r3, #1
 8005260:	b2db      	uxtb	r3, r3
 8005262:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005268:	2b00      	cmp	r3, #0
 800526a:	dce9      	bgt.n	8005240 <prvUnlockQueue+0x16>
 800526c:	e000      	b.n	8005270 <prvUnlockQueue+0x46>
					break;
 800526e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	22ff      	movs	r2, #255	@ 0xff
 8005274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005278:	f001 fcc0 	bl	8006bfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800527c:	f001 fc8c 	bl	8006b98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005286:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005288:	e011      	b.n	80052ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d012      	beq.n	80052b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3310      	adds	r3, #16
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fd4a 	bl	8005d30 <xTaskRemoveFromEventList>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052a2:	f000 fe23 	bl	8005eec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052a6:	7bbb      	ldrb	r3, [r7, #14]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	dce9      	bgt.n	800528a <prvUnlockQueue+0x60>
 80052b6:	e000      	b.n	80052ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	22ff      	movs	r2, #255	@ 0xff
 80052be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80052c2:	f001 fc9b 	bl	8006bfc <vPortExitCritical>
}
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052d6:	f001 fc5f 	bl	8006b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d102      	bne.n	80052e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052e2:	2301      	movs	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e001      	b.n	80052ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052ec:	f001 fc86 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 80052f0:	68fb      	ldr	r3, [r7, #12]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005302:	f001 fc49 	bl	8006b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800530e:	429a      	cmp	r2, r3
 8005310:	d102      	bne.n	8005318 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005312:	2301      	movs	r3, #1
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	e001      	b.n	800531c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800531c:	f001 fc6e 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 8005320:	68fb      	ldr	r3, [r7, #12]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	e014      	b.n	8005366 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800533c:	4a0f      	ldr	r2, [pc, #60]	@ (800537c <vQueueAddToRegistry+0x50>)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10b      	bne.n	8005360 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005348:	490c      	ldr	r1, [pc, #48]	@ (800537c <vQueueAddToRegistry+0x50>)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005352:	4a0a      	ldr	r2, [pc, #40]	@ (800537c <vQueueAddToRegistry+0x50>)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4413      	add	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800535e:	e006      	b.n	800536e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b07      	cmp	r3, #7
 800536a:	d9e7      	bls.n	800533c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800536c:	bf00      	nop
 800536e:	bf00      	nop
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	2000168c 	.word	0x2000168c

08005380 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005390:	f001 fc02 	bl	8006b98 <vPortEnterCritical>
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800539a:	b25b      	sxtb	r3, r3
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053a0:	d103      	bne.n	80053aa <vQueueWaitForMessageRestricted+0x2a>
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053b0:	b25b      	sxtb	r3, r3
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053b6:	d103      	bne.n	80053c0 <vQueueWaitForMessageRestricted+0x40>
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053c0:	f001 fc1c 	bl	8006bfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	3324      	adds	r3, #36	@ 0x24
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fc7f 	bl	8005cd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053da:	6978      	ldr	r0, [r7, #20]
 80053dc:	f7ff ff25 	bl	800522a <prvUnlockQueue>
	}
 80053e0:	bf00      	nop
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08e      	sub	sp, #56	@ 0x38
 80053ec:	af04      	add	r7, sp, #16
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10b      	bne.n	8005414 <xTaskCreateStatic+0x2c>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	623b      	str	r3, [r7, #32]
}
 800540e:	bf00      	nop
 8005410:	bf00      	nop
 8005412:	e7fd      	b.n	8005410 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <xTaskCreateStatic+0x4a>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	61fb      	str	r3, [r7, #28]
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	e7fd      	b.n	800542e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005432:	23a8      	movs	r3, #168	@ 0xa8
 8005434:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2ba8      	cmp	r3, #168	@ 0xa8
 800543a:	d00b      	beq.n	8005454 <xTaskCreateStatic+0x6c>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	61bb      	str	r3, [r7, #24]
}
 800544e:	bf00      	nop
 8005450:	bf00      	nop
 8005452:	e7fd      	b.n	8005450 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005454:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01e      	beq.n	800549a <xTaskCreateStatic+0xb2>
 800545c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01b      	beq.n	800549a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005464:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800546a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	2202      	movs	r2, #2
 8005470:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005474:	2300      	movs	r3, #0
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	9302      	str	r3, [sp, #8]
 800547c:	f107 0314 	add.w	r3, r7, #20
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f851 	bl	8005534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005492:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005494:	f000 f8f6 	bl	8005684 <prvAddNewTaskToReadyList>
 8005498:	e001      	b.n	800549e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800549e:	697b      	ldr	r3, [r7, #20]
	}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3728      	adds	r7, #40	@ 0x28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08c      	sub	sp, #48	@ 0x30
 80054ac:	af04      	add	r7, sp, #16
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4618      	mov	r0, r3
 80054be:	f001 fc8d 	bl	8006ddc <pvPortMalloc>
 80054c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00e      	beq.n	80054e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054ca:	20a8      	movs	r0, #168	@ 0xa8
 80054cc:	f001 fc86 	bl	8006ddc <pvPortMalloc>
 80054d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80054de:	e005      	b.n	80054ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054e0:	6978      	ldr	r0, [r7, #20]
 80054e2:	f001 fd49 	bl	8006f78 <vPortFree>
 80054e6:	e001      	b.n	80054ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d017      	beq.n	8005522 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	2300      	movs	r3, #0
 80054fe:	9303      	str	r3, [sp, #12]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	9302      	str	r3, [sp, #8]
 8005504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f80f 	bl	8005534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005516:	69f8      	ldr	r0, [r7, #28]
 8005518:	f000 f8b4 	bl	8005684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800551c:	2301      	movs	r3, #1
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	e002      	b.n	8005528 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005526:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005528:	69bb      	ldr	r3, [r7, #24]
	}
 800552a:	4618      	mov	r0, r3
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	461a      	mov	r2, r3
 800554c:	21a5      	movs	r1, #165	@ 0xa5
 800554e:	f001 fe6d 	bl	800722c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800555c:	3b01      	subs	r3, #1
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f023 0307 	bic.w	r3, r3, #7
 800556a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00b      	beq.n	800558e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	617b      	str	r3, [r7, #20]
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	e7fd      	b.n	800558a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01f      	beq.n	80055d4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005594:	2300      	movs	r3, #0
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	e012      	b.n	80055c0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	4413      	add	r3, r2
 80055a0:	7819      	ldrb	r1, [r3, #0]
 80055a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4413      	add	r3, r2
 80055a8:	3334      	adds	r3, #52	@ 0x34
 80055aa:	460a      	mov	r2, r1
 80055ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	4413      	add	r3, r2
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d006      	beq.n	80055c8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	3301      	adds	r3, #1
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b0f      	cmp	r3, #15
 80055c4:	d9e9      	bls.n	800559a <prvInitialiseNewTask+0x66>
 80055c6:	e000      	b.n	80055ca <prvInitialiseNewTask+0x96>
			{
				break;
 80055c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055d2:	e003      	b.n	80055dc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055de:	2b37      	cmp	r3, #55	@ 0x37
 80055e0:	d901      	bls.n	80055e6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055e2:	2337      	movs	r3, #55	@ 0x37
 80055e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f4:	2200      	movs	r2, #0
 80055f6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fa:	3304      	adds	r3, #4
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff f909 	bl	8004814 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	3318      	adds	r3, #24
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff f904 	bl	8004814 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005610:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005614:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005620:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	2200      	movs	r2, #0
 8005626:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	2200      	movs	r2, #0
 800562e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005634:	3354      	adds	r3, #84	@ 0x54
 8005636:	224c      	movs	r2, #76	@ 0x4c
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f001 fdf6 	bl	800722c <memset>
 8005640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005642:	4a0d      	ldr	r2, [pc, #52]	@ (8005678 <prvInitialiseNewTask+0x144>)
 8005644:	659a      	str	r2, [r3, #88]	@ 0x58
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	4a0c      	ldr	r2, [pc, #48]	@ (800567c <prvInitialiseNewTask+0x148>)
 800564a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	4a0c      	ldr	r2, [pc, #48]	@ (8005680 <prvInitialiseNewTask+0x14c>)
 8005650:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	68f9      	ldr	r1, [r7, #12]
 8005656:	69b8      	ldr	r0, [r7, #24]
 8005658:	f001 f96c 	bl	8006934 <pxPortInitialiseStack>
 800565c:	4602      	mov	r2, r0
 800565e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005660:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800566c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800566e:	bf00      	nop
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20005920 	.word	0x20005920
 800567c:	20005988 	.word	0x20005988
 8005680:	200059f0 	.word	0x200059f0

08005684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800568c:	f001 fa84 	bl	8006b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005690:	4b2d      	ldr	r3, [pc, #180]	@ (8005748 <prvAddNewTaskToReadyList+0xc4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3301      	adds	r3, #1
 8005696:	4a2c      	ldr	r2, [pc, #176]	@ (8005748 <prvAddNewTaskToReadyList+0xc4>)
 8005698:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800569a:	4b2c      	ldr	r3, [pc, #176]	@ (800574c <prvAddNewTaskToReadyList+0xc8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056a2:	4a2a      	ldr	r2, [pc, #168]	@ (800574c <prvAddNewTaskToReadyList+0xc8>)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056a8:	4b27      	ldr	r3, [pc, #156]	@ (8005748 <prvAddNewTaskToReadyList+0xc4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d110      	bne.n	80056d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056b0:	f000 fc40 	bl	8005f34 <prvInitialiseTaskLists>
 80056b4:	e00d      	b.n	80056d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056b6:	4b26      	ldr	r3, [pc, #152]	@ (8005750 <prvAddNewTaskToReadyList+0xcc>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d109      	bne.n	80056d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056be:	4b23      	ldr	r3, [pc, #140]	@ (800574c <prvAddNewTaskToReadyList+0xc8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d802      	bhi.n	80056d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056cc:	4a1f      	ldr	r2, [pc, #124]	@ (800574c <prvAddNewTaskToReadyList+0xc8>)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056d2:	4b20      	ldr	r3, [pc, #128]	@ (8005754 <prvAddNewTaskToReadyList+0xd0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3301      	adds	r3, #1
 80056d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005754 <prvAddNewTaskToReadyList+0xd0>)
 80056da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005754 <prvAddNewTaskToReadyList+0xd0>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005758 <prvAddNewTaskToReadyList+0xd4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d903      	bls.n	80056f8 <prvAddNewTaskToReadyList+0x74>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f4:	4a18      	ldr	r2, [pc, #96]	@ (8005758 <prvAddNewTaskToReadyList+0xd4>)
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4a15      	ldr	r2, [pc, #84]	@ (800575c <prvAddNewTaskToReadyList+0xd8>)
 8005706:	441a      	add	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3304      	adds	r3, #4
 800570c:	4619      	mov	r1, r3
 800570e:	4610      	mov	r0, r2
 8005710:	f7ff f88d 	bl	800482e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005714:	f001 fa72 	bl	8006bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005718:	4b0d      	ldr	r3, [pc, #52]	@ (8005750 <prvAddNewTaskToReadyList+0xcc>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00e      	beq.n	800573e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005720:	4b0a      	ldr	r3, [pc, #40]	@ (800574c <prvAddNewTaskToReadyList+0xc8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	429a      	cmp	r2, r3
 800572c:	d207      	bcs.n	800573e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800572e:	4b0c      	ldr	r3, [pc, #48]	@ (8005760 <prvAddNewTaskToReadyList+0xdc>)
 8005730:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800573e:	bf00      	nop
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20001ba0 	.word	0x20001ba0
 800574c:	200016cc 	.word	0x200016cc
 8005750:	20001bac 	.word	0x20001bac
 8005754:	20001bbc 	.word	0x20001bbc
 8005758:	20001ba8 	.word	0x20001ba8
 800575c:	200016d0 	.word	0x200016d0
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d018      	beq.n	80057a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005776:	4b14      	ldr	r3, [pc, #80]	@ (80057c8 <vTaskDelay+0x64>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <vTaskDelay+0x32>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60bb      	str	r3, [r7, #8]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005796:	f000 f88b 	bl	80058b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800579a:	2100      	movs	r1, #0
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fd1b 	bl	80061d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057a2:	f000 f893 	bl	80058cc <xTaskResumeAll>
 80057a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d107      	bne.n	80057be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80057ae:	4b07      	ldr	r3, [pc, #28]	@ (80057cc <vTaskDelay+0x68>)
 80057b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20001bc8 	.word	0x20001bc8
 80057cc:	e000ed04 	.word	0xe000ed04

080057d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08a      	sub	sp, #40	@ 0x28
 80057d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057de:	463a      	mov	r2, r7
 80057e0:	1d39      	adds	r1, r7, #4
 80057e2:	f107 0308 	add.w	r3, r7, #8
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe ffc0 	bl	800476c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	9202      	str	r2, [sp, #8]
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	2300      	movs	r3, #0
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	2300      	movs	r3, #0
 80057fc:	460a      	mov	r2, r1
 80057fe:	4924      	ldr	r1, [pc, #144]	@ (8005890 <vTaskStartScheduler+0xc0>)
 8005800:	4824      	ldr	r0, [pc, #144]	@ (8005894 <vTaskStartScheduler+0xc4>)
 8005802:	f7ff fdf1 	bl	80053e8 <xTaskCreateStatic>
 8005806:	4603      	mov	r3, r0
 8005808:	4a23      	ldr	r2, [pc, #140]	@ (8005898 <vTaskStartScheduler+0xc8>)
 800580a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800580c:	4b22      	ldr	r3, [pc, #136]	@ (8005898 <vTaskStartScheduler+0xc8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005814:	2301      	movs	r3, #1
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	e001      	b.n	800581e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d102      	bne.n	800582a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005824:	f000 fd2c 	bl	8006280 <xTimerCreateTimerTask>
 8005828:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d11b      	bne.n	8005868 <vTaskStartScheduler+0x98>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	613b      	str	r3, [r7, #16]
}
 8005842:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005844:	4b15      	ldr	r3, [pc, #84]	@ (800589c <vTaskStartScheduler+0xcc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3354      	adds	r3, #84	@ 0x54
 800584a:	4a15      	ldr	r2, [pc, #84]	@ (80058a0 <vTaskStartScheduler+0xd0>)
 800584c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800584e:	4b15      	ldr	r3, [pc, #84]	@ (80058a4 <vTaskStartScheduler+0xd4>)
 8005850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005854:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005856:	4b14      	ldr	r3, [pc, #80]	@ (80058a8 <vTaskStartScheduler+0xd8>)
 8005858:	2201      	movs	r2, #1
 800585a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800585c:	4b13      	ldr	r3, [pc, #76]	@ (80058ac <vTaskStartScheduler+0xdc>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005862:	f001 f8f5 	bl	8006a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005866:	e00f      	b.n	8005888 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800586e:	d10b      	bne.n	8005888 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	60fb      	str	r3, [r7, #12]
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <vTaskStartScheduler+0xb4>
}
 8005888:	bf00      	nop
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	08007cac 	.word	0x08007cac
 8005894:	08005f05 	.word	0x08005f05
 8005898:	20001bc4 	.word	0x20001bc4
 800589c:	200016cc 	.word	0x200016cc
 80058a0:	20000010 	.word	0x20000010
 80058a4:	20001bc0 	.word	0x20001bc0
 80058a8:	20001bac 	.word	0x20001bac
 80058ac:	20001ba4 	.word	0x20001ba4

080058b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058b4:	4b04      	ldr	r3, [pc, #16]	@ (80058c8 <vTaskSuspendAll+0x18>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	4a03      	ldr	r2, [pc, #12]	@ (80058c8 <vTaskSuspendAll+0x18>)
 80058bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058be:	bf00      	nop
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	20001bc8 	.word	0x20001bc8

080058cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058da:	4b42      	ldr	r3, [pc, #264]	@ (80059e4 <xTaskResumeAll+0x118>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <xTaskResumeAll+0x2e>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	603b      	str	r3, [r7, #0]
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	e7fd      	b.n	80058f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058fa:	f001 f94d 	bl	8006b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058fe:	4b39      	ldr	r3, [pc, #228]	@ (80059e4 <xTaskResumeAll+0x118>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3b01      	subs	r3, #1
 8005904:	4a37      	ldr	r2, [pc, #220]	@ (80059e4 <xTaskResumeAll+0x118>)
 8005906:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005908:	4b36      	ldr	r3, [pc, #216]	@ (80059e4 <xTaskResumeAll+0x118>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d162      	bne.n	80059d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005910:	4b35      	ldr	r3, [pc, #212]	@ (80059e8 <xTaskResumeAll+0x11c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d05e      	beq.n	80059d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005918:	e02f      	b.n	800597a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800591a:	4b34      	ldr	r3, [pc, #208]	@ (80059ec <xTaskResumeAll+0x120>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3318      	adds	r3, #24
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe ffde 	bl	80048e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3304      	adds	r3, #4
 8005930:	4618      	mov	r0, r3
 8005932:	f7fe ffd9 	bl	80048e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593a:	4b2d      	ldr	r3, [pc, #180]	@ (80059f0 <xTaskResumeAll+0x124>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	429a      	cmp	r2, r3
 8005940:	d903      	bls.n	800594a <xTaskResumeAll+0x7e>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005946:	4a2a      	ldr	r2, [pc, #168]	@ (80059f0 <xTaskResumeAll+0x124>)
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4a27      	ldr	r2, [pc, #156]	@ (80059f4 <xTaskResumeAll+0x128>)
 8005958:	441a      	add	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3304      	adds	r3, #4
 800595e:	4619      	mov	r1, r3
 8005960:	4610      	mov	r0, r2
 8005962:	f7fe ff64 	bl	800482e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800596a:	4b23      	ldr	r3, [pc, #140]	@ (80059f8 <xTaskResumeAll+0x12c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	429a      	cmp	r2, r3
 8005972:	d302      	bcc.n	800597a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005974:	4b21      	ldr	r3, [pc, #132]	@ (80059fc <xTaskResumeAll+0x130>)
 8005976:	2201      	movs	r2, #1
 8005978:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800597a:	4b1c      	ldr	r3, [pc, #112]	@ (80059ec <xTaskResumeAll+0x120>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1cb      	bne.n	800591a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005988:	f000 fb78 	bl	800607c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800598c:	4b1c      	ldr	r3, [pc, #112]	@ (8005a00 <xTaskResumeAll+0x134>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d010      	beq.n	80059ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005998:	f000 f858 	bl	8005a4c <xTaskIncrementTick>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80059a2:	4b16      	ldr	r3, [pc, #88]	@ (80059fc <xTaskResumeAll+0x130>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1f1      	bne.n	8005998 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80059b4:	4b12      	ldr	r3, [pc, #72]	@ (8005a00 <xTaskResumeAll+0x134>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059ba:	4b10      	ldr	r3, [pc, #64]	@ (80059fc <xTaskResumeAll+0x130>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d009      	beq.n	80059d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059c2:	2301      	movs	r3, #1
 80059c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a04 <xTaskResumeAll+0x138>)
 80059c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059d6:	f001 f911 	bl	8006bfc <vPortExitCritical>

	return xAlreadyYielded;
 80059da:	68bb      	ldr	r3, [r7, #8]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20001bc8 	.word	0x20001bc8
 80059e8:	20001ba0 	.word	0x20001ba0
 80059ec:	20001b60 	.word	0x20001b60
 80059f0:	20001ba8 	.word	0x20001ba8
 80059f4:	200016d0 	.word	0x200016d0
 80059f8:	200016cc 	.word	0x200016cc
 80059fc:	20001bb4 	.word	0x20001bb4
 8005a00:	20001bb0 	.word	0x20001bb0
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a0e:	4b05      	ldr	r3, [pc, #20]	@ (8005a24 <xTaskGetTickCount+0x1c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a14:	687b      	ldr	r3, [r7, #4]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20001ba4 	.word	0x20001ba4

08005a28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a2e:	f001 f993 	bl	8006d58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005a32:	2300      	movs	r3, #0
 8005a34:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005a36:	4b04      	ldr	r3, [pc, #16]	@ (8005a48 <xTaskGetTickCountFromISR+0x20>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a3c:	683b      	ldr	r3, [r7, #0]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20001ba4 	.word	0x20001ba4

08005a4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a56:	4b4f      	ldr	r3, [pc, #316]	@ (8005b94 <xTaskIncrementTick+0x148>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f040 8090 	bne.w	8005b80 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a60:	4b4d      	ldr	r3, [pc, #308]	@ (8005b98 <xTaskIncrementTick+0x14c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3301      	adds	r3, #1
 8005a66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a68:	4a4b      	ldr	r2, [pc, #300]	@ (8005b98 <xTaskIncrementTick+0x14c>)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d121      	bne.n	8005ab8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a74:	4b49      	ldr	r3, [pc, #292]	@ (8005b9c <xTaskIncrementTick+0x150>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	603b      	str	r3, [r7, #0]
}
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	e7fd      	b.n	8005a92 <xTaskIncrementTick+0x46>
 8005a96:	4b41      	ldr	r3, [pc, #260]	@ (8005b9c <xTaskIncrementTick+0x150>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	4b40      	ldr	r3, [pc, #256]	@ (8005ba0 <xTaskIncrementTick+0x154>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a3e      	ldr	r2, [pc, #248]	@ (8005b9c <xTaskIncrementTick+0x150>)
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ba0 <xTaskIncrementTick+0x154>)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba4 <xTaskIncrementTick+0x158>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ba4 <xTaskIncrementTick+0x158>)
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	f000 fae2 	bl	800607c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba8 <xTaskIncrementTick+0x15c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d349      	bcc.n	8005b56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ac2:	4b36      	ldr	r3, [pc, #216]	@ (8005b9c <xTaskIncrementTick+0x150>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005acc:	4b36      	ldr	r3, [pc, #216]	@ (8005ba8 <xTaskIncrementTick+0x15c>)
 8005ace:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ad2:	601a      	str	r2, [r3, #0]
					break;
 8005ad4:	e03f      	b.n	8005b56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad6:	4b31      	ldr	r3, [pc, #196]	@ (8005b9c <xTaskIncrementTick+0x150>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d203      	bcs.n	8005af6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005aee:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba8 <xTaskIncrementTick+0x15c>)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005af4:	e02f      	b.n	8005b56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	3304      	adds	r3, #4
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe fef4 	bl	80048e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d004      	beq.n	8005b12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	3318      	adds	r3, #24
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fe feeb 	bl	80048e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b16:	4b25      	ldr	r3, [pc, #148]	@ (8005bac <xTaskIncrementTick+0x160>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d903      	bls.n	8005b26 <xTaskIncrementTick+0xda>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b22:	4a22      	ldr	r2, [pc, #136]	@ (8005bac <xTaskIncrementTick+0x160>)
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb0 <xTaskIncrementTick+0x164>)
 8005b34:	441a      	add	r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f7fe fe76 	bl	800482e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b46:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb4 <xTaskIncrementTick+0x168>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d3b8      	bcc.n	8005ac2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005b50:	2301      	movs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b54:	e7b5      	b.n	8005ac2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b56:	4b17      	ldr	r3, [pc, #92]	@ (8005bb4 <xTaskIncrementTick+0x168>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5c:	4914      	ldr	r1, [pc, #80]	@ (8005bb0 <xTaskIncrementTick+0x164>)
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d901      	bls.n	8005b72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b72:	4b11      	ldr	r3, [pc, #68]	@ (8005bb8 <xTaskIncrementTick+0x16c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d007      	beq.n	8005b8a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	e004      	b.n	8005b8a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b80:	4b0e      	ldr	r3, [pc, #56]	@ (8005bbc <xTaskIncrementTick+0x170>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3301      	adds	r3, #1
 8005b86:	4a0d      	ldr	r2, [pc, #52]	@ (8005bbc <xTaskIncrementTick+0x170>)
 8005b88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b8a:	697b      	ldr	r3, [r7, #20]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20001bc8 	.word	0x20001bc8
 8005b98:	20001ba4 	.word	0x20001ba4
 8005b9c:	20001b58 	.word	0x20001b58
 8005ba0:	20001b5c 	.word	0x20001b5c
 8005ba4:	20001bb8 	.word	0x20001bb8
 8005ba8:	20001bc0 	.word	0x20001bc0
 8005bac:	20001ba8 	.word	0x20001ba8
 8005bb0:	200016d0 	.word	0x200016d0
 8005bb4:	200016cc 	.word	0x200016cc
 8005bb8:	20001bb4 	.word	0x20001bb4
 8005bbc:	20001bb0 	.word	0x20001bb0

08005bc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8005c74 <vTaskSwitchContext+0xb4>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bce:	4b2a      	ldr	r3, [pc, #168]	@ (8005c78 <vTaskSwitchContext+0xb8>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bd4:	e047      	b.n	8005c66 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005bd6:	4b28      	ldr	r3, [pc, #160]	@ (8005c78 <vTaskSwitchContext+0xb8>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bdc:	4b27      	ldr	r3, [pc, #156]	@ (8005c7c <vTaskSwitchContext+0xbc>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	e011      	b.n	8005c08 <vTaskSwitchContext+0x48>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10b      	bne.n	8005c02 <vTaskSwitchContext+0x42>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	607b      	str	r3, [r7, #4]
}
 8005bfc:	bf00      	nop
 8005bfe:	bf00      	nop
 8005c00:	e7fd      	b.n	8005bfe <vTaskSwitchContext+0x3e>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	491d      	ldr	r1, [pc, #116]	@ (8005c80 <vTaskSwitchContext+0xc0>)
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0e3      	beq.n	8005be4 <vTaskSwitchContext+0x24>
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4a16      	ldr	r2, [pc, #88]	@ (8005c80 <vTaskSwitchContext+0xc0>)
 8005c28:	4413      	add	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	605a      	str	r2, [r3, #4]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d104      	bne.n	8005c4c <vTaskSwitchContext+0x8c>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	605a      	str	r2, [r3, #4]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	4a0c      	ldr	r2, [pc, #48]	@ (8005c84 <vTaskSwitchContext+0xc4>)
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	4a09      	ldr	r2, [pc, #36]	@ (8005c7c <vTaskSwitchContext+0xbc>)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c5c:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <vTaskSwitchContext+0xc4>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3354      	adds	r3, #84	@ 0x54
 8005c62:	4a09      	ldr	r2, [pc, #36]	@ (8005c88 <vTaskSwitchContext+0xc8>)
 8005c64:	6013      	str	r3, [r2, #0]
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	20001bc8 	.word	0x20001bc8
 8005c78:	20001bb4 	.word	0x20001bb4
 8005c7c:	20001ba8 	.word	0x20001ba8
 8005c80:	200016d0 	.word	0x200016d0
 8005c84:	200016cc 	.word	0x200016cc
 8005c88:	20000010 	.word	0x20000010

08005c8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60fb      	str	r3, [r7, #12]
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cb4:	4b07      	ldr	r3, [pc, #28]	@ (8005cd4 <vTaskPlaceOnEventList+0x48>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3318      	adds	r3, #24
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7fe fdda 	bl	8004876 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	6838      	ldr	r0, [r7, #0]
 8005cc6:	f000 fa87 	bl	80061d8 <prvAddCurrentTaskToDelayedList>
}
 8005cca:	bf00      	nop
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	200016cc 	.word	0x200016cc

08005cd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	617b      	str	r3, [r7, #20]
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	e7fd      	b.n	8005cfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d02:	4b0a      	ldr	r3, [pc, #40]	@ (8005d2c <vTaskPlaceOnEventListRestricted+0x54>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3318      	adds	r3, #24
 8005d08:	4619      	mov	r1, r3
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7fe fd8f 	bl	800482e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	68b8      	ldr	r0, [r7, #8]
 8005d20:	f000 fa5a 	bl	80061d8 <prvAddCurrentTaskToDelayedList>
	}
 8005d24:	bf00      	nop
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	200016cc 	.word	0x200016cc

08005d30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10b      	bne.n	8005d5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	60fb      	str	r3, [r7, #12]
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	e7fd      	b.n	8005d5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	3318      	adds	r3, #24
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fe fdc0 	bl	80048e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d68:	4b1d      	ldr	r3, [pc, #116]	@ (8005de0 <xTaskRemoveFromEventList+0xb0>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d11d      	bne.n	8005dac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fe fdb7 	bl	80048e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7e:	4b19      	ldr	r3, [pc, #100]	@ (8005de4 <xTaskRemoveFromEventList+0xb4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d903      	bls.n	8005d8e <xTaskRemoveFromEventList+0x5e>
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8a:	4a16      	ldr	r2, [pc, #88]	@ (8005de4 <xTaskRemoveFromEventList+0xb4>)
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4a13      	ldr	r2, [pc, #76]	@ (8005de8 <xTaskRemoveFromEventList+0xb8>)
 8005d9c:	441a      	add	r2, r3
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f7fe fd42 	bl	800482e <vListInsertEnd>
 8005daa:	e005      	b.n	8005db8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	3318      	adds	r3, #24
 8005db0:	4619      	mov	r1, r3
 8005db2:	480e      	ldr	r0, [pc, #56]	@ (8005dec <xTaskRemoveFromEventList+0xbc>)
 8005db4:	f7fe fd3b 	bl	800482e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005df0 <xTaskRemoveFromEventList+0xc0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d905      	bls.n	8005dd2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dca:	4b0a      	ldr	r3, [pc, #40]	@ (8005df4 <xTaskRemoveFromEventList+0xc4>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e001      	b.n	8005dd6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005dd6:	697b      	ldr	r3, [r7, #20]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20001bc8 	.word	0x20001bc8
 8005de4:	20001ba8 	.word	0x20001ba8
 8005de8:	200016d0 	.word	0x200016d0
 8005dec:	20001b60 	.word	0x20001b60
 8005df0:	200016cc 	.word	0x200016cc
 8005df4:	20001bb4 	.word	0x20001bb4

08005df8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e00:	4b06      	ldr	r3, [pc, #24]	@ (8005e1c <vTaskInternalSetTimeOutState+0x24>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e08:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <vTaskInternalSetTimeOutState+0x28>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	605a      	str	r2, [r3, #4]
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	20001bb8 	.word	0x20001bb8
 8005e20:	20001ba4 	.word	0x20001ba4

08005e24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10b      	bne.n	8005e4c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	613b      	str	r3, [r7, #16]
}
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
 8005e4a:	e7fd      	b.n	8005e48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60fb      	str	r3, [r7, #12]
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005e6a:	f000 fe95 	bl	8006b98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee4 <xTaskCheckForTimeOut+0xc0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e86:	d102      	bne.n	8005e8e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61fb      	str	r3, [r7, #28]
 8005e8c:	e023      	b.n	8005ed6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b15      	ldr	r3, [pc, #84]	@ (8005ee8 <xTaskCheckForTimeOut+0xc4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d007      	beq.n	8005eaa <xTaskCheckForTimeOut+0x86>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d302      	bcc.n	8005eaa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	e015      	b.n	8005ed6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d20b      	bcs.n	8005ecc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7ff ff99 	bl	8005df8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	e004      	b.n	8005ed6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ed6:	f000 fe91 	bl	8006bfc <vPortExitCritical>

	return xReturn;
 8005eda:	69fb      	ldr	r3, [r7, #28]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20001ba4 	.word	0x20001ba4
 8005ee8:	20001bb8 	.word	0x20001bb8

08005eec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ef0:	4b03      	ldr	r3, [pc, #12]	@ (8005f00 <vTaskMissedYield+0x14>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
}
 8005ef6:	bf00      	nop
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	20001bb4 	.word	0x20001bb4

08005f04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f0c:	f000 f852 	bl	8005fb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f10:	4b06      	ldr	r3, [pc, #24]	@ (8005f2c <prvIdleTask+0x28>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d9f9      	bls.n	8005f0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f18:	4b05      	ldr	r3, [pc, #20]	@ (8005f30 <prvIdleTask+0x2c>)
 8005f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f28:	e7f0      	b.n	8005f0c <prvIdleTask+0x8>
 8005f2a:	bf00      	nop
 8005f2c:	200016d0 	.word	0x200016d0
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	607b      	str	r3, [r7, #4]
 8005f3e:	e00c      	b.n	8005f5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4a12      	ldr	r2, [pc, #72]	@ (8005f94 <prvInitialiseTaskLists+0x60>)
 8005f4c:	4413      	add	r3, r2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe fc40 	bl	80047d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3301      	adds	r3, #1
 8005f58:	607b      	str	r3, [r7, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b37      	cmp	r3, #55	@ 0x37
 8005f5e:	d9ef      	bls.n	8005f40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f60:	480d      	ldr	r0, [pc, #52]	@ (8005f98 <prvInitialiseTaskLists+0x64>)
 8005f62:	f7fe fc37 	bl	80047d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f66:	480d      	ldr	r0, [pc, #52]	@ (8005f9c <prvInitialiseTaskLists+0x68>)
 8005f68:	f7fe fc34 	bl	80047d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f6c:	480c      	ldr	r0, [pc, #48]	@ (8005fa0 <prvInitialiseTaskLists+0x6c>)
 8005f6e:	f7fe fc31 	bl	80047d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f72:	480c      	ldr	r0, [pc, #48]	@ (8005fa4 <prvInitialiseTaskLists+0x70>)
 8005f74:	f7fe fc2e 	bl	80047d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f78:	480b      	ldr	r0, [pc, #44]	@ (8005fa8 <prvInitialiseTaskLists+0x74>)
 8005f7a:	f7fe fc2b 	bl	80047d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fac <prvInitialiseTaskLists+0x78>)
 8005f80:	4a05      	ldr	r2, [pc, #20]	@ (8005f98 <prvInitialiseTaskLists+0x64>)
 8005f82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f84:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb0 <prvInitialiseTaskLists+0x7c>)
 8005f86:	4a05      	ldr	r2, [pc, #20]	@ (8005f9c <prvInitialiseTaskLists+0x68>)
 8005f88:	601a      	str	r2, [r3, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	200016d0 	.word	0x200016d0
 8005f98:	20001b30 	.word	0x20001b30
 8005f9c:	20001b44 	.word	0x20001b44
 8005fa0:	20001b60 	.word	0x20001b60
 8005fa4:	20001b74 	.word	0x20001b74
 8005fa8:	20001b8c 	.word	0x20001b8c
 8005fac:	20001b58 	.word	0x20001b58
 8005fb0:	20001b5c 	.word	0x20001b5c

08005fb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fba:	e019      	b.n	8005ff0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fbc:	f000 fdec 	bl	8006b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc0:	4b10      	ldr	r3, [pc, #64]	@ (8006004 <prvCheckTasksWaitingTermination+0x50>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe fc8b 	bl	80048e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006008 <prvCheckTasksWaitingTermination+0x54>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8006008 <prvCheckTasksWaitingTermination+0x54>)
 8005fda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800600c <prvCheckTasksWaitingTermination+0x58>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800600c <prvCheckTasksWaitingTermination+0x58>)
 8005fe4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fe6:	f000 fe09 	bl	8006bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f810 	bl	8006010 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ff0:	4b06      	ldr	r3, [pc, #24]	@ (800600c <prvCheckTasksWaitingTermination+0x58>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e1      	bne.n	8005fbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ff8:	bf00      	nop
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20001b74 	.word	0x20001b74
 8006008:	20001ba0 	.word	0x20001ba0
 800600c:	20001b88 	.word	0x20001b88

08006010 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3354      	adds	r3, #84	@ 0x54
 800601c:	4618      	mov	r0, r3
 800601e:	f001 f90d 	bl	800723c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006028:	2b00      	cmp	r3, #0
 800602a:	d108      	bne.n	800603e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006030:	4618      	mov	r0, r3
 8006032:	f000 ffa1 	bl	8006f78 <vPortFree>
				vPortFree( pxTCB );
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 ff9e 	bl	8006f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800603c:	e019      	b.n	8006072 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006044:	2b01      	cmp	r3, #1
 8006046:	d103      	bne.n	8006050 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 ff95 	bl	8006f78 <vPortFree>
	}
 800604e:	e010      	b.n	8006072 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006056:	2b02      	cmp	r3, #2
 8006058:	d00b      	beq.n	8006072 <prvDeleteTCB+0x62>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	60fb      	str	r3, [r7, #12]
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <prvDeleteTCB+0x5e>
	}
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006082:	4b0c      	ldr	r3, [pc, #48]	@ (80060b4 <prvResetNextTaskUnblockTime+0x38>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d104      	bne.n	8006096 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800608c:	4b0a      	ldr	r3, [pc, #40]	@ (80060b8 <prvResetNextTaskUnblockTime+0x3c>)
 800608e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006092:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006094:	e008      	b.n	80060a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006096:	4b07      	ldr	r3, [pc, #28]	@ (80060b4 <prvResetNextTaskUnblockTime+0x38>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4a04      	ldr	r2, [pc, #16]	@ (80060b8 <prvResetNextTaskUnblockTime+0x3c>)
 80060a6:	6013      	str	r3, [r2, #0]
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	20001b58 	.word	0x20001b58
 80060b8:	20001bc0 	.word	0x20001bc0

080060bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060c2:	4b0b      	ldr	r3, [pc, #44]	@ (80060f0 <xTaskGetSchedulerState+0x34>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060ca:	2301      	movs	r3, #1
 80060cc:	607b      	str	r3, [r7, #4]
 80060ce:	e008      	b.n	80060e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d0:	4b08      	ldr	r3, [pc, #32]	@ (80060f4 <xTaskGetSchedulerState+0x38>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d102      	bne.n	80060de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060d8:	2302      	movs	r3, #2
 80060da:	607b      	str	r3, [r7, #4]
 80060dc:	e001      	b.n	80060e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060de:	2300      	movs	r3, #0
 80060e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060e2:	687b      	ldr	r3, [r7, #4]
	}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	20001bac 	.word	0x20001bac
 80060f4:	20001bc8 	.word	0x20001bc8

080060f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d058      	beq.n	80061c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800610e:	4b2f      	ldr	r3, [pc, #188]	@ (80061cc <xTaskPriorityDisinherit+0xd4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	429a      	cmp	r2, r3
 8006116:	d00b      	beq.n	8006130 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	60fb      	str	r3, [r7, #12]
}
 800612a:	bf00      	nop
 800612c:	bf00      	nop
 800612e:	e7fd      	b.n	800612c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	60bb      	str	r3, [r7, #8]
}
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	e7fd      	b.n	800614c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006154:	1e5a      	subs	r2, r3, #1
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006162:	429a      	cmp	r2, r3
 8006164:	d02c      	beq.n	80061c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800616a:	2b00      	cmp	r3, #0
 800616c:	d128      	bne.n	80061c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	3304      	adds	r3, #4
 8006172:	4618      	mov	r0, r3
 8006174:	f7fe fbb8 	bl	80048e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006184:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006190:	4b0f      	ldr	r3, [pc, #60]	@ (80061d0 <xTaskPriorityDisinherit+0xd8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d903      	bls.n	80061a0 <xTaskPriorityDisinherit+0xa8>
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619c:	4a0c      	ldr	r2, [pc, #48]	@ (80061d0 <xTaskPriorityDisinherit+0xd8>)
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4a09      	ldr	r2, [pc, #36]	@ (80061d4 <xTaskPriorityDisinherit+0xdc>)
 80061ae:	441a      	add	r2, r3
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	3304      	adds	r3, #4
 80061b4:	4619      	mov	r1, r3
 80061b6:	4610      	mov	r0, r2
 80061b8:	f7fe fb39 	bl	800482e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061c0:	697b      	ldr	r3, [r7, #20]
	}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	200016cc 	.word	0x200016cc
 80061d0:	20001ba8 	.word	0x20001ba8
 80061d4:	200016d0 	.word	0x200016d0

080061d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061e2:	4b21      	ldr	r3, [pc, #132]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x90>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061e8:	4b20      	ldr	r3, [pc, #128]	@ (800626c <prvAddCurrentTaskToDelayedList+0x94>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3304      	adds	r3, #4
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fb7a 	bl	80048e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061fa:	d10a      	bne.n	8006212 <prvAddCurrentTaskToDelayedList+0x3a>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006202:	4b1a      	ldr	r3, [pc, #104]	@ (800626c <prvAddCurrentTaskToDelayedList+0x94>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3304      	adds	r3, #4
 8006208:	4619      	mov	r1, r3
 800620a:	4819      	ldr	r0, [pc, #100]	@ (8006270 <prvAddCurrentTaskToDelayedList+0x98>)
 800620c:	f7fe fb0f 	bl	800482e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006210:	e026      	b.n	8006260 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4413      	add	r3, r2
 8006218:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800621a:	4b14      	ldr	r3, [pc, #80]	@ (800626c <prvAddCurrentTaskToDelayedList+0x94>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	429a      	cmp	r2, r3
 8006228:	d209      	bcs.n	800623e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800622a:	4b12      	ldr	r3, [pc, #72]	@ (8006274 <prvAddCurrentTaskToDelayedList+0x9c>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b0f      	ldr	r3, [pc, #60]	@ (800626c <prvAddCurrentTaskToDelayedList+0x94>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3304      	adds	r3, #4
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f7fe fb1d 	bl	8004876 <vListInsert>
}
 800623c:	e010      	b.n	8006260 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800623e:	4b0e      	ldr	r3, [pc, #56]	@ (8006278 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4b0a      	ldr	r3, [pc, #40]	@ (800626c <prvAddCurrentTaskToDelayedList+0x94>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3304      	adds	r3, #4
 8006248:	4619      	mov	r1, r3
 800624a:	4610      	mov	r0, r2
 800624c:	f7fe fb13 	bl	8004876 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006250:	4b0a      	ldr	r3, [pc, #40]	@ (800627c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	429a      	cmp	r2, r3
 8006258:	d202      	bcs.n	8006260 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800625a:	4a08      	ldr	r2, [pc, #32]	@ (800627c <prvAddCurrentTaskToDelayedList+0xa4>)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	6013      	str	r3, [r2, #0]
}
 8006260:	bf00      	nop
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20001ba4 	.word	0x20001ba4
 800626c:	200016cc 	.word	0x200016cc
 8006270:	20001b8c 	.word	0x20001b8c
 8006274:	20001b5c 	.word	0x20001b5c
 8006278:	20001b58 	.word	0x20001b58
 800627c:	20001bc0 	.word	0x20001bc0

08006280 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	@ 0x28
 8006284:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800628a:	f000 fb13 	bl	80068b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800628e:	4b1d      	ldr	r3, [pc, #116]	@ (8006304 <xTimerCreateTimerTask+0x84>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d021      	beq.n	80062da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800629e:	1d3a      	adds	r2, r7, #4
 80062a0:	f107 0108 	add.w	r1, r7, #8
 80062a4:	f107 030c 	add.w	r3, r7, #12
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fe fa79 	bl	80047a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	9202      	str	r2, [sp, #8]
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	2302      	movs	r3, #2
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	2300      	movs	r3, #0
 80062be:	460a      	mov	r2, r1
 80062c0:	4911      	ldr	r1, [pc, #68]	@ (8006308 <xTimerCreateTimerTask+0x88>)
 80062c2:	4812      	ldr	r0, [pc, #72]	@ (800630c <xTimerCreateTimerTask+0x8c>)
 80062c4:	f7ff f890 	bl	80053e8 <xTaskCreateStatic>
 80062c8:	4603      	mov	r3, r0
 80062ca:	4a11      	ldr	r2, [pc, #68]	@ (8006310 <xTimerCreateTimerTask+0x90>)
 80062cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062ce:	4b10      	ldr	r3, [pc, #64]	@ (8006310 <xTimerCreateTimerTask+0x90>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062d6:	2301      	movs	r3, #1
 80062d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	613b      	str	r3, [r7, #16]
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	e7fd      	b.n	80062f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062f8:	697b      	ldr	r3, [r7, #20]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20001bfc 	.word	0x20001bfc
 8006308:	08007cb4 	.word	0x08007cb4
 800630c:	0800644d 	.word	0x0800644d
 8006310:	20001c00 	.word	0x20001c00

08006314 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	@ 0x28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006322:	2300      	movs	r3, #0
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10b      	bne.n	8006344 <xTimerGenericCommand+0x30>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	623b      	str	r3, [r7, #32]
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	e7fd      	b.n	8006340 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006344:	4b19      	ldr	r3, [pc, #100]	@ (80063ac <xTimerGenericCommand+0x98>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d02a      	beq.n	80063a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b05      	cmp	r3, #5
 800635c:	dc18      	bgt.n	8006390 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800635e:	f7ff fead 	bl	80060bc <xTaskGetSchedulerState>
 8006362:	4603      	mov	r3, r0
 8006364:	2b02      	cmp	r3, #2
 8006366:	d109      	bne.n	800637c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006368:	4b10      	ldr	r3, [pc, #64]	@ (80063ac <xTimerGenericCommand+0x98>)
 800636a:	6818      	ldr	r0, [r3, #0]
 800636c:	f107 0110 	add.w	r1, r7, #16
 8006370:	2300      	movs	r3, #0
 8006372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006374:	f7fe fc28 	bl	8004bc8 <xQueueGenericSend>
 8006378:	6278      	str	r0, [r7, #36]	@ 0x24
 800637a:	e012      	b.n	80063a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800637c:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <xTimerGenericCommand+0x98>)
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	f107 0110 	add.w	r1, r7, #16
 8006384:	2300      	movs	r3, #0
 8006386:	2200      	movs	r2, #0
 8006388:	f7fe fc1e 	bl	8004bc8 <xQueueGenericSend>
 800638c:	6278      	str	r0, [r7, #36]	@ 0x24
 800638e:	e008      	b.n	80063a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006390:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <xTimerGenericCommand+0x98>)
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	f107 0110 	add.w	r1, r7, #16
 8006398:	2300      	movs	r3, #0
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	f7fe fd16 	bl	8004dcc <xQueueGenericSendFromISR>
 80063a0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3728      	adds	r7, #40	@ 0x28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20001bfc 	.word	0x20001bfc

080063b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af02      	add	r7, sp, #8
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ba:	4b23      	ldr	r3, [pc, #140]	@ (8006448 <prvProcessExpiredTimer+0x98>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe fa8d 	bl	80048e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d023      	beq.n	8006424 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	699a      	ldr	r2, [r3, #24]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	18d1      	adds	r1, r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	6978      	ldr	r0, [r7, #20]
 80063ea:	f000 f8d5 	bl	8006598 <prvInsertTimerInActiveList>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d020      	beq.n	8006436 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063f4:	2300      	movs	r3, #0
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	2300      	movs	r3, #0
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	2100      	movs	r1, #0
 80063fe:	6978      	ldr	r0, [r7, #20]
 8006400:	f7ff ff88 	bl	8006314 <xTimerGenericCommand>
 8006404:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d114      	bne.n	8006436 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60fb      	str	r3, [r7, #12]
}
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	e7fd      	b.n	8006420 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	6978      	ldr	r0, [r7, #20]
 800643c:	4798      	blx	r3
}
 800643e:	bf00      	nop
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20001bf4 	.word	0x20001bf4

0800644c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006454:	f107 0308 	add.w	r3, r7, #8
 8006458:	4618      	mov	r0, r3
 800645a:	f000 f859 	bl	8006510 <prvGetNextExpireTime>
 800645e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4619      	mov	r1, r3
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 f805 	bl	8006474 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800646a:	f000 f8d7 	bl	800661c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800646e:	bf00      	nop
 8006470:	e7f0      	b.n	8006454 <prvTimerTask+0x8>
	...

08006474 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800647e:	f7ff fa17 	bl	80058b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006482:	f107 0308 	add.w	r3, r7, #8
 8006486:	4618      	mov	r0, r3
 8006488:	f000 f866 	bl	8006558 <prvSampleTimeNow>
 800648c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d130      	bne.n	80064f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <prvProcessTimerOrBlockTask+0x3c>
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d806      	bhi.n	80064b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064a2:	f7ff fa13 	bl	80058cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff ff81 	bl	80063b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064ae:	e024      	b.n	80064fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d008      	beq.n	80064c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064b6:	4b13      	ldr	r3, [pc, #76]	@ (8006504 <prvProcessTimerOrBlockTask+0x90>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <prvProcessTimerOrBlockTask+0x50>
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <prvProcessTimerOrBlockTask+0x52>
 80064c4:	2300      	movs	r3, #0
 80064c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006508 <prvProcessTimerOrBlockTask+0x94>)
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	f7fe ff53 	bl	8005380 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064da:	f7ff f9f7 	bl	80058cc <xTaskResumeAll>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064e4:	4b09      	ldr	r3, [pc, #36]	@ (800650c <prvProcessTimerOrBlockTask+0x98>)
 80064e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	f3bf 8f6f 	isb	sy
}
 80064f4:	e001      	b.n	80064fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064f6:	f7ff f9e9 	bl	80058cc <xTaskResumeAll>
}
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20001bf8 	.word	0x20001bf8
 8006508:	20001bfc 	.word	0x20001bfc
 800650c:	e000ed04 	.word	0xe000ed04

08006510 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006518:	4b0e      	ldr	r3, [pc, #56]	@ (8006554 <prvGetNextExpireTime+0x44>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <prvGetNextExpireTime+0x16>
 8006522:	2201      	movs	r2, #1
 8006524:	e000      	b.n	8006528 <prvGetNextExpireTime+0x18>
 8006526:	2200      	movs	r2, #0
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006534:	4b07      	ldr	r3, [pc, #28]	@ (8006554 <prvGetNextExpireTime+0x44>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	e001      	b.n	8006544 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006544:	68fb      	ldr	r3, [r7, #12]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20001bf4 	.word	0x20001bf4

08006558 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006560:	f7ff fa52 	bl	8005a08 <xTaskGetTickCount>
 8006564:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006566:	4b0b      	ldr	r3, [pc, #44]	@ (8006594 <prvSampleTimeNow+0x3c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	429a      	cmp	r2, r3
 800656e:	d205      	bcs.n	800657c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006570:	f000 f93a 	bl	80067e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	e002      	b.n	8006582 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006582:	4a04      	ldr	r2, [pc, #16]	@ (8006594 <prvSampleTimeNow+0x3c>)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006588:	68fb      	ldr	r3, [r7, #12]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20001c04 	.word	0x20001c04

08006598 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d812      	bhi.n	80065e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d302      	bcc.n	80065d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065cc:	2301      	movs	r3, #1
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e01b      	b.n	800660a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065d2:	4b10      	ldr	r3, [pc, #64]	@ (8006614 <prvInsertTimerInActiveList+0x7c>)
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3304      	adds	r3, #4
 80065da:	4619      	mov	r1, r3
 80065dc:	4610      	mov	r0, r2
 80065de:	f7fe f94a 	bl	8004876 <vListInsert>
 80065e2:	e012      	b.n	800660a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d206      	bcs.n	80065fa <prvInsertTimerInActiveList+0x62>
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d302      	bcc.n	80065fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	e007      	b.n	800660a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065fa:	4b07      	ldr	r3, [pc, #28]	@ (8006618 <prvInsertTimerInActiveList+0x80>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3304      	adds	r3, #4
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f7fe f936 	bl	8004876 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800660a:	697b      	ldr	r3, [r7, #20]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20001bf8 	.word	0x20001bf8
 8006618:	20001bf4 	.word	0x20001bf4

0800661c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08e      	sub	sp, #56	@ 0x38
 8006620:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006622:	e0ce      	b.n	80067c2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	da19      	bge.n	800665e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800662a:	1d3b      	adds	r3, r7, #4
 800662c:	3304      	adds	r3, #4
 800662e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10b      	bne.n	800664e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	61fb      	str	r3, [r7, #28]
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	e7fd      	b.n	800664a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800664e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006654:	6850      	ldr	r0, [r2, #4]
 8006656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006658:	6892      	ldr	r2, [r2, #8]
 800665a:	4611      	mov	r1, r2
 800665c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	f2c0 80ae 	blt.w	80067c2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800666a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d004      	beq.n	800667c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	3304      	adds	r3, #4
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe f936 	bl	80048e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800667c:	463b      	mov	r3, r7
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff ff6a 	bl	8006558 <prvSampleTimeNow>
 8006684:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b09      	cmp	r3, #9
 800668a:	f200 8097 	bhi.w	80067bc <prvProcessReceivedCommands+0x1a0>
 800668e:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <prvProcessReceivedCommands+0x78>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066bd 	.word	0x080066bd
 8006698:	080066bd 	.word	0x080066bd
 800669c:	080066bd 	.word	0x080066bd
 80066a0:	08006733 	.word	0x08006733
 80066a4:	08006747 	.word	0x08006747
 80066a8:	08006793 	.word	0x08006793
 80066ac:	080066bd 	.word	0x080066bd
 80066b0:	080066bd 	.word	0x080066bd
 80066b4:	08006733 	.word	0x08006733
 80066b8:	08006747 	.word	0x08006747
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	18d1      	adds	r1, r2, r3
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066dc:	f7ff ff5c 	bl	8006598 <prvInsertTimerInActiveList>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d06c      	beq.n	80067c0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d061      	beq.n	80067c0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	441a      	add	r2, r3
 8006704:	2300      	movs	r3, #0
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	2300      	movs	r3, #0
 800670a:	2100      	movs	r1, #0
 800670c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800670e:	f7ff fe01 	bl	8006314 <xTimerGenericCommand>
 8006712:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d152      	bne.n	80067c0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	61bb      	str	r3, [r7, #24]
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	e7fd      	b.n	800672e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006734:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006738:	f023 0301 	bic.w	r3, r3, #1
 800673c:	b2da      	uxtb	r2, r3
 800673e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006740:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006744:	e03d      	b.n	80067c2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800674c:	f043 0301 	orr.w	r3, r3, #1
 8006750:	b2da      	uxtb	r2, r3
 8006752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006754:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800675e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10b      	bne.n	800677e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	617b      	str	r3, [r7, #20]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	18d1      	adds	r1, r2, r3
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800678c:	f7ff ff04 	bl	8006598 <prvInsertTimerInActiveList>
					break;
 8006790:	e017      	b.n	80067c2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006794:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d103      	bne.n	80067a8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80067a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067a2:	f000 fbe9 	bl	8006f78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80067a6:	e00c      	b.n	80067c2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067ae:	f023 0301 	bic.w	r3, r3, #1
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80067ba:	e002      	b.n	80067c2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80067bc:	bf00      	nop
 80067be:	e000      	b.n	80067c2 <prvProcessReceivedCommands+0x1a6>
					break;
 80067c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067c2:	4b08      	ldr	r3, [pc, #32]	@ (80067e4 <prvProcessReceivedCommands+0x1c8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	1d39      	adds	r1, r7, #4
 80067c8:	2200      	movs	r2, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe fb9c 	bl	8004f08 <xQueueReceive>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f47f af26 	bne.w	8006624 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	3730      	adds	r7, #48	@ 0x30
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20001bfc 	.word	0x20001bfc

080067e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067ee:	e049      	b.n	8006884 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067f0:	4b2e      	ldr	r3, [pc, #184]	@ (80068ac <prvSwitchTimerLists+0xc4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067fa:	4b2c      	ldr	r3, [pc, #176]	@ (80068ac <prvSwitchTimerLists+0xc4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3304      	adds	r3, #4
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe f86d 	bl	80048e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d02f      	beq.n	8006884 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	429a      	cmp	r2, r3
 8006834:	d90e      	bls.n	8006854 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006842:	4b1a      	ldr	r3, [pc, #104]	@ (80068ac <prvSwitchTimerLists+0xc4>)
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3304      	adds	r3, #4
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f7fe f812 	bl	8004876 <vListInsert>
 8006852:	e017      	b.n	8006884 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006854:	2300      	movs	r3, #0
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	2300      	movs	r3, #0
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	2100      	movs	r1, #0
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f7ff fd58 	bl	8006314 <xTimerGenericCommand>
 8006864:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10b      	bne.n	8006884 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	603b      	str	r3, [r7, #0]
}
 800687e:	bf00      	nop
 8006880:	bf00      	nop
 8006882:	e7fd      	b.n	8006880 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006884:	4b09      	ldr	r3, [pc, #36]	@ (80068ac <prvSwitchTimerLists+0xc4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1b0      	bne.n	80067f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800688e:	4b07      	ldr	r3, [pc, #28]	@ (80068ac <prvSwitchTimerLists+0xc4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006894:	4b06      	ldr	r3, [pc, #24]	@ (80068b0 <prvSwitchTimerLists+0xc8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a04      	ldr	r2, [pc, #16]	@ (80068ac <prvSwitchTimerLists+0xc4>)
 800689a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800689c:	4a04      	ldr	r2, [pc, #16]	@ (80068b0 <prvSwitchTimerLists+0xc8>)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	6013      	str	r3, [r2, #0]
}
 80068a2:	bf00      	nop
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20001bf4 	.word	0x20001bf4
 80068b0:	20001bf8 	.word	0x20001bf8

080068b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80068ba:	f000 f96d 	bl	8006b98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068be:	4b15      	ldr	r3, [pc, #84]	@ (8006914 <prvCheckForValidListAndQueue+0x60>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d120      	bne.n	8006908 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068c6:	4814      	ldr	r0, [pc, #80]	@ (8006918 <prvCheckForValidListAndQueue+0x64>)
 80068c8:	f7fd ff84 	bl	80047d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068cc:	4813      	ldr	r0, [pc, #76]	@ (800691c <prvCheckForValidListAndQueue+0x68>)
 80068ce:	f7fd ff81 	bl	80047d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068d2:	4b13      	ldr	r3, [pc, #76]	@ (8006920 <prvCheckForValidListAndQueue+0x6c>)
 80068d4:	4a10      	ldr	r2, [pc, #64]	@ (8006918 <prvCheckForValidListAndQueue+0x64>)
 80068d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068d8:	4b12      	ldr	r3, [pc, #72]	@ (8006924 <prvCheckForValidListAndQueue+0x70>)
 80068da:	4a10      	ldr	r2, [pc, #64]	@ (800691c <prvCheckForValidListAndQueue+0x68>)
 80068dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068de:	2300      	movs	r3, #0
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	4b11      	ldr	r3, [pc, #68]	@ (8006928 <prvCheckForValidListAndQueue+0x74>)
 80068e4:	4a11      	ldr	r2, [pc, #68]	@ (800692c <prvCheckForValidListAndQueue+0x78>)
 80068e6:	2110      	movs	r1, #16
 80068e8:	200a      	movs	r0, #10
 80068ea:	f7fe f891 	bl	8004a10 <xQueueGenericCreateStatic>
 80068ee:	4603      	mov	r3, r0
 80068f0:	4a08      	ldr	r2, [pc, #32]	@ (8006914 <prvCheckForValidListAndQueue+0x60>)
 80068f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068f4:	4b07      	ldr	r3, [pc, #28]	@ (8006914 <prvCheckForValidListAndQueue+0x60>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068fc:	4b05      	ldr	r3, [pc, #20]	@ (8006914 <prvCheckForValidListAndQueue+0x60>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	490b      	ldr	r1, [pc, #44]	@ (8006930 <prvCheckForValidListAndQueue+0x7c>)
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe fd12 	bl	800532c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006908:	f000 f978 	bl	8006bfc <vPortExitCritical>
}
 800690c:	bf00      	nop
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20001bfc 	.word	0x20001bfc
 8006918:	20001bcc 	.word	0x20001bcc
 800691c:	20001be0 	.word	0x20001be0
 8006920:	20001bf4 	.word	0x20001bf4
 8006924:	20001bf8 	.word	0x20001bf8
 8006928:	20001ca8 	.word	0x20001ca8
 800692c:	20001c08 	.word	0x20001c08
 8006930:	08007cbc 	.word	0x08007cbc

08006934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3b04      	subs	r3, #4
 8006944:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800694c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3b04      	subs	r3, #4
 8006952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f023 0201 	bic.w	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3b04      	subs	r3, #4
 8006962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006964:	4a0c      	ldr	r2, [pc, #48]	@ (8006998 <pxPortInitialiseStack+0x64>)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3b14      	subs	r3, #20
 800696e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3b04      	subs	r3, #4
 800697a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f06f 0202 	mvn.w	r2, #2
 8006982:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3b20      	subs	r3, #32
 8006988:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800698a:	68fb      	ldr	r3, [r7, #12]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	0800699d 	.word	0x0800699d

0800699c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069a6:	4b13      	ldr	r3, [pc, #76]	@ (80069f4 <prvTaskExitError+0x58>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069ae:	d00b      	beq.n	80069c8 <prvTaskExitError+0x2c>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	60fb      	str	r3, [r7, #12]
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <prvTaskExitError+0x28>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	60bb      	str	r3, [r7, #8]
}
 80069da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069dc:	bf00      	nop
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0fc      	beq.n	80069de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	2000000c 	.word	0x2000000c
	...

08006a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a00:	4b07      	ldr	r3, [pc, #28]	@ (8006a20 <pxCurrentTCBConst2>)
 8006a02:	6819      	ldr	r1, [r3, #0]
 8006a04:	6808      	ldr	r0, [r1, #0]
 8006a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	f380 8809 	msr	PSP, r0
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f380 8811 	msr	BASEPRI, r0
 8006a1a:	4770      	bx	lr
 8006a1c:	f3af 8000 	nop.w

08006a20 <pxCurrentTCBConst2>:
 8006a20:	200016cc 	.word	0x200016cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a28:	4808      	ldr	r0, [pc, #32]	@ (8006a4c <prvPortStartFirstTask+0x24>)
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	6800      	ldr	r0, [r0, #0]
 8006a2e:	f380 8808 	msr	MSP, r0
 8006a32:	f04f 0000 	mov.w	r0, #0
 8006a36:	f380 8814 	msr	CONTROL, r0
 8006a3a:	b662      	cpsie	i
 8006a3c:	b661      	cpsie	f
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	df00      	svc	0
 8006a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a4a:	bf00      	nop
 8006a4c:	e000ed08 	.word	0xe000ed08

08006a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a56:	4b47      	ldr	r3, [pc, #284]	@ (8006b74 <xPortStartScheduler+0x124>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a47      	ldr	r2, [pc, #284]	@ (8006b78 <xPortStartScheduler+0x128>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d10b      	bne.n	8006a78 <xPortStartScheduler+0x28>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	613b      	str	r3, [r7, #16]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a78:	4b3e      	ldr	r3, [pc, #248]	@ (8006b74 <xPortStartScheduler+0x124>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b7c <xPortStartScheduler+0x12c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d10b      	bne.n	8006a9a <xPortStartScheduler+0x4a>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60fb      	str	r3, [r7, #12]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a9a:	4b39      	ldr	r3, [pc, #228]	@ (8006b80 <xPortStartScheduler+0x130>)
 8006a9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	22ff      	movs	r2, #255	@ 0xff
 8006aaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	4b31      	ldr	r3, [pc, #196]	@ (8006b84 <xPortStartScheduler+0x134>)
 8006ac0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ac2:	4b31      	ldr	r3, [pc, #196]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ac8:	e009      	b.n	8006ade <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006aca:	4b2f      	ldr	r3, [pc, #188]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006ad2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae6:	2b80      	cmp	r3, #128	@ 0x80
 8006ae8:	d0ef      	beq.n	8006aca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aea:	4b27      	ldr	r3, [pc, #156]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f1c3 0307 	rsb	r3, r3, #7
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d00b      	beq.n	8006b0e <xPortStartScheduler+0xbe>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60bb      	str	r3, [r7, #8]
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	4a1c      	ldr	r2, [pc, #112]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b18:	4b1b      	ldr	r3, [pc, #108]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b20:	4a19      	ldr	r2, [pc, #100]	@ (8006b88 <xPortStartScheduler+0x138>)
 8006b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b2c:	4b17      	ldr	r3, [pc, #92]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a16      	ldr	r2, [pc, #88]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b38:	4b14      	ldr	r3, [pc, #80]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a13      	ldr	r2, [pc, #76]	@ (8006b8c <xPortStartScheduler+0x13c>)
 8006b3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b44:	f000 f8da 	bl	8006cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b48:	4b11      	ldr	r3, [pc, #68]	@ (8006b90 <xPortStartScheduler+0x140>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b4e:	f000 f8f9 	bl	8006d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b52:	4b10      	ldr	r3, [pc, #64]	@ (8006b94 <xPortStartScheduler+0x144>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a0f      	ldr	r2, [pc, #60]	@ (8006b94 <xPortStartScheduler+0x144>)
 8006b58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b5e:	f7ff ff63 	bl	8006a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b62:	f7ff f82d 	bl	8005bc0 <vTaskSwitchContext>
	prvTaskExitError();
 8006b66:	f7ff ff19 	bl	800699c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	e000ed00 	.word	0xe000ed00
 8006b78:	410fc271 	.word	0x410fc271
 8006b7c:	410fc270 	.word	0x410fc270
 8006b80:	e000e400 	.word	0xe000e400
 8006b84:	20001cf8 	.word	0x20001cf8
 8006b88:	20001cfc 	.word	0x20001cfc
 8006b8c:	e000ed20 	.word	0xe000ed20
 8006b90:	2000000c 	.word	0x2000000c
 8006b94:	e000ef34 	.word	0xe000ef34

08006b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bb2:	4b10      	ldr	r3, [pc, #64]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <vPortEnterCritical+0x5c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d110      	bne.n	8006be6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <vPortEnterCritical+0x60>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	603b      	str	r3, [r7, #0]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <vPortEnterCritical+0x4a>
	}
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	2000000c 	.word	0x2000000c
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c02:	4b12      	ldr	r3, [pc, #72]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10b      	bne.n	8006c22 <vPortExitCritical+0x26>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	607b      	str	r3, [r7, #4]
}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	e7fd      	b.n	8006c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c22:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4a08      	ldr	r2, [pc, #32]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c2c:	4b07      	ldr	r3, [pc, #28]	@ (8006c4c <vPortExitCritical+0x50>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d105      	bne.n	8006c40 <vPortExitCritical+0x44>
 8006c34:	2300      	movs	r3, #0
 8006c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	f383 8811 	msr	BASEPRI, r3
}
 8006c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	2000000c 	.word	0x2000000c

08006c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c50:	f3ef 8009 	mrs	r0, PSP
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	4b15      	ldr	r3, [pc, #84]	@ (8006cb0 <pxCurrentTCBConst>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	f01e 0f10 	tst.w	lr, #16
 8006c60:	bf08      	it	eq
 8006c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	6010      	str	r0, [r2, #0]
 8006c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c74:	f380 8811 	msr	BASEPRI, r0
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f7fe ff9e 	bl	8005bc0 <vTaskSwitchContext>
 8006c84:	f04f 0000 	mov.w	r0, #0
 8006c88:	f380 8811 	msr	BASEPRI, r0
 8006c8c:	bc09      	pop	{r0, r3}
 8006c8e:	6819      	ldr	r1, [r3, #0]
 8006c90:	6808      	ldr	r0, [r1, #0]
 8006c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c96:	f01e 0f10 	tst.w	lr, #16
 8006c9a:	bf08      	it	eq
 8006c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ca0:	f380 8809 	msr	PSP, r0
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	f3af 8000 	nop.w

08006cb0 <pxCurrentTCBConst>:
 8006cb0:	200016cc 	.word	0x200016cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
}
 8006cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cd2:	f7fe febb 	bl	8005a4c <xTaskIncrementTick>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cdc:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <xPortSysTickHandler+0x40>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f383 8811 	msr	BASEPRI, r3
}
 8006cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d00:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d06:	4b0b      	ldr	r3, [pc, #44]	@ (8006d34 <vPortSetupTimerInterrupt+0x38>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d38 <vPortSetupTimerInterrupt+0x3c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a0a      	ldr	r2, [pc, #40]	@ (8006d3c <vPortSetupTimerInterrupt+0x40>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	099b      	lsrs	r3, r3, #6
 8006d18:	4a09      	ldr	r2, [pc, #36]	@ (8006d40 <vPortSetupTimerInterrupt+0x44>)
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d1e:	4b04      	ldr	r3, [pc, #16]	@ (8006d30 <vPortSetupTimerInterrupt+0x34>)
 8006d20:	2207      	movs	r2, #7
 8006d22:	601a      	str	r2, [r3, #0]
}
 8006d24:	bf00      	nop
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	e000e010 	.word	0xe000e010
 8006d34:	e000e018 	.word	0xe000e018
 8006d38:	20000000 	.word	0x20000000
 8006d3c:	10624dd3 	.word	0x10624dd3
 8006d40:	e000e014 	.word	0xe000e014

08006d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d54 <vPortEnableVFP+0x10>
 8006d48:	6801      	ldr	r1, [r0, #0]
 8006d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d4e:	6001      	str	r1, [r0, #0]
 8006d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d52:	bf00      	nop
 8006d54:	e000ed88 	.word	0xe000ed88

08006d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d5e:	f3ef 8305 	mrs	r3, IPSR
 8006d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b0f      	cmp	r3, #15
 8006d68:	d915      	bls.n	8006d96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d6a:	4a18      	ldr	r2, [pc, #96]	@ (8006dcc <vPortValidateInterruptPriority+0x74>)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d74:	4b16      	ldr	r3, [pc, #88]	@ (8006dd0 <vPortValidateInterruptPriority+0x78>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	7afa      	ldrb	r2, [r7, #11]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d20b      	bcs.n	8006d96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	607b      	str	r3, [r7, #4]
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	e7fd      	b.n	8006d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d96:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd4 <vPortValidateInterruptPriority+0x7c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd8 <vPortValidateInterruptPriority+0x80>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d90b      	bls.n	8006dbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	603b      	str	r3, [r7, #0]
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	e7fd      	b.n	8006dba <vPortValidateInterruptPriority+0x62>
	}
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	e000e3f0 	.word	0xe000e3f0
 8006dd0:	20001cf8 	.word	0x20001cf8
 8006dd4:	e000ed0c 	.word	0xe000ed0c
 8006dd8:	20001cfc 	.word	0x20001cfc

08006ddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	@ 0x28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006de8:	f7fe fd62 	bl	80058b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dec:	4b5c      	ldr	r3, [pc, #368]	@ (8006f60 <pvPortMalloc+0x184>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006df4:	f000 f924 	bl	8007040 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006df8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f64 <pvPortMalloc+0x188>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f040 8095 	bne.w	8006f30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01e      	beq.n	8006e4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4413      	add	r3, r2
 8006e12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d015      	beq.n	8006e4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f023 0307 	bic.w	r3, r3, #7
 8006e24:	3308      	adds	r3, #8
 8006e26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00b      	beq.n	8006e4a <pvPortMalloc+0x6e>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	617b      	str	r3, [r7, #20]
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	e7fd      	b.n	8006e46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d06f      	beq.n	8006f30 <pvPortMalloc+0x154>
 8006e50:	4b45      	ldr	r3, [pc, #276]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d86a      	bhi.n	8006f30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e5a:	4b44      	ldr	r3, [pc, #272]	@ (8006f6c <pvPortMalloc+0x190>)
 8006e5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e5e:	4b43      	ldr	r3, [pc, #268]	@ (8006f6c <pvPortMalloc+0x190>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e64:	e004      	b.n	8006e70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d903      	bls.n	8006e82 <pvPortMalloc+0xa6>
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f1      	bne.n	8006e66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e82:	4b37      	ldr	r3, [pc, #220]	@ (8006f60 <pvPortMalloc+0x184>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d051      	beq.n	8006f30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2208      	movs	r2, #8
 8006e92:	4413      	add	r3, r2
 8006e94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	2308      	movs	r3, #8
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d920      	bls.n	8006ef0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f003 0307 	and.w	r3, r3, #7
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <pvPortMalloc+0xfc>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	613b      	str	r3, [r7, #16]
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	e7fd      	b.n	8006ed4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006eea:	69b8      	ldr	r0, [r7, #24]
 8006eec:	f000 f90a 	bl	8007104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	4a1b      	ldr	r2, [pc, #108]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006efc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006efe:	4b1a      	ldr	r3, [pc, #104]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b1b      	ldr	r3, [pc, #108]	@ (8006f70 <pvPortMalloc+0x194>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d203      	bcs.n	8006f12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f0a:	4b17      	ldr	r3, [pc, #92]	@ (8006f68 <pvPortMalloc+0x18c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a18      	ldr	r2, [pc, #96]	@ (8006f70 <pvPortMalloc+0x194>)
 8006f10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	4b13      	ldr	r3, [pc, #76]	@ (8006f64 <pvPortMalloc+0x188>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f26:	4b13      	ldr	r3, [pc, #76]	@ (8006f74 <pvPortMalloc+0x198>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	4a11      	ldr	r2, [pc, #68]	@ (8006f74 <pvPortMalloc+0x198>)
 8006f2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f30:	f7fe fccc 	bl	80058cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <pvPortMalloc+0x17a>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	60fb      	str	r3, [r7, #12]
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	e7fd      	b.n	8006f52 <pvPortMalloc+0x176>
	return pvReturn;
 8006f56:	69fb      	ldr	r3, [r7, #28]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3728      	adds	r7, #40	@ 0x28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20005908 	.word	0x20005908
 8006f64:	2000591c 	.word	0x2000591c
 8006f68:	2000590c 	.word	0x2000590c
 8006f6c:	20005900 	.word	0x20005900
 8006f70:	20005910 	.word	0x20005910
 8006f74:	20005914 	.word	0x20005914

08006f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d04f      	beq.n	800702a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	425b      	negs	r3, r3
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4413      	add	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	4b25      	ldr	r3, [pc, #148]	@ (8007034 <vPortFree+0xbc>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <vPortFree+0x46>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	60fb      	str	r3, [r7, #12]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <vPortFree+0x66>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	60bb      	str	r3, [r7, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	e7fd      	b.n	8006fda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	4b14      	ldr	r3, [pc, #80]	@ (8007034 <vPortFree+0xbc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01e      	beq.n	800702a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11a      	bne.n	800702a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8007034 <vPortFree+0xbc>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	401a      	ands	r2, r3
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007004:	f7fe fc54 	bl	80058b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	4b0a      	ldr	r3, [pc, #40]	@ (8007038 <vPortFree+0xc0>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4413      	add	r3, r2
 8007012:	4a09      	ldr	r2, [pc, #36]	@ (8007038 <vPortFree+0xc0>)
 8007014:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007016:	6938      	ldr	r0, [r7, #16]
 8007018:	f000 f874 	bl	8007104 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800701c:	4b07      	ldr	r3, [pc, #28]	@ (800703c <vPortFree+0xc4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3301      	adds	r3, #1
 8007022:	4a06      	ldr	r2, [pc, #24]	@ (800703c <vPortFree+0xc4>)
 8007024:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007026:	f7fe fc51 	bl	80058cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800702a:	bf00      	nop
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	2000591c 	.word	0x2000591c
 8007038:	2000590c 	.word	0x2000590c
 800703c:	20005918 	.word	0x20005918

08007040 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007046:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800704a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800704c:	4b27      	ldr	r3, [pc, #156]	@ (80070ec <prvHeapInit+0xac>)
 800704e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00c      	beq.n	8007074 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3307      	adds	r3, #7
 800705e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0307 	bic.w	r3, r3, #7
 8007066:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	4a1f      	ldr	r2, [pc, #124]	@ (80070ec <prvHeapInit+0xac>)
 8007070:	4413      	add	r3, r2
 8007072:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007078:	4a1d      	ldr	r2, [pc, #116]	@ (80070f0 <prvHeapInit+0xb0>)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800707e:	4b1c      	ldr	r3, [pc, #112]	@ (80070f0 <prvHeapInit+0xb0>)
 8007080:	2200      	movs	r2, #0
 8007082:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	4413      	add	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800708c:	2208      	movs	r2, #8
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1a9b      	subs	r3, r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0307 	bic.w	r3, r3, #7
 800709a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a15      	ldr	r2, [pc, #84]	@ (80070f4 <prvHeapInit+0xb4>)
 80070a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070a2:	4b14      	ldr	r3, [pc, #80]	@ (80070f4 <prvHeapInit+0xb4>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070aa:	4b12      	ldr	r3, [pc, #72]	@ (80070f4 <prvHeapInit+0xb4>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	1ad2      	subs	r2, r2, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070c0:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <prvHeapInit+0xb4>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	4a0a      	ldr	r2, [pc, #40]	@ (80070f8 <prvHeapInit+0xb8>)
 80070ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	4a09      	ldr	r2, [pc, #36]	@ (80070fc <prvHeapInit+0xbc>)
 80070d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070d8:	4b09      	ldr	r3, [pc, #36]	@ (8007100 <prvHeapInit+0xc0>)
 80070da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80070de:	601a      	str	r2, [r3, #0]
}
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	20001d00 	.word	0x20001d00
 80070f0:	20005900 	.word	0x20005900
 80070f4:	20005908 	.word	0x20005908
 80070f8:	20005910 	.word	0x20005910
 80070fc:	2000590c 	.word	0x2000590c
 8007100:	2000591c 	.word	0x2000591c

08007104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800710c:	4b28      	ldr	r3, [pc, #160]	@ (80071b0 <prvInsertBlockIntoFreeList+0xac>)
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e002      	b.n	8007118 <prvInsertBlockIntoFreeList+0x14>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	429a      	cmp	r2, r3
 8007120:	d8f7      	bhi.n	8007112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4413      	add	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d108      	bne.n	8007146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	441a      	add	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	441a      	add	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d118      	bne.n	800718c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	4b15      	ldr	r3, [pc, #84]	@ (80071b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d00d      	beq.n	8007182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	441a      	add	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	e008      	b.n	8007194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007182:	4b0c      	ldr	r3, [pc, #48]	@ (80071b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	e003      	b.n	8007194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	429a      	cmp	r2, r3
 800719a:	d002      	beq.n	80071a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071a2:	bf00      	nop
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20005900 	.word	0x20005900
 80071b4:	20005908 	.word	0x20005908

080071b8 <_vsniprintf_r>:
 80071b8:	b530      	push	{r4, r5, lr}
 80071ba:	4614      	mov	r4, r2
 80071bc:	2c00      	cmp	r4, #0
 80071be:	b09b      	sub	sp, #108	@ 0x6c
 80071c0:	4605      	mov	r5, r0
 80071c2:	461a      	mov	r2, r3
 80071c4:	da05      	bge.n	80071d2 <_vsniprintf_r+0x1a>
 80071c6:	238b      	movs	r3, #139	@ 0x8b
 80071c8:	6003      	str	r3, [r0, #0]
 80071ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071ce:	b01b      	add	sp, #108	@ 0x6c
 80071d0:	bd30      	pop	{r4, r5, pc}
 80071d2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80071d6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80071da:	bf14      	ite	ne
 80071dc:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80071e0:	4623      	moveq	r3, r4
 80071e2:	9302      	str	r3, [sp, #8]
 80071e4:	9305      	str	r3, [sp, #20]
 80071e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80071ea:	9100      	str	r1, [sp, #0]
 80071ec:	9104      	str	r1, [sp, #16]
 80071ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 80071f2:	4669      	mov	r1, sp
 80071f4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80071f6:	f000 f957 	bl	80074a8 <_svfiprintf_r>
 80071fa:	1c43      	adds	r3, r0, #1
 80071fc:	bfbc      	itt	lt
 80071fe:	238b      	movlt	r3, #139	@ 0x8b
 8007200:	602b      	strlt	r3, [r5, #0]
 8007202:	2c00      	cmp	r4, #0
 8007204:	d0e3      	beq.n	80071ce <_vsniprintf_r+0x16>
 8007206:	9b00      	ldr	r3, [sp, #0]
 8007208:	2200      	movs	r2, #0
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e7df      	b.n	80071ce <_vsniprintf_r+0x16>
	...

08007210 <vsniprintf>:
 8007210:	b507      	push	{r0, r1, r2, lr}
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	460a      	mov	r2, r1
 8007218:	4601      	mov	r1, r0
 800721a:	4803      	ldr	r0, [pc, #12]	@ (8007228 <vsniprintf+0x18>)
 800721c:	6800      	ldr	r0, [r0, #0]
 800721e:	f7ff ffcb 	bl	80071b8 <_vsniprintf_r>
 8007222:	b003      	add	sp, #12
 8007224:	f85d fb04 	ldr.w	pc, [sp], #4
 8007228:	20000010 	.word	0x20000010

0800722c <memset>:
 800722c:	4402      	add	r2, r0
 800722e:	4603      	mov	r3, r0
 8007230:	4293      	cmp	r3, r2
 8007232:	d100      	bne.n	8007236 <memset+0xa>
 8007234:	4770      	bx	lr
 8007236:	f803 1b01 	strb.w	r1, [r3], #1
 800723a:	e7f9      	b.n	8007230 <memset+0x4>

0800723c <_reclaim_reent>:
 800723c:	4b29      	ldr	r3, [pc, #164]	@ (80072e4 <_reclaim_reent+0xa8>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4283      	cmp	r3, r0
 8007242:	b570      	push	{r4, r5, r6, lr}
 8007244:	4604      	mov	r4, r0
 8007246:	d04b      	beq.n	80072e0 <_reclaim_reent+0xa4>
 8007248:	69c3      	ldr	r3, [r0, #28]
 800724a:	b1ab      	cbz	r3, 8007278 <_reclaim_reent+0x3c>
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	b16b      	cbz	r3, 800726c <_reclaim_reent+0x30>
 8007250:	2500      	movs	r5, #0
 8007252:	69e3      	ldr	r3, [r4, #28]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	5959      	ldr	r1, [r3, r5]
 8007258:	2900      	cmp	r1, #0
 800725a:	d13b      	bne.n	80072d4 <_reclaim_reent+0x98>
 800725c:	3504      	adds	r5, #4
 800725e:	2d80      	cmp	r5, #128	@ 0x80
 8007260:	d1f7      	bne.n	8007252 <_reclaim_reent+0x16>
 8007262:	69e3      	ldr	r3, [r4, #28]
 8007264:	4620      	mov	r0, r4
 8007266:	68d9      	ldr	r1, [r3, #12]
 8007268:	f000 f878 	bl	800735c <_free_r>
 800726c:	69e3      	ldr	r3, [r4, #28]
 800726e:	6819      	ldr	r1, [r3, #0]
 8007270:	b111      	cbz	r1, 8007278 <_reclaim_reent+0x3c>
 8007272:	4620      	mov	r0, r4
 8007274:	f000 f872 	bl	800735c <_free_r>
 8007278:	6961      	ldr	r1, [r4, #20]
 800727a:	b111      	cbz	r1, 8007282 <_reclaim_reent+0x46>
 800727c:	4620      	mov	r0, r4
 800727e:	f000 f86d 	bl	800735c <_free_r>
 8007282:	69e1      	ldr	r1, [r4, #28]
 8007284:	b111      	cbz	r1, 800728c <_reclaim_reent+0x50>
 8007286:	4620      	mov	r0, r4
 8007288:	f000 f868 	bl	800735c <_free_r>
 800728c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800728e:	b111      	cbz	r1, 8007296 <_reclaim_reent+0x5a>
 8007290:	4620      	mov	r0, r4
 8007292:	f000 f863 	bl	800735c <_free_r>
 8007296:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007298:	b111      	cbz	r1, 80072a0 <_reclaim_reent+0x64>
 800729a:	4620      	mov	r0, r4
 800729c:	f000 f85e 	bl	800735c <_free_r>
 80072a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80072a2:	b111      	cbz	r1, 80072aa <_reclaim_reent+0x6e>
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 f859 	bl	800735c <_free_r>
 80072aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80072ac:	b111      	cbz	r1, 80072b4 <_reclaim_reent+0x78>
 80072ae:	4620      	mov	r0, r4
 80072b0:	f000 f854 	bl	800735c <_free_r>
 80072b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80072b6:	b111      	cbz	r1, 80072be <_reclaim_reent+0x82>
 80072b8:	4620      	mov	r0, r4
 80072ba:	f000 f84f 	bl	800735c <_free_r>
 80072be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80072c0:	b111      	cbz	r1, 80072c8 <_reclaim_reent+0x8c>
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 f84a 	bl	800735c <_free_r>
 80072c8:	6a23      	ldr	r3, [r4, #32]
 80072ca:	b14b      	cbz	r3, 80072e0 <_reclaim_reent+0xa4>
 80072cc:	4620      	mov	r0, r4
 80072ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072d2:	4718      	bx	r3
 80072d4:	680e      	ldr	r6, [r1, #0]
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 f840 	bl	800735c <_free_r>
 80072dc:	4631      	mov	r1, r6
 80072de:	e7bb      	b.n	8007258 <_reclaim_reent+0x1c>
 80072e0:	bd70      	pop	{r4, r5, r6, pc}
 80072e2:	bf00      	nop
 80072e4:	20000010 	.word	0x20000010

080072e8 <__errno>:
 80072e8:	4b01      	ldr	r3, [pc, #4]	@ (80072f0 <__errno+0x8>)
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	20000010 	.word	0x20000010

080072f4 <__libc_init_array>:
 80072f4:	b570      	push	{r4, r5, r6, lr}
 80072f6:	4d0d      	ldr	r5, [pc, #52]	@ (800732c <__libc_init_array+0x38>)
 80072f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007330 <__libc_init_array+0x3c>)
 80072fa:	1b64      	subs	r4, r4, r5
 80072fc:	10a4      	asrs	r4, r4, #2
 80072fe:	2600      	movs	r6, #0
 8007300:	42a6      	cmp	r6, r4
 8007302:	d109      	bne.n	8007318 <__libc_init_array+0x24>
 8007304:	4d0b      	ldr	r5, [pc, #44]	@ (8007334 <__libc_init_array+0x40>)
 8007306:	4c0c      	ldr	r4, [pc, #48]	@ (8007338 <__libc_init_array+0x44>)
 8007308:	f000 fc66 	bl	8007bd8 <_init>
 800730c:	1b64      	subs	r4, r4, r5
 800730e:	10a4      	asrs	r4, r4, #2
 8007310:	2600      	movs	r6, #0
 8007312:	42a6      	cmp	r6, r4
 8007314:	d105      	bne.n	8007322 <__libc_init_array+0x2e>
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	f855 3b04 	ldr.w	r3, [r5], #4
 800731c:	4798      	blx	r3
 800731e:	3601      	adds	r6, #1
 8007320:	e7ee      	b.n	8007300 <__libc_init_array+0xc>
 8007322:	f855 3b04 	ldr.w	r3, [r5], #4
 8007326:	4798      	blx	r3
 8007328:	3601      	adds	r6, #1
 800732a:	e7f2      	b.n	8007312 <__libc_init_array+0x1e>
 800732c:	08007d84 	.word	0x08007d84
 8007330:	08007d84 	.word	0x08007d84
 8007334:	08007d84 	.word	0x08007d84
 8007338:	08007d88 	.word	0x08007d88

0800733c <__retarget_lock_acquire_recursive>:
 800733c:	4770      	bx	lr

0800733e <__retarget_lock_release_recursive>:
 800733e:	4770      	bx	lr

08007340 <memcpy>:
 8007340:	440a      	add	r2, r1
 8007342:	4291      	cmp	r1, r2
 8007344:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007348:	d100      	bne.n	800734c <memcpy+0xc>
 800734a:	4770      	bx	lr
 800734c:	b510      	push	{r4, lr}
 800734e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007356:	4291      	cmp	r1, r2
 8007358:	d1f9      	bne.n	800734e <memcpy+0xe>
 800735a:	bd10      	pop	{r4, pc}

0800735c <_free_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4605      	mov	r5, r0
 8007360:	2900      	cmp	r1, #0
 8007362:	d041      	beq.n	80073e8 <_free_r+0x8c>
 8007364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007368:	1f0c      	subs	r4, r1, #4
 800736a:	2b00      	cmp	r3, #0
 800736c:	bfb8      	it	lt
 800736e:	18e4      	addlt	r4, r4, r3
 8007370:	f000 fbc6 	bl	8007b00 <__malloc_lock>
 8007374:	4a1d      	ldr	r2, [pc, #116]	@ (80073ec <_free_r+0x90>)
 8007376:	6813      	ldr	r3, [r2, #0]
 8007378:	b933      	cbnz	r3, 8007388 <_free_r+0x2c>
 800737a:	6063      	str	r3, [r4, #4]
 800737c:	6014      	str	r4, [r2, #0]
 800737e:	4628      	mov	r0, r5
 8007380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007384:	f000 bbc2 	b.w	8007b0c <__malloc_unlock>
 8007388:	42a3      	cmp	r3, r4
 800738a:	d908      	bls.n	800739e <_free_r+0x42>
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	1821      	adds	r1, r4, r0
 8007390:	428b      	cmp	r3, r1
 8007392:	bf01      	itttt	eq
 8007394:	6819      	ldreq	r1, [r3, #0]
 8007396:	685b      	ldreq	r3, [r3, #4]
 8007398:	1809      	addeq	r1, r1, r0
 800739a:	6021      	streq	r1, [r4, #0]
 800739c:	e7ed      	b.n	800737a <_free_r+0x1e>
 800739e:	461a      	mov	r2, r3
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	b10b      	cbz	r3, 80073a8 <_free_r+0x4c>
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	d9fa      	bls.n	800739e <_free_r+0x42>
 80073a8:	6811      	ldr	r1, [r2, #0]
 80073aa:	1850      	adds	r0, r2, r1
 80073ac:	42a0      	cmp	r0, r4
 80073ae:	d10b      	bne.n	80073c8 <_free_r+0x6c>
 80073b0:	6820      	ldr	r0, [r4, #0]
 80073b2:	4401      	add	r1, r0
 80073b4:	1850      	adds	r0, r2, r1
 80073b6:	4283      	cmp	r3, r0
 80073b8:	6011      	str	r1, [r2, #0]
 80073ba:	d1e0      	bne.n	800737e <_free_r+0x22>
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	6053      	str	r3, [r2, #4]
 80073c2:	4408      	add	r0, r1
 80073c4:	6010      	str	r0, [r2, #0]
 80073c6:	e7da      	b.n	800737e <_free_r+0x22>
 80073c8:	d902      	bls.n	80073d0 <_free_r+0x74>
 80073ca:	230c      	movs	r3, #12
 80073cc:	602b      	str	r3, [r5, #0]
 80073ce:	e7d6      	b.n	800737e <_free_r+0x22>
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	1821      	adds	r1, r4, r0
 80073d4:	428b      	cmp	r3, r1
 80073d6:	bf04      	itt	eq
 80073d8:	6819      	ldreq	r1, [r3, #0]
 80073da:	685b      	ldreq	r3, [r3, #4]
 80073dc:	6063      	str	r3, [r4, #4]
 80073de:	bf04      	itt	eq
 80073e0:	1809      	addeq	r1, r1, r0
 80073e2:	6021      	streq	r1, [r4, #0]
 80073e4:	6054      	str	r4, [r2, #4]
 80073e6:	e7ca      	b.n	800737e <_free_r+0x22>
 80073e8:	bd38      	pop	{r3, r4, r5, pc}
 80073ea:	bf00      	nop
 80073ec:	20005a64 	.word	0x20005a64

080073f0 <__ssputs_r>:
 80073f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f4:	688e      	ldr	r6, [r1, #8]
 80073f6:	461f      	mov	r7, r3
 80073f8:	42be      	cmp	r6, r7
 80073fa:	680b      	ldr	r3, [r1, #0]
 80073fc:	4682      	mov	sl, r0
 80073fe:	460c      	mov	r4, r1
 8007400:	4690      	mov	r8, r2
 8007402:	d82d      	bhi.n	8007460 <__ssputs_r+0x70>
 8007404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007408:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800740c:	d026      	beq.n	800745c <__ssputs_r+0x6c>
 800740e:	6965      	ldr	r5, [r4, #20]
 8007410:	6909      	ldr	r1, [r1, #16]
 8007412:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007416:	eba3 0901 	sub.w	r9, r3, r1
 800741a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800741e:	1c7b      	adds	r3, r7, #1
 8007420:	444b      	add	r3, r9
 8007422:	106d      	asrs	r5, r5, #1
 8007424:	429d      	cmp	r5, r3
 8007426:	bf38      	it	cc
 8007428:	461d      	movcc	r5, r3
 800742a:	0553      	lsls	r3, r2, #21
 800742c:	d527      	bpl.n	800747e <__ssputs_r+0x8e>
 800742e:	4629      	mov	r1, r5
 8007430:	f000 f958 	bl	80076e4 <_malloc_r>
 8007434:	4606      	mov	r6, r0
 8007436:	b360      	cbz	r0, 8007492 <__ssputs_r+0xa2>
 8007438:	6921      	ldr	r1, [r4, #16]
 800743a:	464a      	mov	r2, r9
 800743c:	f7ff ff80 	bl	8007340 <memcpy>
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800744a:	81a3      	strh	r3, [r4, #12]
 800744c:	6126      	str	r6, [r4, #16]
 800744e:	6165      	str	r5, [r4, #20]
 8007450:	444e      	add	r6, r9
 8007452:	eba5 0509 	sub.w	r5, r5, r9
 8007456:	6026      	str	r6, [r4, #0]
 8007458:	60a5      	str	r5, [r4, #8]
 800745a:	463e      	mov	r6, r7
 800745c:	42be      	cmp	r6, r7
 800745e:	d900      	bls.n	8007462 <__ssputs_r+0x72>
 8007460:	463e      	mov	r6, r7
 8007462:	6820      	ldr	r0, [r4, #0]
 8007464:	4632      	mov	r2, r6
 8007466:	4641      	mov	r1, r8
 8007468:	f000 fb84 	bl	8007b74 <memmove>
 800746c:	68a3      	ldr	r3, [r4, #8]
 800746e:	1b9b      	subs	r3, r3, r6
 8007470:	60a3      	str	r3, [r4, #8]
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	4433      	add	r3, r6
 8007476:	6023      	str	r3, [r4, #0]
 8007478:	2000      	movs	r0, #0
 800747a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747e:	462a      	mov	r2, r5
 8007480:	f000 fb4a 	bl	8007b18 <_realloc_r>
 8007484:	4606      	mov	r6, r0
 8007486:	2800      	cmp	r0, #0
 8007488:	d1e0      	bne.n	800744c <__ssputs_r+0x5c>
 800748a:	6921      	ldr	r1, [r4, #16]
 800748c:	4650      	mov	r0, sl
 800748e:	f7ff ff65 	bl	800735c <_free_r>
 8007492:	230c      	movs	r3, #12
 8007494:	f8ca 3000 	str.w	r3, [sl]
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800749e:	81a3      	strh	r3, [r4, #12]
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074a4:	e7e9      	b.n	800747a <__ssputs_r+0x8a>
	...

080074a8 <_svfiprintf_r>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	4698      	mov	r8, r3
 80074ae:	898b      	ldrh	r3, [r1, #12]
 80074b0:	061b      	lsls	r3, r3, #24
 80074b2:	b09d      	sub	sp, #116	@ 0x74
 80074b4:	4607      	mov	r7, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	4614      	mov	r4, r2
 80074ba:	d510      	bpl.n	80074de <_svfiprintf_r+0x36>
 80074bc:	690b      	ldr	r3, [r1, #16]
 80074be:	b973      	cbnz	r3, 80074de <_svfiprintf_r+0x36>
 80074c0:	2140      	movs	r1, #64	@ 0x40
 80074c2:	f000 f90f 	bl	80076e4 <_malloc_r>
 80074c6:	6028      	str	r0, [r5, #0]
 80074c8:	6128      	str	r0, [r5, #16]
 80074ca:	b930      	cbnz	r0, 80074da <_svfiprintf_r+0x32>
 80074cc:	230c      	movs	r3, #12
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074d4:	b01d      	add	sp, #116	@ 0x74
 80074d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074da:	2340      	movs	r3, #64	@ 0x40
 80074dc:	616b      	str	r3, [r5, #20]
 80074de:	2300      	movs	r3, #0
 80074e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80074e2:	2320      	movs	r3, #32
 80074e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80074ec:	2330      	movs	r3, #48	@ 0x30
 80074ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800768c <_svfiprintf_r+0x1e4>
 80074f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074f6:	f04f 0901 	mov.w	r9, #1
 80074fa:	4623      	mov	r3, r4
 80074fc:	469a      	mov	sl, r3
 80074fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007502:	b10a      	cbz	r2, 8007508 <_svfiprintf_r+0x60>
 8007504:	2a25      	cmp	r2, #37	@ 0x25
 8007506:	d1f9      	bne.n	80074fc <_svfiprintf_r+0x54>
 8007508:	ebba 0b04 	subs.w	fp, sl, r4
 800750c:	d00b      	beq.n	8007526 <_svfiprintf_r+0x7e>
 800750e:	465b      	mov	r3, fp
 8007510:	4622      	mov	r2, r4
 8007512:	4629      	mov	r1, r5
 8007514:	4638      	mov	r0, r7
 8007516:	f7ff ff6b 	bl	80073f0 <__ssputs_r>
 800751a:	3001      	adds	r0, #1
 800751c:	f000 80a7 	beq.w	800766e <_svfiprintf_r+0x1c6>
 8007520:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007522:	445a      	add	r2, fp
 8007524:	9209      	str	r2, [sp, #36]	@ 0x24
 8007526:	f89a 3000 	ldrb.w	r3, [sl]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 809f 	beq.w	800766e <_svfiprintf_r+0x1c6>
 8007530:	2300      	movs	r3, #0
 8007532:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800753a:	f10a 0a01 	add.w	sl, sl, #1
 800753e:	9304      	str	r3, [sp, #16]
 8007540:	9307      	str	r3, [sp, #28]
 8007542:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007546:	931a      	str	r3, [sp, #104]	@ 0x68
 8007548:	4654      	mov	r4, sl
 800754a:	2205      	movs	r2, #5
 800754c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007550:	484e      	ldr	r0, [pc, #312]	@ (800768c <_svfiprintf_r+0x1e4>)
 8007552:	f7f8 fe4d 	bl	80001f0 <memchr>
 8007556:	9a04      	ldr	r2, [sp, #16]
 8007558:	b9d8      	cbnz	r0, 8007592 <_svfiprintf_r+0xea>
 800755a:	06d0      	lsls	r0, r2, #27
 800755c:	bf44      	itt	mi
 800755e:	2320      	movmi	r3, #32
 8007560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007564:	0711      	lsls	r1, r2, #28
 8007566:	bf44      	itt	mi
 8007568:	232b      	movmi	r3, #43	@ 0x2b
 800756a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800756e:	f89a 3000 	ldrb.w	r3, [sl]
 8007572:	2b2a      	cmp	r3, #42	@ 0x2a
 8007574:	d015      	beq.n	80075a2 <_svfiprintf_r+0xfa>
 8007576:	9a07      	ldr	r2, [sp, #28]
 8007578:	4654      	mov	r4, sl
 800757a:	2000      	movs	r0, #0
 800757c:	f04f 0c0a 	mov.w	ip, #10
 8007580:	4621      	mov	r1, r4
 8007582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007586:	3b30      	subs	r3, #48	@ 0x30
 8007588:	2b09      	cmp	r3, #9
 800758a:	d94b      	bls.n	8007624 <_svfiprintf_r+0x17c>
 800758c:	b1b0      	cbz	r0, 80075bc <_svfiprintf_r+0x114>
 800758e:	9207      	str	r2, [sp, #28]
 8007590:	e014      	b.n	80075bc <_svfiprintf_r+0x114>
 8007592:	eba0 0308 	sub.w	r3, r0, r8
 8007596:	fa09 f303 	lsl.w	r3, r9, r3
 800759a:	4313      	orrs	r3, r2
 800759c:	9304      	str	r3, [sp, #16]
 800759e:	46a2      	mov	sl, r4
 80075a0:	e7d2      	b.n	8007548 <_svfiprintf_r+0xa0>
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	1d19      	adds	r1, r3, #4
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	9103      	str	r1, [sp, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bfbb      	ittet	lt
 80075ae:	425b      	neglt	r3, r3
 80075b0:	f042 0202 	orrlt.w	r2, r2, #2
 80075b4:	9307      	strge	r3, [sp, #28]
 80075b6:	9307      	strlt	r3, [sp, #28]
 80075b8:	bfb8      	it	lt
 80075ba:	9204      	strlt	r2, [sp, #16]
 80075bc:	7823      	ldrb	r3, [r4, #0]
 80075be:	2b2e      	cmp	r3, #46	@ 0x2e
 80075c0:	d10a      	bne.n	80075d8 <_svfiprintf_r+0x130>
 80075c2:	7863      	ldrb	r3, [r4, #1]
 80075c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80075c6:	d132      	bne.n	800762e <_svfiprintf_r+0x186>
 80075c8:	9b03      	ldr	r3, [sp, #12]
 80075ca:	1d1a      	adds	r2, r3, #4
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	9203      	str	r2, [sp, #12]
 80075d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075d4:	3402      	adds	r4, #2
 80075d6:	9305      	str	r3, [sp, #20]
 80075d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800769c <_svfiprintf_r+0x1f4>
 80075dc:	7821      	ldrb	r1, [r4, #0]
 80075de:	2203      	movs	r2, #3
 80075e0:	4650      	mov	r0, sl
 80075e2:	f7f8 fe05 	bl	80001f0 <memchr>
 80075e6:	b138      	cbz	r0, 80075f8 <_svfiprintf_r+0x150>
 80075e8:	9b04      	ldr	r3, [sp, #16]
 80075ea:	eba0 000a 	sub.w	r0, r0, sl
 80075ee:	2240      	movs	r2, #64	@ 0x40
 80075f0:	4082      	lsls	r2, r0
 80075f2:	4313      	orrs	r3, r2
 80075f4:	3401      	adds	r4, #1
 80075f6:	9304      	str	r3, [sp, #16]
 80075f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fc:	4824      	ldr	r0, [pc, #144]	@ (8007690 <_svfiprintf_r+0x1e8>)
 80075fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007602:	2206      	movs	r2, #6
 8007604:	f7f8 fdf4 	bl	80001f0 <memchr>
 8007608:	2800      	cmp	r0, #0
 800760a:	d036      	beq.n	800767a <_svfiprintf_r+0x1d2>
 800760c:	4b21      	ldr	r3, [pc, #132]	@ (8007694 <_svfiprintf_r+0x1ec>)
 800760e:	bb1b      	cbnz	r3, 8007658 <_svfiprintf_r+0x1b0>
 8007610:	9b03      	ldr	r3, [sp, #12]
 8007612:	3307      	adds	r3, #7
 8007614:	f023 0307 	bic.w	r3, r3, #7
 8007618:	3308      	adds	r3, #8
 800761a:	9303      	str	r3, [sp, #12]
 800761c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800761e:	4433      	add	r3, r6
 8007620:	9309      	str	r3, [sp, #36]	@ 0x24
 8007622:	e76a      	b.n	80074fa <_svfiprintf_r+0x52>
 8007624:	fb0c 3202 	mla	r2, ip, r2, r3
 8007628:	460c      	mov	r4, r1
 800762a:	2001      	movs	r0, #1
 800762c:	e7a8      	b.n	8007580 <_svfiprintf_r+0xd8>
 800762e:	2300      	movs	r3, #0
 8007630:	3401      	adds	r4, #1
 8007632:	9305      	str	r3, [sp, #20]
 8007634:	4619      	mov	r1, r3
 8007636:	f04f 0c0a 	mov.w	ip, #10
 800763a:	4620      	mov	r0, r4
 800763c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007640:	3a30      	subs	r2, #48	@ 0x30
 8007642:	2a09      	cmp	r2, #9
 8007644:	d903      	bls.n	800764e <_svfiprintf_r+0x1a6>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0c6      	beq.n	80075d8 <_svfiprintf_r+0x130>
 800764a:	9105      	str	r1, [sp, #20]
 800764c:	e7c4      	b.n	80075d8 <_svfiprintf_r+0x130>
 800764e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007652:	4604      	mov	r4, r0
 8007654:	2301      	movs	r3, #1
 8007656:	e7f0      	b.n	800763a <_svfiprintf_r+0x192>
 8007658:	ab03      	add	r3, sp, #12
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	462a      	mov	r2, r5
 800765e:	4b0e      	ldr	r3, [pc, #56]	@ (8007698 <_svfiprintf_r+0x1f0>)
 8007660:	a904      	add	r1, sp, #16
 8007662:	4638      	mov	r0, r7
 8007664:	f3af 8000 	nop.w
 8007668:	1c42      	adds	r2, r0, #1
 800766a:	4606      	mov	r6, r0
 800766c:	d1d6      	bne.n	800761c <_svfiprintf_r+0x174>
 800766e:	89ab      	ldrh	r3, [r5, #12]
 8007670:	065b      	lsls	r3, r3, #25
 8007672:	f53f af2d 	bmi.w	80074d0 <_svfiprintf_r+0x28>
 8007676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007678:	e72c      	b.n	80074d4 <_svfiprintf_r+0x2c>
 800767a:	ab03      	add	r3, sp, #12
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	462a      	mov	r2, r5
 8007680:	4b05      	ldr	r3, [pc, #20]	@ (8007698 <_svfiprintf_r+0x1f0>)
 8007682:	a904      	add	r1, sp, #16
 8007684:	4638      	mov	r0, r7
 8007686:	f000 f91b 	bl	80078c0 <_printf_i>
 800768a:	e7ed      	b.n	8007668 <_svfiprintf_r+0x1c0>
 800768c:	08007d48 	.word	0x08007d48
 8007690:	08007d52 	.word	0x08007d52
 8007694:	00000000 	.word	0x00000000
 8007698:	080073f1 	.word	0x080073f1
 800769c:	08007d4e 	.word	0x08007d4e

080076a0 <sbrk_aligned>:
 80076a0:	b570      	push	{r4, r5, r6, lr}
 80076a2:	4e0f      	ldr	r6, [pc, #60]	@ (80076e0 <sbrk_aligned+0x40>)
 80076a4:	460c      	mov	r4, r1
 80076a6:	6831      	ldr	r1, [r6, #0]
 80076a8:	4605      	mov	r5, r0
 80076aa:	b911      	cbnz	r1, 80076b2 <sbrk_aligned+0x12>
 80076ac:	f000 fa7c 	bl	8007ba8 <_sbrk_r>
 80076b0:	6030      	str	r0, [r6, #0]
 80076b2:	4621      	mov	r1, r4
 80076b4:	4628      	mov	r0, r5
 80076b6:	f000 fa77 	bl	8007ba8 <_sbrk_r>
 80076ba:	1c43      	adds	r3, r0, #1
 80076bc:	d103      	bne.n	80076c6 <sbrk_aligned+0x26>
 80076be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80076c2:	4620      	mov	r0, r4
 80076c4:	bd70      	pop	{r4, r5, r6, pc}
 80076c6:	1cc4      	adds	r4, r0, #3
 80076c8:	f024 0403 	bic.w	r4, r4, #3
 80076cc:	42a0      	cmp	r0, r4
 80076ce:	d0f8      	beq.n	80076c2 <sbrk_aligned+0x22>
 80076d0:	1a21      	subs	r1, r4, r0
 80076d2:	4628      	mov	r0, r5
 80076d4:	f000 fa68 	bl	8007ba8 <_sbrk_r>
 80076d8:	3001      	adds	r0, #1
 80076da:	d1f2      	bne.n	80076c2 <sbrk_aligned+0x22>
 80076dc:	e7ef      	b.n	80076be <sbrk_aligned+0x1e>
 80076de:	bf00      	nop
 80076e0:	20005a60 	.word	0x20005a60

080076e4 <_malloc_r>:
 80076e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e8:	1ccd      	adds	r5, r1, #3
 80076ea:	f025 0503 	bic.w	r5, r5, #3
 80076ee:	3508      	adds	r5, #8
 80076f0:	2d0c      	cmp	r5, #12
 80076f2:	bf38      	it	cc
 80076f4:	250c      	movcc	r5, #12
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	4606      	mov	r6, r0
 80076fa:	db01      	blt.n	8007700 <_malloc_r+0x1c>
 80076fc:	42a9      	cmp	r1, r5
 80076fe:	d904      	bls.n	800770a <_malloc_r+0x26>
 8007700:	230c      	movs	r3, #12
 8007702:	6033      	str	r3, [r6, #0]
 8007704:	2000      	movs	r0, #0
 8007706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800770a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077e0 <_malloc_r+0xfc>
 800770e:	f000 f9f7 	bl	8007b00 <__malloc_lock>
 8007712:	f8d8 3000 	ldr.w	r3, [r8]
 8007716:	461c      	mov	r4, r3
 8007718:	bb44      	cbnz	r4, 800776c <_malloc_r+0x88>
 800771a:	4629      	mov	r1, r5
 800771c:	4630      	mov	r0, r6
 800771e:	f7ff ffbf 	bl	80076a0 <sbrk_aligned>
 8007722:	1c43      	adds	r3, r0, #1
 8007724:	4604      	mov	r4, r0
 8007726:	d158      	bne.n	80077da <_malloc_r+0xf6>
 8007728:	f8d8 4000 	ldr.w	r4, [r8]
 800772c:	4627      	mov	r7, r4
 800772e:	2f00      	cmp	r7, #0
 8007730:	d143      	bne.n	80077ba <_malloc_r+0xd6>
 8007732:	2c00      	cmp	r4, #0
 8007734:	d04b      	beq.n	80077ce <_malloc_r+0xea>
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	4639      	mov	r1, r7
 800773a:	4630      	mov	r0, r6
 800773c:	eb04 0903 	add.w	r9, r4, r3
 8007740:	f000 fa32 	bl	8007ba8 <_sbrk_r>
 8007744:	4581      	cmp	r9, r0
 8007746:	d142      	bne.n	80077ce <_malloc_r+0xea>
 8007748:	6821      	ldr	r1, [r4, #0]
 800774a:	1a6d      	subs	r5, r5, r1
 800774c:	4629      	mov	r1, r5
 800774e:	4630      	mov	r0, r6
 8007750:	f7ff ffa6 	bl	80076a0 <sbrk_aligned>
 8007754:	3001      	adds	r0, #1
 8007756:	d03a      	beq.n	80077ce <_malloc_r+0xea>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	442b      	add	r3, r5
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	f8d8 3000 	ldr.w	r3, [r8]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	bb62      	cbnz	r2, 80077c0 <_malloc_r+0xdc>
 8007766:	f8c8 7000 	str.w	r7, [r8]
 800776a:	e00f      	b.n	800778c <_malloc_r+0xa8>
 800776c:	6822      	ldr	r2, [r4, #0]
 800776e:	1b52      	subs	r2, r2, r5
 8007770:	d420      	bmi.n	80077b4 <_malloc_r+0xd0>
 8007772:	2a0b      	cmp	r2, #11
 8007774:	d917      	bls.n	80077a6 <_malloc_r+0xc2>
 8007776:	1961      	adds	r1, r4, r5
 8007778:	42a3      	cmp	r3, r4
 800777a:	6025      	str	r5, [r4, #0]
 800777c:	bf18      	it	ne
 800777e:	6059      	strne	r1, [r3, #4]
 8007780:	6863      	ldr	r3, [r4, #4]
 8007782:	bf08      	it	eq
 8007784:	f8c8 1000 	streq.w	r1, [r8]
 8007788:	5162      	str	r2, [r4, r5]
 800778a:	604b      	str	r3, [r1, #4]
 800778c:	4630      	mov	r0, r6
 800778e:	f000 f9bd 	bl	8007b0c <__malloc_unlock>
 8007792:	f104 000b 	add.w	r0, r4, #11
 8007796:	1d23      	adds	r3, r4, #4
 8007798:	f020 0007 	bic.w	r0, r0, #7
 800779c:	1ac2      	subs	r2, r0, r3
 800779e:	bf1c      	itt	ne
 80077a0:	1a1b      	subne	r3, r3, r0
 80077a2:	50a3      	strne	r3, [r4, r2]
 80077a4:	e7af      	b.n	8007706 <_malloc_r+0x22>
 80077a6:	6862      	ldr	r2, [r4, #4]
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	bf0c      	ite	eq
 80077ac:	f8c8 2000 	streq.w	r2, [r8]
 80077b0:	605a      	strne	r2, [r3, #4]
 80077b2:	e7eb      	b.n	800778c <_malloc_r+0xa8>
 80077b4:	4623      	mov	r3, r4
 80077b6:	6864      	ldr	r4, [r4, #4]
 80077b8:	e7ae      	b.n	8007718 <_malloc_r+0x34>
 80077ba:	463c      	mov	r4, r7
 80077bc:	687f      	ldr	r7, [r7, #4]
 80077be:	e7b6      	b.n	800772e <_malloc_r+0x4a>
 80077c0:	461a      	mov	r2, r3
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	d1fb      	bne.n	80077c0 <_malloc_r+0xdc>
 80077c8:	2300      	movs	r3, #0
 80077ca:	6053      	str	r3, [r2, #4]
 80077cc:	e7de      	b.n	800778c <_malloc_r+0xa8>
 80077ce:	230c      	movs	r3, #12
 80077d0:	6033      	str	r3, [r6, #0]
 80077d2:	4630      	mov	r0, r6
 80077d4:	f000 f99a 	bl	8007b0c <__malloc_unlock>
 80077d8:	e794      	b.n	8007704 <_malloc_r+0x20>
 80077da:	6005      	str	r5, [r0, #0]
 80077dc:	e7d6      	b.n	800778c <_malloc_r+0xa8>
 80077de:	bf00      	nop
 80077e0:	20005a64 	.word	0x20005a64

080077e4 <_printf_common>:
 80077e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e8:	4616      	mov	r6, r2
 80077ea:	4698      	mov	r8, r3
 80077ec:	688a      	ldr	r2, [r1, #8]
 80077ee:	690b      	ldr	r3, [r1, #16]
 80077f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077f4:	4293      	cmp	r3, r2
 80077f6:	bfb8      	it	lt
 80077f8:	4613      	movlt	r3, r2
 80077fa:	6033      	str	r3, [r6, #0]
 80077fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007800:	4607      	mov	r7, r0
 8007802:	460c      	mov	r4, r1
 8007804:	b10a      	cbz	r2, 800780a <_printf_common+0x26>
 8007806:	3301      	adds	r3, #1
 8007808:	6033      	str	r3, [r6, #0]
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	0699      	lsls	r1, r3, #26
 800780e:	bf42      	ittt	mi
 8007810:	6833      	ldrmi	r3, [r6, #0]
 8007812:	3302      	addmi	r3, #2
 8007814:	6033      	strmi	r3, [r6, #0]
 8007816:	6825      	ldr	r5, [r4, #0]
 8007818:	f015 0506 	ands.w	r5, r5, #6
 800781c:	d106      	bne.n	800782c <_printf_common+0x48>
 800781e:	f104 0a19 	add.w	sl, r4, #25
 8007822:	68e3      	ldr	r3, [r4, #12]
 8007824:	6832      	ldr	r2, [r6, #0]
 8007826:	1a9b      	subs	r3, r3, r2
 8007828:	42ab      	cmp	r3, r5
 800782a:	dc26      	bgt.n	800787a <_printf_common+0x96>
 800782c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007830:	6822      	ldr	r2, [r4, #0]
 8007832:	3b00      	subs	r3, #0
 8007834:	bf18      	it	ne
 8007836:	2301      	movne	r3, #1
 8007838:	0692      	lsls	r2, r2, #26
 800783a:	d42b      	bmi.n	8007894 <_printf_common+0xb0>
 800783c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007840:	4641      	mov	r1, r8
 8007842:	4638      	mov	r0, r7
 8007844:	47c8      	blx	r9
 8007846:	3001      	adds	r0, #1
 8007848:	d01e      	beq.n	8007888 <_printf_common+0xa4>
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	6922      	ldr	r2, [r4, #16]
 800784e:	f003 0306 	and.w	r3, r3, #6
 8007852:	2b04      	cmp	r3, #4
 8007854:	bf02      	ittt	eq
 8007856:	68e5      	ldreq	r5, [r4, #12]
 8007858:	6833      	ldreq	r3, [r6, #0]
 800785a:	1aed      	subeq	r5, r5, r3
 800785c:	68a3      	ldr	r3, [r4, #8]
 800785e:	bf0c      	ite	eq
 8007860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007864:	2500      	movne	r5, #0
 8007866:	4293      	cmp	r3, r2
 8007868:	bfc4      	itt	gt
 800786a:	1a9b      	subgt	r3, r3, r2
 800786c:	18ed      	addgt	r5, r5, r3
 800786e:	2600      	movs	r6, #0
 8007870:	341a      	adds	r4, #26
 8007872:	42b5      	cmp	r5, r6
 8007874:	d11a      	bne.n	80078ac <_printf_common+0xc8>
 8007876:	2000      	movs	r0, #0
 8007878:	e008      	b.n	800788c <_printf_common+0xa8>
 800787a:	2301      	movs	r3, #1
 800787c:	4652      	mov	r2, sl
 800787e:	4641      	mov	r1, r8
 8007880:	4638      	mov	r0, r7
 8007882:	47c8      	blx	r9
 8007884:	3001      	adds	r0, #1
 8007886:	d103      	bne.n	8007890 <_printf_common+0xac>
 8007888:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800788c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007890:	3501      	adds	r5, #1
 8007892:	e7c6      	b.n	8007822 <_printf_common+0x3e>
 8007894:	18e1      	adds	r1, r4, r3
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	2030      	movs	r0, #48	@ 0x30
 800789a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800789e:	4422      	add	r2, r4
 80078a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078a8:	3302      	adds	r3, #2
 80078aa:	e7c7      	b.n	800783c <_printf_common+0x58>
 80078ac:	2301      	movs	r3, #1
 80078ae:	4622      	mov	r2, r4
 80078b0:	4641      	mov	r1, r8
 80078b2:	4638      	mov	r0, r7
 80078b4:	47c8      	blx	r9
 80078b6:	3001      	adds	r0, #1
 80078b8:	d0e6      	beq.n	8007888 <_printf_common+0xa4>
 80078ba:	3601      	adds	r6, #1
 80078bc:	e7d9      	b.n	8007872 <_printf_common+0x8e>
	...

080078c0 <_printf_i>:
 80078c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078c4:	7e0f      	ldrb	r7, [r1, #24]
 80078c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078c8:	2f78      	cmp	r7, #120	@ 0x78
 80078ca:	4691      	mov	r9, r2
 80078cc:	4680      	mov	r8, r0
 80078ce:	460c      	mov	r4, r1
 80078d0:	469a      	mov	sl, r3
 80078d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078d6:	d807      	bhi.n	80078e8 <_printf_i+0x28>
 80078d8:	2f62      	cmp	r7, #98	@ 0x62
 80078da:	d80a      	bhi.n	80078f2 <_printf_i+0x32>
 80078dc:	2f00      	cmp	r7, #0
 80078de:	f000 80d2 	beq.w	8007a86 <_printf_i+0x1c6>
 80078e2:	2f58      	cmp	r7, #88	@ 0x58
 80078e4:	f000 80b9 	beq.w	8007a5a <_printf_i+0x19a>
 80078e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078f0:	e03a      	b.n	8007968 <_printf_i+0xa8>
 80078f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078f6:	2b15      	cmp	r3, #21
 80078f8:	d8f6      	bhi.n	80078e8 <_printf_i+0x28>
 80078fa:	a101      	add	r1, pc, #4	@ (adr r1, 8007900 <_printf_i+0x40>)
 80078fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007900:	08007959 	.word	0x08007959
 8007904:	0800796d 	.word	0x0800796d
 8007908:	080078e9 	.word	0x080078e9
 800790c:	080078e9 	.word	0x080078e9
 8007910:	080078e9 	.word	0x080078e9
 8007914:	080078e9 	.word	0x080078e9
 8007918:	0800796d 	.word	0x0800796d
 800791c:	080078e9 	.word	0x080078e9
 8007920:	080078e9 	.word	0x080078e9
 8007924:	080078e9 	.word	0x080078e9
 8007928:	080078e9 	.word	0x080078e9
 800792c:	08007a6d 	.word	0x08007a6d
 8007930:	08007997 	.word	0x08007997
 8007934:	08007a27 	.word	0x08007a27
 8007938:	080078e9 	.word	0x080078e9
 800793c:	080078e9 	.word	0x080078e9
 8007940:	08007a8f 	.word	0x08007a8f
 8007944:	080078e9 	.word	0x080078e9
 8007948:	08007997 	.word	0x08007997
 800794c:	080078e9 	.word	0x080078e9
 8007950:	080078e9 	.word	0x080078e9
 8007954:	08007a2f 	.word	0x08007a2f
 8007958:	6833      	ldr	r3, [r6, #0]
 800795a:	1d1a      	adds	r2, r3, #4
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6032      	str	r2, [r6, #0]
 8007960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007964:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007968:	2301      	movs	r3, #1
 800796a:	e09d      	b.n	8007aa8 <_printf_i+0x1e8>
 800796c:	6833      	ldr	r3, [r6, #0]
 800796e:	6820      	ldr	r0, [r4, #0]
 8007970:	1d19      	adds	r1, r3, #4
 8007972:	6031      	str	r1, [r6, #0]
 8007974:	0606      	lsls	r6, r0, #24
 8007976:	d501      	bpl.n	800797c <_printf_i+0xbc>
 8007978:	681d      	ldr	r5, [r3, #0]
 800797a:	e003      	b.n	8007984 <_printf_i+0xc4>
 800797c:	0645      	lsls	r5, r0, #25
 800797e:	d5fb      	bpl.n	8007978 <_printf_i+0xb8>
 8007980:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007984:	2d00      	cmp	r5, #0
 8007986:	da03      	bge.n	8007990 <_printf_i+0xd0>
 8007988:	232d      	movs	r3, #45	@ 0x2d
 800798a:	426d      	negs	r5, r5
 800798c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007990:	4859      	ldr	r0, [pc, #356]	@ (8007af8 <_printf_i+0x238>)
 8007992:	230a      	movs	r3, #10
 8007994:	e011      	b.n	80079ba <_printf_i+0xfa>
 8007996:	6821      	ldr	r1, [r4, #0]
 8007998:	6833      	ldr	r3, [r6, #0]
 800799a:	0608      	lsls	r0, r1, #24
 800799c:	f853 5b04 	ldr.w	r5, [r3], #4
 80079a0:	d402      	bmi.n	80079a8 <_printf_i+0xe8>
 80079a2:	0649      	lsls	r1, r1, #25
 80079a4:	bf48      	it	mi
 80079a6:	b2ad      	uxthmi	r5, r5
 80079a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80079aa:	4853      	ldr	r0, [pc, #332]	@ (8007af8 <_printf_i+0x238>)
 80079ac:	6033      	str	r3, [r6, #0]
 80079ae:	bf14      	ite	ne
 80079b0:	230a      	movne	r3, #10
 80079b2:	2308      	moveq	r3, #8
 80079b4:	2100      	movs	r1, #0
 80079b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079ba:	6866      	ldr	r6, [r4, #4]
 80079bc:	60a6      	str	r6, [r4, #8]
 80079be:	2e00      	cmp	r6, #0
 80079c0:	bfa2      	ittt	ge
 80079c2:	6821      	ldrge	r1, [r4, #0]
 80079c4:	f021 0104 	bicge.w	r1, r1, #4
 80079c8:	6021      	strge	r1, [r4, #0]
 80079ca:	b90d      	cbnz	r5, 80079d0 <_printf_i+0x110>
 80079cc:	2e00      	cmp	r6, #0
 80079ce:	d04b      	beq.n	8007a68 <_printf_i+0x1a8>
 80079d0:	4616      	mov	r6, r2
 80079d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80079d6:	fb03 5711 	mls	r7, r3, r1, r5
 80079da:	5dc7      	ldrb	r7, [r0, r7]
 80079dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079e0:	462f      	mov	r7, r5
 80079e2:	42bb      	cmp	r3, r7
 80079e4:	460d      	mov	r5, r1
 80079e6:	d9f4      	bls.n	80079d2 <_printf_i+0x112>
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	d10b      	bne.n	8007a04 <_printf_i+0x144>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	07df      	lsls	r7, r3, #31
 80079f0:	d508      	bpl.n	8007a04 <_printf_i+0x144>
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	6861      	ldr	r1, [r4, #4]
 80079f6:	4299      	cmp	r1, r3
 80079f8:	bfde      	ittt	le
 80079fa:	2330      	movle	r3, #48	@ 0x30
 80079fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a00:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007a04:	1b92      	subs	r2, r2, r6
 8007a06:	6122      	str	r2, [r4, #16]
 8007a08:	f8cd a000 	str.w	sl, [sp]
 8007a0c:	464b      	mov	r3, r9
 8007a0e:	aa03      	add	r2, sp, #12
 8007a10:	4621      	mov	r1, r4
 8007a12:	4640      	mov	r0, r8
 8007a14:	f7ff fee6 	bl	80077e4 <_printf_common>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d14a      	bne.n	8007ab2 <_printf_i+0x1f2>
 8007a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a20:	b004      	add	sp, #16
 8007a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	f043 0320 	orr.w	r3, r3, #32
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	4833      	ldr	r0, [pc, #204]	@ (8007afc <_printf_i+0x23c>)
 8007a30:	2778      	movs	r7, #120	@ 0x78
 8007a32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	6831      	ldr	r1, [r6, #0]
 8007a3a:	061f      	lsls	r7, r3, #24
 8007a3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a40:	d402      	bmi.n	8007a48 <_printf_i+0x188>
 8007a42:	065f      	lsls	r7, r3, #25
 8007a44:	bf48      	it	mi
 8007a46:	b2ad      	uxthmi	r5, r5
 8007a48:	6031      	str	r1, [r6, #0]
 8007a4a:	07d9      	lsls	r1, r3, #31
 8007a4c:	bf44      	itt	mi
 8007a4e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a52:	6023      	strmi	r3, [r4, #0]
 8007a54:	b11d      	cbz	r5, 8007a5e <_printf_i+0x19e>
 8007a56:	2310      	movs	r3, #16
 8007a58:	e7ac      	b.n	80079b4 <_printf_i+0xf4>
 8007a5a:	4827      	ldr	r0, [pc, #156]	@ (8007af8 <_printf_i+0x238>)
 8007a5c:	e7e9      	b.n	8007a32 <_printf_i+0x172>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	f023 0320 	bic.w	r3, r3, #32
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	e7f6      	b.n	8007a56 <_printf_i+0x196>
 8007a68:	4616      	mov	r6, r2
 8007a6a:	e7bd      	b.n	80079e8 <_printf_i+0x128>
 8007a6c:	6833      	ldr	r3, [r6, #0]
 8007a6e:	6825      	ldr	r5, [r4, #0]
 8007a70:	6961      	ldr	r1, [r4, #20]
 8007a72:	1d18      	adds	r0, r3, #4
 8007a74:	6030      	str	r0, [r6, #0]
 8007a76:	062e      	lsls	r6, r5, #24
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	d501      	bpl.n	8007a80 <_printf_i+0x1c0>
 8007a7c:	6019      	str	r1, [r3, #0]
 8007a7e:	e002      	b.n	8007a86 <_printf_i+0x1c6>
 8007a80:	0668      	lsls	r0, r5, #25
 8007a82:	d5fb      	bpl.n	8007a7c <_printf_i+0x1bc>
 8007a84:	8019      	strh	r1, [r3, #0]
 8007a86:	2300      	movs	r3, #0
 8007a88:	6123      	str	r3, [r4, #16]
 8007a8a:	4616      	mov	r6, r2
 8007a8c:	e7bc      	b.n	8007a08 <_printf_i+0x148>
 8007a8e:	6833      	ldr	r3, [r6, #0]
 8007a90:	1d1a      	adds	r2, r3, #4
 8007a92:	6032      	str	r2, [r6, #0]
 8007a94:	681e      	ldr	r6, [r3, #0]
 8007a96:	6862      	ldr	r2, [r4, #4]
 8007a98:	2100      	movs	r1, #0
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7f8 fba8 	bl	80001f0 <memchr>
 8007aa0:	b108      	cbz	r0, 8007aa6 <_printf_i+0x1e6>
 8007aa2:	1b80      	subs	r0, r0, r6
 8007aa4:	6060      	str	r0, [r4, #4]
 8007aa6:	6863      	ldr	r3, [r4, #4]
 8007aa8:	6123      	str	r3, [r4, #16]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ab0:	e7aa      	b.n	8007a08 <_printf_i+0x148>
 8007ab2:	6923      	ldr	r3, [r4, #16]
 8007ab4:	4632      	mov	r2, r6
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	4640      	mov	r0, r8
 8007aba:	47d0      	blx	sl
 8007abc:	3001      	adds	r0, #1
 8007abe:	d0ad      	beq.n	8007a1c <_printf_i+0x15c>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	079b      	lsls	r3, r3, #30
 8007ac4:	d413      	bmi.n	8007aee <_printf_i+0x22e>
 8007ac6:	68e0      	ldr	r0, [r4, #12]
 8007ac8:	9b03      	ldr	r3, [sp, #12]
 8007aca:	4298      	cmp	r0, r3
 8007acc:	bfb8      	it	lt
 8007ace:	4618      	movlt	r0, r3
 8007ad0:	e7a6      	b.n	8007a20 <_printf_i+0x160>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4632      	mov	r2, r6
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	4640      	mov	r0, r8
 8007ada:	47d0      	blx	sl
 8007adc:	3001      	adds	r0, #1
 8007ade:	d09d      	beq.n	8007a1c <_printf_i+0x15c>
 8007ae0:	3501      	adds	r5, #1
 8007ae2:	68e3      	ldr	r3, [r4, #12]
 8007ae4:	9903      	ldr	r1, [sp, #12]
 8007ae6:	1a5b      	subs	r3, r3, r1
 8007ae8:	42ab      	cmp	r3, r5
 8007aea:	dcf2      	bgt.n	8007ad2 <_printf_i+0x212>
 8007aec:	e7eb      	b.n	8007ac6 <_printf_i+0x206>
 8007aee:	2500      	movs	r5, #0
 8007af0:	f104 0619 	add.w	r6, r4, #25
 8007af4:	e7f5      	b.n	8007ae2 <_printf_i+0x222>
 8007af6:	bf00      	nop
 8007af8:	08007d59 	.word	0x08007d59
 8007afc:	08007d6a 	.word	0x08007d6a

08007b00 <__malloc_lock>:
 8007b00:	4801      	ldr	r0, [pc, #4]	@ (8007b08 <__malloc_lock+0x8>)
 8007b02:	f7ff bc1b 	b.w	800733c <__retarget_lock_acquire_recursive>
 8007b06:	bf00      	nop
 8007b08:	20005a5c 	.word	0x20005a5c

08007b0c <__malloc_unlock>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	@ (8007b14 <__malloc_unlock+0x8>)
 8007b0e:	f7ff bc16 	b.w	800733e <__retarget_lock_release_recursive>
 8007b12:	bf00      	nop
 8007b14:	20005a5c 	.word	0x20005a5c

08007b18 <_realloc_r>:
 8007b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	4615      	mov	r5, r2
 8007b20:	460c      	mov	r4, r1
 8007b22:	b921      	cbnz	r1, 8007b2e <_realloc_r+0x16>
 8007b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b28:	4611      	mov	r1, r2
 8007b2a:	f7ff bddb 	b.w	80076e4 <_malloc_r>
 8007b2e:	b92a      	cbnz	r2, 8007b3c <_realloc_r+0x24>
 8007b30:	f7ff fc14 	bl	800735c <_free_r>
 8007b34:	2400      	movs	r4, #0
 8007b36:	4620      	mov	r0, r4
 8007b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b3c:	f000 f844 	bl	8007bc8 <_malloc_usable_size_r>
 8007b40:	4285      	cmp	r5, r0
 8007b42:	4606      	mov	r6, r0
 8007b44:	d802      	bhi.n	8007b4c <_realloc_r+0x34>
 8007b46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b4a:	d8f4      	bhi.n	8007b36 <_realloc_r+0x1e>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4640      	mov	r0, r8
 8007b50:	f7ff fdc8 	bl	80076e4 <_malloc_r>
 8007b54:	4607      	mov	r7, r0
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d0ec      	beq.n	8007b34 <_realloc_r+0x1c>
 8007b5a:	42b5      	cmp	r5, r6
 8007b5c:	462a      	mov	r2, r5
 8007b5e:	4621      	mov	r1, r4
 8007b60:	bf28      	it	cs
 8007b62:	4632      	movcs	r2, r6
 8007b64:	f7ff fbec 	bl	8007340 <memcpy>
 8007b68:	4621      	mov	r1, r4
 8007b6a:	4640      	mov	r0, r8
 8007b6c:	f7ff fbf6 	bl	800735c <_free_r>
 8007b70:	463c      	mov	r4, r7
 8007b72:	e7e0      	b.n	8007b36 <_realloc_r+0x1e>

08007b74 <memmove>:
 8007b74:	4288      	cmp	r0, r1
 8007b76:	b510      	push	{r4, lr}
 8007b78:	eb01 0402 	add.w	r4, r1, r2
 8007b7c:	d902      	bls.n	8007b84 <memmove+0x10>
 8007b7e:	4284      	cmp	r4, r0
 8007b80:	4623      	mov	r3, r4
 8007b82:	d807      	bhi.n	8007b94 <memmove+0x20>
 8007b84:	1e43      	subs	r3, r0, #1
 8007b86:	42a1      	cmp	r1, r4
 8007b88:	d008      	beq.n	8007b9c <memmove+0x28>
 8007b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b92:	e7f8      	b.n	8007b86 <memmove+0x12>
 8007b94:	4402      	add	r2, r0
 8007b96:	4601      	mov	r1, r0
 8007b98:	428a      	cmp	r2, r1
 8007b9a:	d100      	bne.n	8007b9e <memmove+0x2a>
 8007b9c:	bd10      	pop	{r4, pc}
 8007b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ba6:	e7f7      	b.n	8007b98 <memmove+0x24>

08007ba8 <_sbrk_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d06      	ldr	r5, [pc, #24]	@ (8007bc4 <_sbrk_r+0x1c>)
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	602b      	str	r3, [r5, #0]
 8007bb4:	f7f9 fad6 	bl	8001164 <_sbrk>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_sbrk_r+0x1a>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_sbrk_r+0x1a>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	20005a58 	.word	0x20005a58

08007bc8 <_malloc_usable_size_r>:
 8007bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bcc:	1f18      	subs	r0, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	bfbc      	itt	lt
 8007bd2:	580b      	ldrlt	r3, [r1, r0]
 8007bd4:	18c0      	addlt	r0, r0, r3
 8007bd6:	4770      	bx	lr

08007bd8 <_init>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr

08007be4 <_fini>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr
