use serialport::{
    available_ports, SerialPortType, DataBits, Parity, StopBits
};
use std::io::{Read, Write, ErrorKind};
use std::error::Error;
use std::process;
use std::time::Duration;
use encoding_rs;
use chardet::detect;
use encoding_rs::Encoding as EncodingRs;
use crossterm::{
    event::{self, Event, KeyCode, KeyEvent, KeyModifiers},
    terminal::{self, ClearType},
    cursor::MoveTo,
    ExecutableCommand,
};

// Default settings struct
#[derive(Clone, Copy)]
struct PortSettings {
    baudrate: u32,
    bytesize: DataBits,
    parity: Parity,
    stopbits: StopBits,
}

impl Default for PortSettings {
    fn default() -> Self {
        PortSettings {
            baudrate: 38400,
            bytesize: DataBits::Eight,
            parity: Parity::None,
            stopbits: StopBits::One,
        }
    }
}

fn list_available_ports() -> Vec<String> {
    match available_ports() {
        Ok(ports) => {
            if ports.is_empty() {
                println!("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤!");
                Vec::new()
            } else {
                println!("\nüîå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:");
                ports.iter().enumerate().for_each(|(i, port)| {
                    match &port.port_type {
                        SerialPortType::UsbPort(info) => {
                            println!("  {}. {} ({})",
                                     i + 1,
                                     port.port_name,
                                     info.product.clone().unwrap_or_default()
                            );
                        },
                        _ => {
                            println!("  {}. {}", i + 1, port.port_name);
                        }
                    }
                });
                ports.iter().map(|port| port.port_name.clone()).collect()
            }
        }
        Err(_) => {
            println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤!");
            Vec::new()
        }
    }
}

fn select_port() -> Option<String> {
    let ports = list_available_ports();
    if ports.is_empty() {
        return None;
    }

    loop {
        print!("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞: ");
        std::io::stdout().flush().unwrap();

        let mut input = String::new();
        std::io::stdin().read_line(&mut input).unwrap();

        match input.trim().parse::<usize>() {
            Ok(selected_index) if selected_index > 0 && selected_index <= ports.len() => {
                return Some(ports[selected_index - 1].clone());
            }
            _ => println!("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞!"),
        }
    }
}

fn choose_option<T: Clone + Eq>(
    prompt: &str,
    options: &[T],
    display_names: &[&str]
) -> T {
    println!("\n{}", prompt);
    display_names.iter().enumerate().for_each(|(i, &name)| {
        println!("  {}. {}", i + 1, name);
    });

    loop {
        print!("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä: ");
        std::io::stdout().flush().unwrap();

        let mut input = String::new();
        std::io::stdin().read_line(&mut input).unwrap();

        match input.trim().parse::<usize>() {
            Ok(selected_index) if selected_index > 0 && selected_index <= options.len() => {
                return options[selected_index - 1].clone();
            }
            _ => println!("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!"),
        }
    }
}

fn choose_configuration_mode() -> PortSettings {
    println!("\n=== ‚öô  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ ===");
    println!("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
    println!("   (38400 –±–æ–¥, 8 –±–∏—Ç, –±–µ–∑ –ø–∞—Ä–∏—Ç–µ—Ç–∞, 1 —Å—Ç–æ–ø-–±–∏—Ç)");
    println!("2. –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");

    loop {
        print!("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (1/2): ");
        std::io::stdout().flush().unwrap();

        let mut input = String::new();
        std::io::stdin().read_line(&mut input).unwrap();

        match input.trim() {
            "1" => return PortSettings::default(),
            "2" => break,
            _ => println!("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2."),
        }
    }

    let baudrates = [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200];
    let baudrate_names: Vec<String> = baudrates.iter().map(|x| x.to_string()).collect();
    let baudrate = choose_option(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ (–±–æ–¥):",
        &baudrates,
        &baudrate_names.iter().map(|x| x.as_str()).collect::<Vec<&str>>()
    );

    let bytesizes = [
        DataBits::Five,
        DataBits::Six,
        DataBits::Seven,
        DataBits::Eight,
    ];
    let bytesize_names = ["5 –±–∏—Ç", "6 –±–∏—Ç", "7 –±–∏—Ç", "8 –±–∏—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)"];
    let bytesize = choose_option(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–∞–π—Ç–∞:",
        &bytesizes,
        &bytesize_names
    );

    let parity_options = [
        Parity::None,
        Parity::Even,
        Parity::Odd,
    ];
    let parity_names = [
        "–ù–µ—Ç",
        "–ß–µ—Ç–Ω—ã–π (Even)",
        "–ù–µ—á–µ—Ç–Ω—ã–π (Odd)",
    ];
    let parity = choose_option(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∏—Ç–µ—Ç:",
        &parity_options,
        &parity_names
    );

    let stopbits = choose_option(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ø-–±–∏—Ç–æ–≤:",
        &[StopBits::One, StopBits::Two],
        &["1 —Å—Ç–æ–ø-–±–∏—Ç", "2 —Å—Ç–æ–ø-–±–∏—Ç–∞"]
    );

    PortSettings {
        baudrate,
        bytesize,
        parity,
        stopbits,
    }
}

fn bytes_to_hex_string(bytes: &[u8]) -> String {
    bytes.iter()
        .map(|b| format!("{:02X}", b))
        .collect::<Vec<_>>()
        .join(" ")
}

fn bytes_to_text(bytes: &[u8]) -> String {
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ASCII
    if bytes.len() < 4 {
        return bytes.iter()
            .map(|&b| {
                if b >= 32 && b <= 126 {
                    char::from(b).to_string()
                } else {
                    format!(".")
                }
            })
            .collect::<String>();
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    let mut result = String::new();
    
    // ASCII –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–∞–∑–æ–≤–æ–µ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
    let ascii_text = bytes.iter()
        .map(|&b| {
            if b >= 32 && b <= 126 {
                char::from(b).to_string()
            } else {
                ".".to_string()
            }
        })
        .collect::<String>();
    
    result.push_str(&format!("ASCII: \"{}\"", ascii_text));
    
    // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    let detected = detect(bytes);
    // –¥–µ—Ç–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (charset: String, confidence: f32, language: String)
    let (charset, confidence, _) = detected;
    
    if confidence > 0.5 {
        result.push_str(&format!(" | –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {}% - {}: ", 
                               (confidence * 100.0) as u8, 
                               charset));
        
        // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        if let Some(encoding) = EncodingRs::for_label(charset.as_bytes()) {
            let (text, _, _) = encoding.decode(bytes);
            result.push_str(&format!("\"{}\"", text.to_string()));
        } else {
            result.push_str("(–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å)");
        }
    } else {
        result.push_str(" | –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: ");
        
        // –î–æ–±–∞–≤–∏–º UTF-8 –∏ Windows-1251 –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
        let (utf8_text, _, _) = encoding_rs::UTF_8.decode(bytes);
        result.push_str(&format!("UTF-8: \"{}\" | ", utf8_text.to_string()));
        
        let (win1251_text, _, _) = encoding_rs::WINDOWS_1251.decode(bytes);
        result.push_str(&format!("Windows-1251: \"{}\"", win1251_text.to_string()));
    }
    
    result
}

fn print_data_info(prefix: &str, data: &[u8]) {
    let hex_string = bytes_to_hex_string(data);
    let text = bytes_to_text(data);
    
    println!("{}:", prefix);
    println!("  üìç HEX: {}", hex_string);
    
    // –ò–∑–º–µ–Ω—è–µ–º –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ - —É–±–∏—Ä–∞–µ–º \n –ø–µ—Ä–µ–¥ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    println!("  üìù –¢–µ–∫—Å—Ç: {}", text.replace("\n", "\n          "));
    println!("  üìä –†–∞–∑–º–µ—Ä: {} –±–∞–π—Ç", data.len());
}

fn process_request(request: &[u8]) -> Option<Vec<u8>> {
    print_data_info("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å", request);

    let response = match request {
        [0x01, 0x02, 0x03] => Some(vec![0x01, 0x0C]),
        [0x41] => Some(vec![0x20, 0x00]),
        [0xAA, 0xBB, 0xCC] => Some(vec![0xDD, 0xEE]),
        [0x01, x, ..] => Some(vec![0x01, x + 10]),
        _ => None
    };
    
    if let Some(resp) = &response {
        print_data_info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç", resp);
    } else {
        println!("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω - –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞");
        println!("‚ùó –ú–µ–Ω—é - ESC, –í—ã—Ö–æ–¥ - Ctrl+C");
    }
    
    response
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é clear_screen –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å crossterm
fn clear_screen() -> Result<(), Box<dyn Error>> {
    std::io::stdout().execute(terminal::Clear(ClearType::All))?;
    std::io::stdout().execute(MoveTo(0, 0))?;
    Ok(())
}

// –§—É–Ω–∫—Ü–∏—è show_menu –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
fn show_menu() {
    println!("\n=== –ú–µ–Ω—é ===");
    println!("1. –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω");
    println!("2. –í—ã—Ö–æ–¥");
    print!("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
    std::io::stdout().flush().unwrap();
}

fn main() -> Result<(), Box<dyn Error>> {
    // –ù–ï –≤–∫–ª—é—á–∞–µ–º raw_mode –≤ –Ω–∞—á–∞–ª–µ
    
    ctrlc::set_handler(move || {
        let _ = terminal::disable_raw_mode();
        println!("\nüö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã");
        process::exit(0);
    })?;

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–±–æ—Ä–∞ –ø–æ—Ä—Ç–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –≤—ã—Ö–æ–¥
    let mut port = None;
    let mut port_name = String::new();
    let mut settings = PortSettings::default();
    
    while port.is_none() {
        // –í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞
        port_name = match select_port() {
            Some(name) => name,
            None => {
                println!("‚ùå –í—ã—Ö–æ–¥: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!");
                process::exit(0);
            }
        };

        // –í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = choose_configuration_mode();

        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç
        match serialport::new(&port_name, settings.baudrate)
            .data_bits(settings.bytesize)
            .parity(settings.parity)
            .stop_bits(settings.stopbits)
            .timeout(Duration::from_secs(1))
            .open() {
                Ok(opened_port) => {
                    port = Some(opened_port);
                    println!(
                        "\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ü–æ—Ä—Ç üìå: {} @ {} –±–æ–¥ @ {:?} @ {:?} @ {:?}",
                        port_name, settings.baudrate, settings.bytesize, settings.parity, settings.stopbits
                    );
                },
                Err(e) => {
                    println!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ—Ä—Ç–∞ {}: {}", port_name, e);
                    println!("–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ä—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.");
                    
                    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
                    loop {
                        print!("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1 - –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç, 2 - –≤—ã–π—Ç–∏): ");
                        std::io::stdout().flush().unwrap();
                        
                        let mut input = String::new();
                        std::io::stdin().read_line(&mut input).unwrap();
                        
                        match input.trim() {
                            "1" => break, // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–æ—Ä—Ç–∞
                            "2" => {
                                println!("üö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã");
                                process::exit(0);
                            },
                            _ => println!("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")
                        }
                    }
                }
            }
    }
    
    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞
    let mut port = port.unwrap(); // –ë–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ—Ä—Ç –Ω–µ None
    
    println!("\nüîÑ –≠–º—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:");
    println!("   ESC - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é, Ctrl+C - –≤—ã—Ö–æ–¥");
    
    // –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ–º raw mode –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à –∫–æ–≥–¥–∞ –ø–æ—Ä—Ç —É–∂–µ –æ—Ç–∫—Ä—ã—Ç
    terminal::enable_raw_mode()?;

    let mut buffer = [0; 1024];
    let mut show_menu_flag = false;

    loop {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if event::poll(Duration::from_millis(1))? {
            if let Event::Key(KeyEvent { code, modifiers, .. }) = event::read()? {
                match code {
                    // ESC –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
                    KeyCode::Esc => {
                        show_menu_flag = true;
                    }
                    // Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞
                    KeyCode::Char('c') if modifiers.contains(KeyModifiers::CONTROL) => {
                        terminal::disable_raw_mode()?;
                        println!("\nüö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã");
                        process::exit(0);
                    }
                    _ => {}
                }
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if show_menu_flag {
            terminal::disable_raw_mode()?;
            
            show_menu();
            
            let mut input = String::new();
            std::io::stdin().read_line(&mut input).unwrap();
            
            match input.trim() {
                "1" => {
                    clear_screen()?;
                    
                    println!("–≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω.");
                    println!(
                        "\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ü–æ—Ä—Ç üìå: {} @ {} –±–æ–¥ @ {:?} @ {:?} @ {:?}",
                        port_name, settings.baudrate, settings.bytesize, settings.parity, settings.stopbits
                    );
                    println!("\nüîÑ –≠–º—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:");
                    println!("   ESC - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é, Ctrl+C - –≤—ã—Ö–æ–¥");
                },
                "2" => {
                    println!("\nüö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã");
                    process::exit(0);
                },
                _ => {
                    println!("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
                }
            }
            
            terminal::enable_raw_mode()?;
            show_menu_flag = false;
        }

        // –û–±—ã—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø–æ—Ä—Ç–æ–º
        match port.read(&mut buffer) {
            Ok(0) => {
                // No data received, sleep briefly to prevent busy waiting
                std::thread::sleep(Duration::from_millis(10));
            }
            Ok(bytes_read) => {
                // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º raw mode –¥–ª—è –≤—ã–≤–æ–¥–∞
                terminal::disable_raw_mode()?;
                
                let request = &buffer[..bytes_read];
                if let Some(response) = process_request(request) {
                    if let Err(e) = port.write(&response) {
                        eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {}", e);
                    }
                }
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º raw mode
                terminal::enable_raw_mode()?;
            }
            Err(ref e) if e.kind() == ErrorKind::TimedOut => {
                // Timeout is expected, just continue
                std::thread::sleep(Duration::from_millis(10));
            }
            Err(e) => {
                // –û—Ç–∫–ª—é—á–∞–µ–º raw mode –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–∫–∏ –∏ –≤—ã—Ö–æ–¥–æ–º
                terminal::disable_raw_mode()?;
                eprintln!("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Ä—Ç–∞: {}", e);
                
                // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —á—Ç–µ–Ω–∏—è
                println!("–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ä—Ç –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.");
                
                loop {
                    print!("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1 - –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç, 2 - –≤—ã–π—Ç–∏): ");
                    std::io::stdout().flush().unwrap();
                    
                    let mut input = String::new();
                    std::io::stdin().read_line(&mut input).unwrap();
                    
                    match input.trim() {
                        "1" => {
                            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–æ—Ä—Ç–∞
                            return Ok(());  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
                        },
                        "2" => {
                            println!("üö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã");
                            process::exit(0);
                        },
                        _ => println!("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")
                    }
                }
            }
        }
    }
}