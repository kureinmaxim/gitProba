use serialport::{
    available_ports, SerialPortType, DataBits, Parity, StopBits
};
use std::io::{Read, Write, ErrorKind};
use std::error::Error;
use std::process;
use std::time::Duration;

// Default settings struct
#[derive(Clone, Copy)]
struct PortSettings {
    baudrate: u32,
    bytesize: DataBits,
    parity: Parity,
    stopbits: StopBits,
}

impl Default for PortSettings {
    fn default() -> Self {
        PortSettings {
            baudrate: 38400,
            bytesize: DataBits::Eight,
            parity: Parity::None,
            stopbits: StopBits::One,
        }
    }
}

fn list_available_ports() -> Vec<String> {
    match available_ports() {
        Ok(ports) => {
            if ports.is_empty() {
                println!("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤!");
                Vec::new()
            } else {
                println!("\nüîå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:");
                ports.iter().enumerate().for_each(|(i, port)| {
                    match &port.port_type {
                        SerialPortType::UsbPort(info) => {
                            println!("  {}. {} ({})",
                                     i + 1,
                                     port.port_name,
                                     info.product.clone().unwrap_or_default()
                            );
                        },
                        _ => {
                            println!("  {}. {}", i + 1, port.port_name);
                        }
                    }
                });
                ports.iter().map(|port| port.port_name.clone()).collect()
            }
        }
        Err(_) => {
            println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤!");
            Vec::new()
        }
    }
}

fn select_port() -> Option<String> {
    let ports = list_available_ports();
    if ports.is_empty() {
        return None;
    }

    loop {
        print!("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞: ");
        std::io::stdout().flush().unwrap();

        let mut input = String::new();
        std::io::stdin().read_line(&mut input).unwrap();

        match input.trim().parse::<usize>() {
            Ok(selected_index) if selected_index > 0 && selected_index <= ports.len() => {
                return Some(ports[selected_index - 1].clone());
            }
            _ => println!("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞!"),
        }
    }
}

fn choose_option<T: Clone + Eq>(
    prompt: &str,
    options: &[T],
    display_names: &[&str]
) -> T {
    println!("\n{}", prompt);
    display_names.iter().enumerate().for_each(|(i, &name)| {
        println!("  {}. {}", i + 1, name);
    });

    loop {
        print!("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä: ");
        std::io::stdout().flush().unwrap();

        let mut input = String::new();
        std::io::stdin().read_line(&mut input).unwrap();

        match input.trim().parse::<usize>() {
            Ok(selected_index) if selected_index > 0 && selected_index <= options.len() => {
                return options[selected_index - 1].clone();
            }
            _ => println!("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!"),
        }
    }
}

fn choose_configuration_mode() -> PortSettings {
    println!("\n=== ‚öô  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ ===");
    println!("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
    println!("   (38400 –±–æ–¥, 8 –±–∏—Ç, –±–µ–∑ –ø–∞—Ä–∏—Ç–µ—Ç–∞, 1 —Å—Ç–æ–ø-–±–∏—Ç)");
    println!("2. –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");

    loop {
        print!("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (1/2): ");
        std::io::stdout().flush().unwrap();

        let mut input = String::new();
        std::io::stdin().read_line(&mut input).unwrap();

        match input.trim() {
            "1" => return PortSettings::default(),
            "2" => break,
            _ => println!("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2."),
        }
    }

    let baudrates = [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200];
    let baudrate_names: Vec<String> = baudrates.iter().map(|x| x.to_string()).collect();
    let baudrate = choose_option(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ (–±–æ–¥):",
        &baudrates,
        &baudrate_names.iter().map(|x| x.as_str()).collect::<Vec<&str>>()
    );

    let bytesizes = [
        DataBits::Five,
        DataBits::Six,
        DataBits::Seven,
        DataBits::Eight,
    ];
    let bytesize_names = ["5 –±–∏—Ç", "6 –±–∏—Ç", "7 –±–∏—Ç", "8 –±–∏—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)"];
    let bytesize = choose_option(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–∞–π—Ç–∞:",
        &bytesizes,
        &bytesize_names
    );

    let parity_options = [
        Parity::None,
        Parity::Even,
        Parity::Odd,
    ];
    let parity_names = [
        "–ù–µ—Ç",
        "–ß–µ—Ç–Ω—ã–π (Even)",
        "–ù–µ—á–µ—Ç–Ω—ã–π (Odd)",
    ];
    let parity = choose_option(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∏—Ç–µ—Ç:",
        &parity_options,
        &parity_names
    );

    let stopbits = choose_option(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ø-–±–∏—Ç–æ–≤:",
        &[StopBits::One, StopBits::Two],
        &["1 —Å—Ç–æ–ø-–±–∏—Ç", "2 —Å—Ç–æ–ø-–±–∏—Ç–∞"]
    );

    PortSettings {
        baudrate,
        bytesize,
        parity,
        stopbits,
    }
}

fn process_request(request: &[u8]) -> Option<Vec<u8>> {
    println!("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {}",
             request.iter().map(|b| format!("{:02X}", b)).collect::<String>()
    );

    match request {
        [0x01, 0x02, 0x03] => Some(vec![0x01, 0x0C]),
        [0x41] => Some(vec![0x20, 0x00]),
        [0xAA, 0xBB, 0xCC] => Some(vec![0xDD, 0xEE]),
        [0x01, x, ..] => Some(vec![0x01, x + 10]),
        _ => None
    }
}

fn main() -> Result<(), Box<dyn Error>> {
    ctrlc::set_handler(move || {
        println!("\nüö™ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã");
        process::exit(0);
    })?;

    let port_name = match select_port() {
        Some(name) => name,
        None => {
            println!("‚ùå –í—ã—Ö–æ–¥: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!");
            process::exit(0);
        }
    };

    let settings = choose_configuration_mode();

    let mut port = serialport::new(&port_name, settings.baudrate)
        .data_bits(settings.bytesize)
        .parity(settings.parity)
        .stop_bits(settings.stopbits)
        .timeout(Duration::from_secs(1))
        .open()?;

    println!(
        "\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ü–æ—Ä—Ç üìå: {} @ {} –±–æ–¥ @ {:?} @ {:?} @ {:?}",
        port_name, settings.baudrate, settings.bytesize, settings.parity, settings.stopbits
    );
    println!("\nüîÑ –≠–º—É–ª—è—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. üìç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.");

    let mut buffer = [0; 1024];
    loop {
        match port.read(&mut buffer) {
            Ok(0) => {
                // No data received, sleep briefly to prevent busy waiting
                std::thread::sleep(Duration::from_millis(10));
            }
            Ok(bytes_read) => {
                let request = &buffer[..bytes_read];
                if let Some(response) = process_request(request) {
                    if let Err(e) = port.write(&response) {
                        eprintln!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {}", e);
                    } else {
                        println!(
                            "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: {}",
                            response.iter().map(|b| format!("{:02X}", b)).collect::<String>()
                        );
                    }
                }
            }
            Err(ref e) if e.kind() == ErrorKind::TimedOut => {
                // Timeout is expected, just continue
                std::thread::sleep(Duration::from_millis(10));
            }
            Err(e) => {
                eprintln!("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Ä—Ç–∞: {}", e);
                return Err(Box::new(e));
            }
        }
    }
}